(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}




var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log = F2(function(tag, value)
{
	return value;
});

var _Debug_log_UNUSED = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString(value)
{
	return '<internals>';
}

function _Debug_toString_UNUSED(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash_UNUSED(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.cB.c$ === region.b9.c$)
	{
		return 'on line ' + region.cB.c$;
	}
	return 'on lines ' + region.cB.c$ + ' through ' + region.b9.c$;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**_UNUSED/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**_UNUSED/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**/
	if (typeof x.$ === 'undefined')
	//*/
	/**_UNUSED/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0 = 0;
var _Utils_Tuple0_UNUSED = { $: '#0' };

function _Utils_Tuple2(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2_UNUSED(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3_UNUSED(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr(c) { return c; }
function _Utils_chr_UNUSED(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil = { $: 0 };
var _List_Nil_UNUSED = { $: '[]' };

function _List_Cons(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons_UNUSED(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**_UNUSED/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap_UNUSED(value) { return { $: 0, a: value }; }
function _Json_unwrap_UNUSED(value) { return value.a; }

function _Json_wrap(value) { return value; }
function _Json_unwrap(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.g9,
		impl.hZ,
		impl.hP,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**_UNUSED/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (!node.$) {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === -2) {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = 1;
var $elm$core$Basics$GT = 2;
var $elm$core$Basics$LT = 0;
var $elm$core$Basics$False = 1;
var $author$project$Elm$Review$Main$HumanReadable = 0;
var $author$project$Elm$Review$Main$Mode_DontFix = {$: 0};
var $author$project$Elm$Review$Main$NotAwaiting = {$: 0};
var $elm$core$Maybe$Nothing = {$: 1};
var $author$project$Elm$Review$Reporter$Reviewing = {$: 0};
var $author$project$Elm$Review$FixExplanation$Succinct = 0;
var $elm$core$Basics$True = 0;
var $author$project$Elm$Review$UnsuppressMode$UnsuppressNone = {$: 2};
var $author$project$Elm$Review$Reporter$WithoutDetails = 1;
var $elm$core$Result$Err = function (a) {
	return {$: 1, a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 0, a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 2, a: a};
};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 0, a: a};
};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(function (f, xs) {
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;
  for (var i = 0; xs.b; i++, xs = xs.b) {
    var next = _List_Cons(A2(f, i, xs.a), _List_Nil);
    end.b = next;
    end = next;
  }
  return tmp.b;
});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 0:
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 1) {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 1:
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 2:
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 1, a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.B) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.F),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.F);
		} else {
			var treeLen = builder.B * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.M) : builder.M;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.B);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.F) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.F);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{M: nodeList, B: (len / $elm$core$Array$branchFactor) | 0, F: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Result$isOk = function (result) {
	if (!result.$) {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$Elm$Review$Main$abort = _Platform_outgoingPort('abort', $elm$json$Json$Encode$string);
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $author$project$Elm$Review$Main$abortForConfigurationErrors = _Platform_outgoingPort('abortForConfigurationErrors', $elm$core$Basics$identity);
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(0),
			pairs));
};
var $author$project$Elm$Review$Main$abortWithDetails = _Platform_outgoingPort(
	'abortWithDetails',
	function ($) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'message',
					$elm$json$Json$Encode$string($.a_)),
					_Utils_Tuple2(
					'title',
					$elm$json$Json$Encode$string($.c6))
				]));
	});
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$core$Basics$composeR = F2(function $elm$core$Basics$composeR$fn(f, g) {
  return function(x) {
    return g(f(x));
  };
});
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$append = F2(function (xs, ys) {
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;
  for (; xs.b; xs = xs.b) {
    var next = _List_Cons(xs.a, _List_Nil);
    end.b = next;
    end = next;
  }
  end.b = ys;

  return tmp.b;
});
var $elm$core$List$concat = function (lists) {
  if (!lists.b) {
    return _List_Nil;
  }
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;
  for (; lists.b.b; lists = lists.b) {
    var xs = lists.a;
    for (; xs.b; xs = xs.b) {
      var next = _List_Cons(xs.a, _List_Nil);
      end.b = next;
      end = next;
    }
  }
  end.b = lists.a;

  return tmp.b;
};
var $elm$core$List$map = F2(function (f, xs) {
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;
  for (; xs.b; xs = xs.b) {
    var next = _List_Cons(f(xs.a), _List_Nil);
    end.b = next;
    end = next;
  }
  return tmp.b;
});
var $elm$core$List$concatMap = F2(function (f, lists) {
  if (!lists.b) {
    return _List_Nil;
  }
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;
  for (; lists.b.b; lists = lists.b) {
    var xs = f(lists.a);
    for (; xs.b; xs = xs.b) {
      var next = _List_Cons(xs.a, _List_Nil);
      end.b = next;
      end = next;
    }
  }
  end.b = f(lists.a);

  return tmp.b;
});
var $jfmengels$elm_review_unused$NoUnused$Modules$Application = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review_unused$NoUnused$Modules$ElmApplication = 0;
var $jfmengels$elm_review_unused$NoUnused$Modules$LamderaApplication = 1;
var $jfmengels$elm_review_unused$NoUnused$Modules$Package = {$: 0};
var $elm$core$Set$Set_elm_builtin = $elm$core$Basics$identity;
var $elm$core$Dict$RBEmpty_elm_builtin = {$: -2};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Set$empty = $elm$core$Dict$empty;
var $elm$core$Dict$Black = 1;
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: -1, a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = 0;
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === -1) && (!right.a)) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === -1) && (!left.a)) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === -1) && (!left.a)) && (left.d.$ === -1)) && (!left.d.a)) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === -2) {
			return A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1) {
				case 0:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 1:
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0;
		return A3($elm$core$Dict$insert, key, 0, dict);
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$project_metadata_utils$Elm$Package$toString = function (_v0) {
	var user = _v0.a;
	var project = _v0.b;
	return user + ('/' + project);
};
var $jfmengels$elm_review_unused$NoUnused$LamderaSupport$isLamderaApplication = function (depsDirect) {
	return A2(
		$elm$core$List$any,
		function (_v0) {
			var name = _v0.a;
			return $elm$project_metadata_utils$Elm$Package$toString(name) === 'lamdera/core';
		},
		depsDirect);
};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $elm$project_metadata_utils$Elm$Module$toString = function (_v0) {
	var name = _v0;
	return name;
};
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === -2) {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$core$Set$union = F2(
	function (_v0, _v1) {
		var dict1 = _v0;
		var dict2 = _v1;
		return A2($elm$core$Dict$union, dict1, dict2);
	});
var $jfmengels$elm_review_unused$NoUnused$Modules$elmJsonVisitor = F2(
	function (maybeProject, projectContext) {
		var _v0 = function () {
			var _v1 = A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.h;
				},
				maybeProject);
			if (!_v1.$) {
				if (_v1.a.$ === 1) {
					var exposed = _v1.a.a.fh;
					if (!exposed.$) {
						var names = exposed.a;
						return _Utils_Tuple2(names, $jfmengels$elm_review_unused$NoUnused$Modules$Package);
					} else {
						var fakeDict = exposed.a;
						return _Utils_Tuple2(
							A2($elm$core$List$concatMap, $elm$core$Tuple$second, fakeDict),
							$jfmengels$elm_review_unused$NoUnused$Modules$Package);
					}
				} else {
					var depsDirect = _v1.a.a.e9;
					var elmApplicationType = $jfmengels$elm_review_unused$NoUnused$LamderaSupport$isLamderaApplication(depsDirect) ? 1 : 0;
					return _Utils_Tuple2(
						_List_Nil,
						$jfmengels$elm_review_unused$NoUnused$Modules$Application(elmApplicationType));
				}
			} else {
				return _Utils_Tuple2(
					_List_Nil,
					$jfmengels$elm_review_unused$NoUnused$Modules$Application(0));
			}
		}();
		var exposedModules = _v0.a;
		var projectType = _v0.b;
		return _Utils_Tuple2(
			_List_Nil,
			_Utils_update(
				projectContext,
				{
					ad: projectType,
					b0: A2(
						$elm$core$Set$union,
						projectContext.b0,
						$elm$core$Set$fromList(
							A2(
								$elm$core$List$map,
								A2(
									$elm$core$Basics$composeR,
									$elm$project_metadata_utils$Elm$Module$toString,
									$elm$core$String$split('.')),
								exposedModules)))
				}));
	});
var $jfmengels$elm_review$Review$Rule$Error = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Error$Target$FileTarget = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Error$FileTarget$Module = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Error$Target$module_ = A2($elm$core$Basics$composeR, $jfmengels$elm_review$Review$Error$FileTarget$Module, $jfmengels$elm_review$Review$Error$Target$FileTarget);
var $jfmengels$elm_review$Review$Error$Fixes$ErrorFixes = $elm$core$Basics$identity;
var $jfmengels$elm_review$SimpleAssocList$SimpleAssocList = $elm$core$Basics$identity;
var $jfmengels$elm_review$SimpleAssocList$empty = _List_Nil;
var $jfmengels$elm_review$Review$Error$Fixes$none = $jfmengels$elm_review$SimpleAssocList$empty;
var $jfmengels$elm_review$Review$Rule$errorForModule = F3(
	function (_v0, _v1, range) {
		var path = _v0;
		var message = _v1.a_;
		var details = _v1.dd;
		return {
			dd: details,
			g_: path,
			fm: $elm$core$Maybe$Nothing,
			cT: $jfmengels$elm_review$Review$Error$Fixes$none,
			a_: message,
			dJ: false,
			eG: range,
			eH: '',
			dX: $jfmengels$elm_review$Review$Error$Target$module_(path)
		};
	});
var $jfmengels$elm_review_unused$NoUnused$Modules$error = function (_v0) {
	var moduleName = _v0.a;
	var moduleKey = _v0.b.dD;
	var moduleNameLocation = _v0.b.fJ;
	return A3(
		$jfmengels$elm_review$Review$Rule$errorForModule,
		moduleKey,
		{
			dd: _List_fromArray(
				['This module is never used. You may want to remove it to keep your project clean, and maybe detect some unused code in your project.']),
			a_: 'Module `' + (A2($elm$core$String$join, '.', moduleName) + '` is never used.')
		},
		moduleNameLocation);
};
var $elm$core$Dict$filter = F2(
	function (isGood, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, d) {
					return A2(isGood, k, v) ? A3($elm$core$Dict$insert, k, v, d) : d;
				}),
			$elm$core$Dict$empty,
			dict);
	});
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === -2) {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1) {
					case 0:
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 1:
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (!_v0.$) {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0;
		return A2($elm$core$Dict$member, key, dict);
	});
var $elm$core$Basics$not = _Basics_not;
var $jfmengels$elm_review_unused$NoUnused$Modules$finalEvaluationForProject = function (_v0) {
	var modules = _v0.av;
	var usedModules = _v0.b0;
	return A2(
		$elm$core$List$map,
		$jfmengels$elm_review_unused$NoUnused$Modules$error,
		$elm$core$Dict$toList(
			A2(
				$elm$core$Dict$filter,
				F2(
					function (moduleName, _v1) {
						return !A2($elm$core$Set$member, moduleName, usedModules);
					}),
				modules)));
};
var $jfmengels$elm_review_unused$NoUnused$Modules$foldProjectContexts = F2(
	function (newContext, previousContext) {
		return {
			av: A2($elm$core$Dict$union, newContext.av, previousContext.av),
			ad: previousContext.ad,
			b0: A2($elm$core$Set$union, newContext.b0, previousContext.b0)
		};
	});
var $jfmengels$elm_review$Review$Rule$ContextCreator = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review$Review$RequestedData$RequestedData = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$RequestedData$none = {g$: _List_Nil, dt: false, dF: false, dV: false};
var $jfmengels$elm_review$Review$Rule$initContextCreator = function (fn) {
	return A2(
		$jfmengels$elm_review$Review$Rule$ContextCreator,
		F2(
			function (_v0, _v1) {
				return fn;
			}),
		$jfmengels$elm_review$Review$RequestedData$none);
};
var $elm$core$Dict$singleton = F2(
	function (key, value) {
		return A5($elm$core$Dict$RBNode_elm_builtin, 1, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
	});
var $jfmengels$elm_review$Review$Rule$withModuleKey = function (_v0) {
	var fn = _v0.a;
	var requestedData = _v0.b;
	return A2(
		$jfmengels$elm_review$Review$Rule$ContextCreator,
		F2(
			function (data, isFileIgnored) {
				return A3(fn, data, isFileIgnored, data.dD);
			}),
		requestedData);
};
var $stil4m$elm_syntax$Elm$Syntax$Node$value = function (_v0) {
	var v = _v0.b;
	return v;
};
var $jfmengels$elm_review$Review$Rule$moduleNameNode = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	switch (_v0.$) {
		case 0:
			var data = _v0.a;
			return data.dE;
		case 1:
			var data = _v0.a;
			return data.dE;
		default:
			var data = _v0.a;
			return data.dE;
	}
};
var $jfmengels$elm_review$Review$Rule$withModuleNameNode = function (_v0) {
	var fn = _v0.a;
	var requestedData = _v0.b;
	return A2(
		$jfmengels$elm_review$Review$Rule$ContextCreator,
		F2(
			function (data, isFileIgnored) {
				return A3(
					fn,
					data,
					isFileIgnored,
					$jfmengels$elm_review$Review$Rule$moduleNameNode(data.gv.hi));
			}),
		requestedData);
};
var $jfmengels$elm_review_unused$NoUnused$Modules$fromModuleToProject = $jfmengels$elm_review$Review$Rule$withModuleKey(
	$jfmengels$elm_review$Review$Rule$withModuleNameNode(
		$jfmengels$elm_review$Review$Rule$initContextCreator(
			F3(
				function (_v0, moduleKey, moduleContext) {
					var moduleNameRange = _v0.a;
					var moduleName = _v0.b;
					return {
						av: A2(
							$elm$core$Dict$singleton,
							moduleName,
							{dD: moduleKey, fJ: moduleNameRange}),
						ad: moduleContext.ad,
						b0: (A2(
							$elm$core$Set$member,
							_List_fromArray(
								['Test']),
							moduleContext.bM) || moduleContext.cG) ? A2($elm$core$Set$insert, moduleName, moduleContext.bM) : moduleContext.bM
					};
				}))));
var $jfmengels$elm_review$Review$Rule$Rule = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$RequestedData$combineJust = F2(
	function (_v0, _v1) {
		var a = _v0;
		var b = _v1;
		return {
			g$: _Utils_ap(a.g$, b.g$),
			dt: a.dt || b.dt,
			dF: a.dF || b.dF,
			dV: a.dV || b.dV
		};
	});
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $jfmengels$elm_review$Review$RequestedData$combine = F2(
	function (maybeA, maybeB) {
		if (maybeA.$ === 1) {
			return A2($elm$core$Maybe$withDefault, $jfmengels$elm_review$Review$RequestedData$none, maybeB);
		} else {
			var a = maybeA.a;
			if (!maybeB.$) {
				var b = maybeB.a;
				return A2($jfmengels$elm_review$Review$RequestedData$combineJust, a, b);
			} else {
				return a;
			}
		}
	});
var $jfmengels$elm_review$Review$Exceptions$Exceptions = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Exceptions$init = _List_Nil;
var $jfmengels$elm_review$Review$Rule$configurationError = F2(
	function (name, configurationError_) {
		return {
			w: $jfmengels$elm_review$Review$Exceptions$init,
			dr: 0,
			bV: name,
			p: false,
			hG: $jfmengels$elm_review$Review$RequestedData$none,
			as: $elm$core$Result$Err(configurationError_)
		};
	});
var $jfmengels$elm_review$Review$Rule$ElmJsonStep = 0;
var $jfmengels$elm_review$Review$Rule$ReadmeStep = 1;
var $jfmengels$elm_review$Review$Rule$RuleProjectVisitor = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Rule$AfterProjectFilesStep = 4;
var $jfmengels$elm_review$Review$Rule$TraverseAllModulesInParallel = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Rule$TraverseImportedModulesFirst = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Review$Rule$DependenciesStep = 3;
var $jfmengels$elm_review$Review$Rule$ExtraFilesStep = 2;
var $jfmengels$elm_review$Review$Cache$ExtraFile$outputContext = function (_v0) {
	var entry = _v0;
	return entry.dI;
};
var $jfmengels$elm_review$Review$Cache$ProjectFile$outputContext = function (_v0) {
	var entry = _v0;
	return entry.dI;
};
var $jfmengels$elm_review$Review$Cache$ExtraFile$outputContextHash = function (_v0) {
	var entry = _v0;
	return entry.fS;
};
var $jfmengels$elm_review$Review$Cache$ProjectFile$outputContextHash = function (_v0) {
	var entry = _v0;
	return entry.fS;
};
var $jfmengels$elm_review$Review$Rule$findInitialInputContext = F3(
	function (cache, step, defaultContext) {
		findInitialInputContext:
		while (true) {
			switch (step) {
				case 0:
					return _Utils_Tuple2(_List_Nil, defaultContext);
				case 1:
					var _v1 = cache.ba;
					if (!_v1.$) {
						var entry = _v1.a;
						return _Utils_Tuple2(
							_List_fromArray(
								[
									$jfmengels$elm_review$Review$Cache$ProjectFile$outputContextHash(entry)
								]),
							$jfmengels$elm_review$Review$Cache$ProjectFile$outputContext(entry));
					} else {
						var $temp$cache = cache,
							$temp$step = 0,
							$temp$defaultContext = defaultContext;
						cache = $temp$cache;
						step = $temp$step;
						defaultContext = $temp$defaultContext;
						continue findInitialInputContext;
					}
				case 2:
					var _v2 = cache.bX;
					if (!_v2.$) {
						var entry = _v2.a;
						return _Utils_Tuple2(
							_List_fromArray(
								[
									$jfmengels$elm_review$Review$Cache$ProjectFile$outputContextHash(entry)
								]),
							$jfmengels$elm_review$Review$Cache$ProjectFile$outputContext(entry));
					} else {
						var $temp$cache = cache,
							$temp$step = 1,
							$temp$defaultContext = defaultContext;
						cache = $temp$cache;
						step = $temp$step;
						defaultContext = $temp$defaultContext;
						continue findInitialInputContext;
					}
				case 3:
					var _v3 = cache.ap;
					if (!_v3.$) {
						var entry = _v3.a;
						return _Utils_Tuple2(
							_List_fromArray(
								[
									$jfmengels$elm_review$Review$Cache$ExtraFile$outputContextHash(entry)
								]),
							$jfmengels$elm_review$Review$Cache$ExtraFile$outputContext(entry));
					} else {
						var $temp$cache = cache,
							$temp$step = 2,
							$temp$defaultContext = defaultContext;
						cache = $temp$cache;
						step = $temp$step;
						defaultContext = $temp$defaultContext;
						continue findInitialInputContext;
					}
				default:
					var _v4 = cache.e6;
					if (!_v4.$) {
						var entry = _v4.a;
						return _Utils_Tuple2(
							_List_fromArray(
								[
									$jfmengels$elm_review$Review$Cache$ProjectFile$outputContextHash(entry)
								]),
							$jfmengels$elm_review$Review$Cache$ProjectFile$outputContext(entry));
					} else {
						var $temp$cache = cache,
							$temp$step = 3,
							$temp$defaultContext = defaultContext;
						cache = $temp$cache;
						step = $temp$step;
						defaultContext = $temp$defaultContext;
						continue findInitialInputContext;
					}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$getFolderFromTraversal = function (traversalAndFolder) {
	if (!traversalAndFolder.$) {
		var maybeFolder = traversalAndFolder.a;
		return maybeFolder;
	} else {
		var folder = traversalAndFolder.a;
		return $elm$core$Maybe$Just(folder);
	}
};
var $jfmengels$elm_review$Review$Cache$Module$outputContext = function (_v0) {
	var entry = _v0;
	return entry.dI;
};
var $jfmengels$elm_review$Review$Rule$computeFinalContext = F2(
	function (schema, cache) {
		var traversalAndFolder = function () {
			var _v3 = _Utils_Tuple2(schema.bt, schema.aa);
			if (!_v3.a) {
				var _v4 = _v3.a;
				return $jfmengels$elm_review$Review$Rule$TraverseAllModulesInParallel(schema.aa);
			} else {
				if (!_v3.b.$) {
					var _v5 = _v3.a;
					var folder = _v3.b.a;
					return $jfmengels$elm_review$Review$Rule$TraverseImportedModulesFirst(folder);
				} else {
					var _v6 = _v3.a;
					var _v7 = _v3.b;
					return $jfmengels$elm_review$Review$Rule$TraverseAllModulesInParallel($elm$core$Maybe$Nothing);
				}
			}
		}();
		var _v0 = A3($jfmengels$elm_review$Review$Rule$findInitialInputContext, cache, 4, schema.aq);
		var projectContext = _v0.b;
		var _v1 = $jfmengels$elm_review$Review$Rule$getFolderFromTraversal(traversalAndFolder);
		if (!_v1.$) {
			var foldProjectContexts = _v1.a.aY;
			return A3(
				$elm$core$Dict$foldl,
				F3(
					function (_v2, cacheEntry, acc) {
						return A2(
							foldProjectContexts,
							$jfmengels$elm_review$Review$Cache$Module$outputContext(cacheEntry),
							acc);
					}),
				projectContext,
				cache.V);
		} else {
			return projectContext;
		}
	});
var $jfmengels$elm_review$Review$Cache$Module$outputContextHash = function (_v0) {
	var entry = _v0;
	return entry.fS;
};
var $jfmengels$elm_review$Review$Cache$ContextHash$ComparableContextHash = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Cache$ContextHash$sort = function(l) { return $elm$core$List$sort(l); }
var $jfmengels$elm_review$Review$Cache$ContextHash$toComparable = function (list) {
	return $jfmengels$elm_review$Review$Cache$ContextHash$sort(list);
};
var $jfmengels$elm_review$Review$Rule$computeFinalContextHashes = F2(
	function (schema, cache) {
		var traversalAndFolder = function () {
			var _v3 = _Utils_Tuple2(schema.bt, schema.aa);
			if (!_v3.a) {
				var _v4 = _v3.a;
				return $jfmengels$elm_review$Review$Rule$TraverseAllModulesInParallel(schema.aa);
			} else {
				if (!_v3.b.$) {
					var _v5 = _v3.a;
					var folder = _v3.b.a;
					return $jfmengels$elm_review$Review$Rule$TraverseImportedModulesFirst(folder);
				} else {
					var _v6 = _v3.a;
					var _v7 = _v3.b;
					return $jfmengels$elm_review$Review$Rule$TraverseAllModulesInParallel($elm$core$Maybe$Nothing);
				}
			}
		}();
		var _v0 = A3($jfmengels$elm_review$Review$Rule$findInitialInputContext, cache, 4, schema.aq);
		var projectContextHash = _v0.a;
		var _v1 = $jfmengels$elm_review$Review$Rule$getFolderFromTraversal(traversalAndFolder);
		if (!_v1.$) {
			return $jfmengels$elm_review$Review$Cache$ContextHash$toComparable(
				A3(
					$elm$core$Dict$foldl,
					F3(
						function (_v2, cacheEntry, acc) {
							return A2(
								$elm$core$List$cons,
								$jfmengels$elm_review$Review$Cache$Module$outputContextHash(cacheEntry),
								acc);
						}),
					projectContextHash,
					cache.V));
		} else {
			return $jfmengels$elm_review$Review$Cache$ContextHash$toComparable(projectContextHash);
		}
	});
var $jfmengels$elm_review$Review$Cache$EndAnalysis$Entry = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Cache$EndAnalysis$create = F2(
	function (inputContextHashes, output_) {
		return {du: inputContextHashes, eD: output_};
	});
var $jfmengels$elm_review$Review$Cache$EndAnalysis$match = F2(
	function (context, _v0) {
		var entry = _v0;
		return _Utils_eq(context, entry.du);
	});
var $jfmengels$elm_review$Review$Cache$EndAnalysis$output = function (_v0) {
	var entry = _v0;
	return entry.eD;
};
var $jfmengels$elm_review$Review$Rule$reuseProjectRuleCache = F3(
	function (predicate, getter, cache) {
		var _v0 = getter(cache);
		if (_v0.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var value = _v0.a;
			return predicate(value) ? $elm$core$Maybe$Just(value) : $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review$Review$Rule$createDataExtractVisitor = F3(
	function (schema, raise, cache) {
		var _v0 = schema.b6;
		if (_v0.$ === 1) {
			return F2(
				function (_v1, extracts) {
					return _Utils_Tuple2(
						extracts,
						raise(cache));
				});
		} else {
			var dataExtractor = _v0.a;
			return F2(
				function (reviewOptions, extracts) {
					if (reviewOptions.fj) {
						var inputContextHashes = A2($jfmengels$elm_review$Review$Rule$computeFinalContextHashes, schema, cache);
						var cachePredicate = function (extract) {
							return A2($jfmengels$elm_review$Review$Cache$EndAnalysis$match, inputContextHashes, extract);
						};
						var _v2 = function () {
							var _v3 = A3(
								$jfmengels$elm_review$Review$Rule$reuseProjectRuleCache,
								cachePredicate,
								function ($) {
									return $.fj;
								},
								cache);
							if (!_v3.$) {
								var entry = _v3.a;
								return _Utils_Tuple2(
									$jfmengels$elm_review$Review$Cache$EndAnalysis$output(entry),
									cache);
							} else {
								var inputContext = A2($jfmengels$elm_review$Review$Rule$computeFinalContext, schema, cache);
								var extract = dataExtractor(inputContext);
								return _Utils_Tuple2(
									extract,
									_Utils_update(
										cache,
										{
											fj: $elm$core$Maybe$Just(
												A2($jfmengels$elm_review$Review$Cache$EndAnalysis$create, inputContextHashes, extract))
										}));
							}
						}();
						var extractData = _v2.a;
						var newCache = _v2.b;
						return _Utils_Tuple2(
							A3($elm$core$Dict$insert, schema.bV, extractData, extracts),
							raise(newCache));
					} else {
						return _Utils_Tuple2(
							extracts,
							raise(cache));
					}
				});
		}
	});
var $jfmengels$elm_review$Review$Cache$ProjectFile$Entry = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Cache$ContextHash$ContextHash = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Cache$ContextHash$createContextHashMarker = function (context) {
  return jsonToHash(contextToJson(context));
};

const stringifyMap = new WeakMap();
function contextToJson(context) {
  const isObject = typeof context === 'object';
  if (!isObject) {
    return JSON.stringify(context);
  }
  if (stringifyMap.has(context)) {
    return stringifyMap.get(context);
  } else {
    const json = JSON.stringify(context, globalThis.elmJsonReplacer);
    stringifyMap.set(context, json);
    return json;
  }
}

const contextHashMap = new Map();
function jsonToHash(json) {
  if (contextHashMap.has(json)) {
    return contextHashMap.get(json);
  }
  const hash = A2($jfmengels$elm_review$Vendor$Murmur3$hashString, 0, json);
  contextHashMap.set(json, hash);
  return hash;
}
var $jfmengels$elm_review$Review$Cache$ContextHash$create = function (context) {
	return $jfmengels$elm_review$Review$Cache$ContextHash$createContextHashMarker(context);
};
var $jfmengels$elm_review$Review$Cache$ProjectFile$create = function (entry) {
	return {
		d7: entry.d7,
		ca: entry.ca,
		es: entry.es,
		dI: entry.dI,
		fS: $jfmengels$elm_review$Review$Cache$ContextHash$create(entry.dI)
	};
};
var $jfmengels$elm_review$Review$Project$Valid$elmJsonHash = function (_v0) {
	var project = _v0;
	return A2($elm$core$Maybe$map, $elm$core$Tuple$second, project.ba);
};
var $jfmengels$elm_review$Review$Project$Valid$dependenciesHash = $jfmengels$elm_review$Review$Project$Valid$elmJsonHash;
var $jfmengels$elm_review$Review$Cache$ProjectFile$errors = function (_v0) {
	var entry = _v0;
	return entry.ca;
};
var $jfmengels$elm_review$Review$Rule$errorFilePathInternal = function (_v0) {
	var err = _v0;
	return err.g_;
};
var $elm$core$Basics$composeL = F2(function $elm$core$Basics$composeL$fn(g, f) {
  return function(x) {
    return g(f(x));
  };
});
var $elm$core$List$all = F2(function (isOkay, list) {
  all: while (true) {
    if (!list.b) {
      return true;
    }
    else {
      var x = list.a;
      if (!isOkay(x)) {
        return false;
      }
      list = list.b;
      continue all;
    }
  }
});
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $jfmengels$elm_review$Path$makeOSAgnostic = function (path) {
	return A3($elm$core$String$replace, '\\', '/', path);
};
var $jfmengels$elm_review$Review$Exceptions$isFileWeWantReportsFor = F2(
	function (_v0, filePath) {
		var conditions = _v0;
		var allConditions = function (path) {
			return A2(
				$elm$core$List$all,
				function (condition) {
					return condition(path);
				},
				conditions);
		};
		return allConditions(
			$jfmengels$elm_review$Path$makeOSAgnostic(filePath));
	});
var $jfmengels$elm_review$Review$Rule$mapInternalError = F2(
	function (fn, _v0) {
		var err = _v0;
		return fn(err);
	});
var $jfmengels$elm_review$Review$Rule$setRuleName = F2(
	function (ruleName_, error_) {
		return A2(
			$jfmengels$elm_review$Review$Rule$mapInternalError,
			function (err) {
				return _Utils_update(
					err,
					{eH: ruleName_});
			},
			error_);
	});
var $jfmengels$elm_review$Review$Rule$filterExceptionsAndSetName = F3(
	function (exceptions, name, errors) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (error_, acc) {
					return A2(
						$jfmengels$elm_review$Review$Exceptions$isFileWeWantReportsFor,
						exceptions,
						$jfmengels$elm_review$Review$Rule$errorFilePathInternal(error_)) ? A2(
						$elm$core$List$cons,
						A2($jfmengels$elm_review$Review$Rule$setRuleName, name, error_),
						acc) : acc;
				}),
			_List_Nil,
			errors);
	});
var $jfmengels$elm_review$Review$Cache$ProjectFile$match = F3(
	function (contentHash, contexts, _v0) {
		var entry = _v0;
		return _Utils_eq(contentHash, entry.d7) && _Utils_eq(contexts, entry.es);
	});
var $jfmengels$elm_review$Review$Rule$createDependenciesVisitor = F5(
	function (schema, _v0, raise, cache, _v1) {
		var exceptions = _v0.w;
		var allVisitor = _v1.eX;
		var directVisitor = _v1.fc;
		var _v2 = _Utils_Tuple2(allVisitor, directVisitor);
		if ((_v2.a.$ === 1) && (_v2.b.$ === 1)) {
			var _v3 = _v2.a;
			var _v4 = _v2.b;
			return $elm$core$Maybe$Nothing;
		} else {
			return $elm$core$Maybe$Just(
				F2(
					function (project, _v5) {
						var all = _v5.O;
						var direct = _v5.fb;
						var dependenciesHash = $jfmengels$elm_review$Review$Project$Valid$dependenciesHash(project);
						var _v6 = A3($jfmengels$elm_review$Review$Rule$findInitialInputContext, cache, 3, schema.aq);
						var baseInputContextHash = _v6.a;
						var inputContext = _v6.b;
						var inputContextHash = $jfmengels$elm_review$Review$Cache$ContextHash$toComparable(baseInputContextHash);
						var cachePredicate = function (entry) {
							return A3($jfmengels$elm_review$Review$Cache$ProjectFile$match, dependenciesHash, inputContextHash, entry);
						};
						var _v7 = A3(
							$jfmengels$elm_review$Review$Rule$reuseProjectRuleCache,
							cachePredicate,
							function ($) {
								return $.e6;
							},
							cache);
						if (!_v7.$) {
							var entry = _v7.a;
							return _Utils_Tuple2(
								$jfmengels$elm_review$Review$Cache$ProjectFile$errors(entry),
								raise(cache));
						} else {
							var _v8 = function () {
								if (!directVisitor.$) {
									var directVisitor_ = directVisitor.a;
									return A2(directVisitor_, direct, inputContext);
								} else {
									return _Utils_Tuple2(_List_Nil, inputContext);
								}
							}();
							var errorsForDirect = _v8.a;
							var outputContextForDirect = _v8.b;
							var _v10 = function () {
								if (!allVisitor.$) {
									var allVisitor_ = allVisitor.a;
									return A2(allVisitor_, all, outputContextForDirect);
								} else {
									return _Utils_Tuple2(_List_Nil, outputContextForDirect);
								}
							}();
							var errorsForIndirect = _v10.a;
							var finalOutputContext = _v10.b;
							var errors = A3(
								$jfmengels$elm_review$Review$Rule$filterExceptionsAndSetName,
								exceptions,
								schema.bV,
								A2($elm$core$List$append, errorsForIndirect, errorsForDirect));
							var dependenciesEntry = $jfmengels$elm_review$Review$Cache$ProjectFile$create(
								{d7: dependenciesHash, ca: errors, es: inputContextHash, dI: finalOutputContext});
							return _Utils_Tuple2(
								errors,
								raise(
									_Utils_update(
										cache,
										{
											e6: $elm$core$Maybe$Just(dependenciesEntry)
										})));
						}
					}));
		}
	});
var $jfmengels$elm_review$Review$Cache$ExtraFile$Entry = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Cache$ExtraFile$create = function (entry) {
	return {
		d7: entry.d7,
		ca: entry.ca,
		es: entry.es,
		dI: entry.dI,
		fS: $jfmengels$elm_review$Review$Cache$ContextHash$create(entry.dI)
	};
};
var $jfmengels$elm_review$Review$Cache$ExtraFile$errors = function (_v0) {
	var entry = _v0;
	return entry.ca;
};
var $jfmengels$elm_review$Review$Project$Valid$extraFilesHash = function (_v0) {
	var project = _v0;
	return project.cR;
};
var $jfmengels$elm_review$Review$Cache$ExtraFile$match = F3(
	function (contentHash, contexts, _v0) {
		var entry = _v0;
		return _Utils_eq(contentHash, entry.d7) && _Utils_eq(contexts, entry.es);
	});
var $jfmengels$elm_review$Review$Rule$createExtraFilesVisitor = F4(
	function (schema, hidden, raise, raiseCache) {
		var cache = hidden.gC;
		var _v0 = schema.L;
		if (_v0.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var visitor = _v0.a;
			return $elm$core$Maybe$Just(
				F2(
					function (project, data) {
						var contentHash = $jfmengels$elm_review$Review$Project$Valid$extraFilesHash(project);
						var _v1 = A3($jfmengels$elm_review$Review$Rule$findInitialInputContext, hidden.gC, 2, schema.aq);
						var baseInputContextHash = _v1.a;
						var inputContext = _v1.b;
						var inputContextHash = $jfmengels$elm_review$Review$Cache$ContextHash$toComparable(baseInputContextHash);
						var cachePredicate = function (extraFiles) {
							return A3($jfmengels$elm_review$Review$Cache$ExtraFile$match, contentHash, inputContextHash, extraFiles);
						};
						var _v2 = A3(
							$jfmengels$elm_review$Review$Rule$reuseProjectRuleCache,
							cachePredicate,
							function ($) {
								return $.ap;
							},
							hidden.gC);
						if (!_v2.$) {
							var entry = _v2.a;
							return _Utils_Tuple2(
								$jfmengels$elm_review$Review$Cache$ExtraFile$errors(entry),
								raise(hidden));
						} else {
							var _v3 = A2(visitor, data, inputContext);
							var errorsForVisitor = _v3.a;
							var outputContext = _v3.b;
							var errors = A3($jfmengels$elm_review$Review$Rule$filterExceptionsAndSetName, hidden.Q.w, schema.bV, errorsForVisitor);
							var entry = $jfmengels$elm_review$Review$Cache$ExtraFile$create(
								{d7: contentHash, ca: errors, es: inputContextHash, dI: outputContext});
							return _Utils_Tuple2(
								errors,
								raiseCache(
									_Utils_update(
										cache,
										{
											ap: $elm$core$Maybe$Just(entry)
										})));
						}
					}));
		}
	});
var $jfmengels$elm_review$Review$Rule$createFinalProjectEvaluationVisitor = F4(
	function (schema, _v0, raise, cache) {
		var exceptions = _v0.w;
		var _v1 = schema._;
		if (_v1.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var finalEvaluationFn = _v1.a;
			return $elm$core$Maybe$Just(
				function (_v2) {
					var inputContextHashes = A2($jfmengels$elm_review$Review$Rule$computeFinalContextHashes, schema, cache);
					var cachePredicate = function (entry) {
						return A2($jfmengels$elm_review$Review$Cache$EndAnalysis$match, inputContextHashes, entry);
					};
					var _v3 = A3(
						$jfmengels$elm_review$Review$Rule$reuseProjectRuleCache,
						cachePredicate,
						function ($) {
							return $.bE;
						},
						cache);
					if (!_v3.$) {
						var entry = _v3.a;
						return _Utils_Tuple2(
							$jfmengels$elm_review$Review$Cache$EndAnalysis$output(entry),
							raise(cache));
					} else {
						var errors = A3(
							$jfmengels$elm_review$Review$Rule$filterExceptionsAndSetName,
							exceptions,
							schema.bV,
							finalEvaluationFn(
								A2($jfmengels$elm_review$Review$Rule$computeFinalContext, schema, cache)));
						return _Utils_Tuple2(
							errors,
							raise(
								_Utils_update(
									cache,
									{
										bE: $elm$core$Maybe$Just(
											A2($jfmengels$elm_review$Review$Cache$EndAnalysis$create, inputContextHashes, errors))
									})));
					}
				});
		}
	});
var $jfmengels$elm_review$Review$Rule$applyContextCreator = F4(
	function (data, isFileIgnored, _v0, from) {
		var fn = _v0.a;
		return A3(fn, data, isFileIgnored, from);
	});
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (!maybeValue.$) {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review$Vendor$IntDict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			switch (dict.$) {
				case 0:
					return acc;
				case 1:
					var l = dict.a;
					return A3(f, l.cZ, l.c, acc);
				default:
					var i = dict.a;
					var $temp$f = f,
						$temp$acc = A3($jfmengels$elm_review$Vendor$IntDict$foldl, f, acc, i.g),
						$temp$dict = i.i;
					f = $temp$f;
					acc = $temp$acc;
					dict = $temp$dict;
					continue foldl;
			}
		}
	});
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Basics$neq = _Utils_notEqual;
var $elm$core$Bitwise$complement = _Bitwise_complement;
var $elm$core$Bitwise$or = _Bitwise_or;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $jfmengels$elm_review$Vendor$IntDict$highestBitSet = function (n) {
	var shiftOr = F2(
		function (i, shift) {
			return i | (i >>> shift);
		});
	var n1 = A2(shiftOr, n, 1);
	var n2 = A2(shiftOr, n1, 2);
	var n3 = A2(shiftOr, n2, 4);
	var n4 = A2(shiftOr, n3, 8);
	var n5 = A2(shiftOr, n4, 16);
	return n5 & (~(n5 >>> 1));
};
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $jfmengels$elm_review$Vendor$IntDict$signBit = $jfmengels$elm_review$Vendor$IntDict$highestBitSet(-1);
var $elm$core$Bitwise$xor = _Bitwise_xor;
var $jfmengels$elm_review$Vendor$IntDict$isBranchingBitSet = function (p) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$Bitwise$xor($jfmengels$elm_review$Vendor$IntDict$signBit),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Bitwise$and(p.b3),
			$elm$core$Basics$neq(0)));
};
var $jfmengels$elm_review$Vendor$IntDict$higherBitMask = function (branchingBit) {
	return branchingBit ^ (~(branchingBit - 1));
};
var $jfmengels$elm_review$Vendor$IntDict$prefixMatches = F2(
	function (p, n) {
		return _Utils_eq(
			n & $jfmengels$elm_review$Vendor$IntDict$higherBitMask(p.b3),
			p.aN);
	});
var $jfmengels$elm_review$Vendor$IntDict$get = F2(
	function (key, dict) {
		get:
		while (true) {
			switch (dict.$) {
				case 0:
					return $elm$core$Maybe$Nothing;
				case 1:
					var l = dict.a;
					return _Utils_eq(l.cZ, key) ? $elm$core$Maybe$Just(l.c) : $elm$core$Maybe$Nothing;
				default:
					var i = dict.a;
					if (!A2($jfmengels$elm_review$Vendor$IntDict$prefixMatches, i.l, key)) {
						return $elm$core$Maybe$Nothing;
					} else {
						if (A2($jfmengels$elm_review$Vendor$IntDict$isBranchingBitSet, i.l, key)) {
							var $temp$key = key,
								$temp$dict = i.i;
							key = $temp$key;
							dict = $temp$dict;
							continue get;
						} else {
							var $temp$key = key,
								$temp$dict = i.g;
							key = $temp$key;
							dict = $temp$dict;
							continue get;
						}
					}
			}
		}
	});
var $jfmengels$elm_review$Vendor$Graph$unGraph = function (graph) {
	var rep = graph;
	return rep;
};
var $jfmengels$elm_review$Vendor$Graph$get = function (nodeId) {
	return A2(
		$elm$core$Basics$composeR,
		$jfmengels$elm_review$Vendor$Graph$unGraph,
		$jfmengels$elm_review$Vendor$IntDict$get(nodeId));
};
var $jfmengels$elm_review$Review$Project$Valid$moduleGraph = function (_v0) {
	var project = _v0;
	return project.fI;
};
var $jfmengels$elm_review$Review$Rule$computeProjectContext = F5(
	function (traversalAndFolder, project, cache, incoming, initial) {
		if (!traversalAndFolder.$) {
			return initial;
		} else {
			var foldProjectContexts = traversalAndFolder.a.aY;
			var graph = $jfmengels$elm_review$Review$Project$Valid$moduleGraph(project);
			return A3(
				$jfmengels$elm_review$Vendor$IntDict$foldl,
				F3(
					function (key, _v1, accContext) {
						var _v2 = A2(
							$elm$core$Maybe$andThen,
							function (graphModule) {
								return A2($elm$core$Dict$get, graphModule.fP.c_, cache);
							},
							A2($jfmengels$elm_review$Vendor$Graph$get, key, graph));
						if (!_v2.$) {
							var importedModuleCache = _v2.a;
							return A2(
								foldProjectContexts,
								$jfmengels$elm_review$Review$Cache$Module$outputContext(importedModuleCache),
								accContext);
						} else {
							return accContext;
						}
					}),
				initial,
				incoming);
		}
	});
var $jfmengels$elm_review$Review$Rule$computeProjectContextHashes = F5(
	function (traversalAndFolder, project, cache, incoming, initial) {
		if (!traversalAndFolder.$) {
			return $jfmengels$elm_review$Review$Cache$ContextHash$toComparable(initial);
		} else {
			var graph = $jfmengels$elm_review$Review$Project$Valid$moduleGraph(project);
			return $jfmengels$elm_review$Review$Cache$ContextHash$toComparable(
				A3(
					$jfmengels$elm_review$Vendor$IntDict$foldl,
					F3(
						function (key, _v1, acc) {
							var _v2 = A2(
								$elm$core$Maybe$andThen,
								function (graphModule) {
									return A2($elm$core$Dict$get, graphModule.fP.c_, cache);
								},
								A2($jfmengels$elm_review$Vendor$Graph$get, key, graph));
							if (!_v2.$) {
								var importedModuleCache = _v2.a;
								return A2(
									$elm$core$List$cons,
									$jfmengels$elm_review$Review$Cache$Module$outputContextHash(importedModuleCache),
									acc);
							} else {
								return acc;
							}
						}),
					initial,
					incoming));
		}
	});
var $jfmengels$elm_review$Review$Cache$Module$Entry = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Cache$Module$create = function (entry) {
	return {
		d7: entry.d7,
		ca: entry.ca,
		du: entry.du,
		dw: entry.dw,
		dI: entry.dI,
		fS: $jfmengels$elm_review$Review$Cache$ContextHash$create(entry.dI)
	};
};
var $jfmengels$elm_review$Review$Rule$RuleModuleVisitor = $elm$core$Basics$identity;
var $jfmengels$elm_review$SimpleAssocList$mapKeyAndValue = F3(
	function (targetKey, fn, _v0) {
		var list = _v0;
		return A2(
			$elm$core$List$map,
			function (untouched) {
				var key = untouched.a;
				var value = untouched.b;
				return _Utils_eq(key, targetKey) ? fn(value) : untouched;
			},
			list);
	});
var $jfmengels$elm_review$Review$Error$Fixes$qualify = F2(
	function (filePath, _v0) {
		var dict = _v0;
		return A3(
			$jfmengels$elm_review$SimpleAssocList$mapKeyAndValue,
			$jfmengels$elm_review$Review$Error$FileTarget$Module(''),
			function (fixes) {
				return _Utils_Tuple2(
					$jfmengels$elm_review$Review$Error$FileTarget$Module(filePath),
					fixes);
			},
			dict);
	});
var $jfmengels$elm_review$Review$Error$FileTarget$setCurrentFilePathOnTargetIfNeeded = F2(
	function (path, target) {
		if ((!target.$) && (target.a === '')) {
			return $jfmengels$elm_review$Review$Error$FileTarget$Module(path);
		} else {
			return target;
		}
	});
var $jfmengels$elm_review$Review$Error$Target$setCurrentFilePathOnTargetIfNeeded = F2(
	function (path, target) {
		switch (target.$) {
			case 0:
				var fileTarget = target.a;
				return $jfmengels$elm_review$Review$Error$Target$FileTarget(
					A2($jfmengels$elm_review$Review$Error$FileTarget$setCurrentFilePathOnTargetIfNeeded, path, fileTarget));
			case 1:
				return target;
			default:
				return target;
		}
	});
var $jfmengels$elm_review$Review$Rule$qualifyError = F3(
	function (params, _v0, acc) {
		var err = _v0;
		var newError = (err.g_ === '') ? _Utils_update(
			err,
			{
				g_: params.g_,
				cT: A2($jfmengels$elm_review$Review$Error$Fixes$qualify, params.g_, err.cT),
				dX: A2($jfmengels$elm_review$Review$Error$Target$setCurrentFilePathOnTargetIfNeeded, params.g_, err.dX)
			}) : err;
		return A2($jfmengels$elm_review$Review$Exceptions$isFileWeWantReportsFor, params.w, newError.g_) ? A2(
			$elm$core$List$cons,
			A2($jfmengels$elm_review$Review$Rule$setRuleName, params.eH, newError),
			acc) : acc;
	});
var $jfmengels$elm_review$Review$Rule$qualifyErrors = F3(
	function (params, errors, acc) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (err, subAcc) {
					return A3($jfmengels$elm_review$Review$Rule$qualifyError, params, err, subAcc);
				}),
			acc,
			errors);
	});
var $jfmengels$elm_review$Review$Rule$createFinalModuleEvaluationVisitor = F4(
	function (params, raise, errorsAndContext, maybeVisitor) {
		if (maybeVisitor.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var visitor = maybeVisitor.a;
			return $elm$core$Maybe$Just(
				function (_v1) {
					var _v2 = errorsAndContext;
					var errors = _v2.a;
					var context = _v2.b;
					return raise(
						_Utils_Tuple2(
							A3(
								$jfmengels$elm_review$Review$Rule$qualifyErrors,
								params,
								visitor(context),
								errors),
							context));
				});
		}
	});
var $jfmengels$elm_review$Review$Rule$accumulate = F3(
	function (params, visitor, _v0) {
		var previousErrors = _v0.a;
		var previousContext = _v0.b;
		var _v1 = visitor(previousContext);
		var newErrors = _v1.a;
		var newContext = _v1.b;
		return _Utils_Tuple2(
			A3($jfmengels$elm_review$Review$Rule$qualifyErrors, params, newErrors, previousErrors),
			newContext);
	});
var $jfmengels$elm_review$Review$Rule$createImportsVisitor = F4(
	function (params, raise, errorsAndContext, maybeImportVisitors) {
		if (maybeImportVisitors.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var visitor = maybeImportVisitors.a;
			return $elm$core$Maybe$Just(
				function (imports) {
					return raise(
						A3(
							$elm$core$List$foldl,
							F2(
								function (import_, initialErrorsAndContext) {
									return A3(
										$jfmengels$elm_review$Review$Rule$accumulate,
										params,
										visitor(import_),
										initialErrorsAndContext);
								}),
							errorsAndContext,
							imports));
				});
		}
	});
var $jfmengels$elm_review$Review$Rule$createVisitor = F4(
	function (params, raise, errorsAndContext, maybeVisitor) {
		if (maybeVisitor.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var visitor = maybeVisitor.a;
			return $elm$core$Maybe$Just(
				function (node) {
					return raise(
						A3(
							$jfmengels$elm_review$Review$Rule$accumulate,
							params,
							visitor(node),
							errorsAndContext));
				});
		}
	});
var $jfmengels$elm_review$Review$Rule$createVisitor2 = F4(
	function (params, raise, errorsAndContext, maybeVisitor) {
		if (maybeVisitor.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var visitor = maybeVisitor.a;
			return $elm$core$Maybe$Just(
				F2(
					function (a, b) {
						return raise(
							A3(
								$jfmengels$elm_review$Review$Rule$accumulate,
								params,
								A2(visitor, a, b),
								errorsAndContext));
					}));
		}
	});
var $jfmengels$elm_review$Review$Rule$createRuleModuleVisitor = F4(
  function (schema, params, toRuleProjectVisitor, initialContext) {
    var raise = function (errorsAndContext) {
      function raise(_v0) {
        errorsAndContext.a = _v0.a;
        errorsAndContext.b = _v0.b;
      }
      return {
				az: A4($jfmengels$elm_review$Review$Rule$createVisitor2, params, raise, errorsAndContext, schema.az),
				aA: A4($jfmengels$elm_review$Review$Rule$createVisitor2, params, raise, errorsAndContext, schema.aA),
				d4: A4($jfmengels$elm_review$Review$Rule$createVisitor, params, raise, errorsAndContext, schema.bx),
				aB: A4($jfmengels$elm_review$Review$Rule$createVisitor, params, raise, errorsAndContext, schema.aB),
				an: A4($jfmengels$elm_review$Review$Rule$createVisitor, params, raise, errorsAndContext, schema.an),
				ao: A4($jfmengels$elm_review$Review$Rule$createVisitor, params, raise, errorsAndContext, schema.ao),
				cP: A4($jfmengels$elm_review$Review$Rule$createVisitor, params, raise, errorsAndContext, schema.aW),
				cQ: A4($jfmengels$elm_review$Review$Rule$createVisitor, params, raise, errorsAndContext, schema.aX),
				ej: A4($jfmengels$elm_review$Review$Rule$createFinalModuleEvaluationVisitor, params, raise, errorsAndContext, schema._),
				er: A4($jfmengels$elm_review$Review$Rule$createImportsVisitor, params, raise, errorsAndContext, schema.bK),
				aG: A4($jfmengels$elm_review$Review$Rule$createVisitor2, params, raise, errorsAndContext, schema.aG),
				aH: A4($jfmengels$elm_review$Review$Rule$createVisitor2, params, raise, errorsAndContext, schema.aH),
				aI: A4($jfmengels$elm_review$Review$Rule$createVisitor, params, raise, errorsAndContext, schema.aI),
				aJ: A4($jfmengels$elm_review$Review$Rule$createVisitor, params, raise, errorsAndContext, schema.aJ),
				eU: function (_v0) {
					return toRuleProjectVisitor(errorsAndContext);
				}
			};
		};
		return raise(
			_Utils_Tuple2(_List_Nil, initialContext));
	});
var $jfmengels$elm_review$Review$Cache$Module$ruleCaresAboutIgnoredFiles = function (_v0) {
	var ignoredFiles = _v0.dt;
	return ignoredFiles;
};
var $jfmengels$elm_review$Review$Cache$Module$match = F4(
	function (contentHash, inputContexts, _v0, _v1) {
		var entry = _v0;
		var isFileIgnored = _v1.dw;
		var requestedData = _v1.hG;
		return _Utils_eq(contentHash, entry.d7) && (_Utils_eq(inputContexts, entry.du) && ((!$jfmengels$elm_review$Review$Cache$Module$ruleCaresAboutIgnoredFiles(requestedData)) || _Utils_eq(isFileIgnored, entry.dw)));
	});
var $jfmengels$elm_review$Review$Rule$reuseCache = F2(
	function (predicate, maybeCacheEntry) {
		if (maybeCacheEntry.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var cacheEntry = maybeCacheEntry.a;
			return predicate(cacheEntry) ? maybeCacheEntry : $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review$Review$Rule$createModuleVisitorFromProjectVisitorHelp = F5(
	function (schema, raise, hidden, traversalAndFolder, _v0) {
		var moduleRuleSchema = _v0.a;
		var moduleContextCreator = _v0.b;
		return F4(
			function (project, filePath, moduleContentHash, incoming) {
				var maybeCacheEntry = A2($elm$core$Dict$get, filePath, hidden.gC.V);
				var isFileIgnored = !A2($jfmengels$elm_review$Review$Exceptions$isFileWeWantReportsFor, hidden.Q.w, filePath);
				var _v1 = A3($jfmengels$elm_review$Review$Rule$findInitialInputContext, hidden.gC, 4, schema.aq);
				var initialProjectContextHash = _v1.a;
				var initialProjectContext = _v1.b;
				var inputContextHashes = A5($jfmengels$elm_review$Review$Rule$computeProjectContextHashes, traversalAndFolder, project, hidden.gC.V, incoming, initialProjectContextHash);
				var shouldReuseCache = function (cacheEntry) {
					return A4(
						$jfmengels$elm_review$Review$Cache$Module$match,
						moduleContentHash,
						inputContextHashes,
						cacheEntry,
						{dw: isFileIgnored, hG: hidden.Q.hG});
				};
				var _v2 = A2($jfmengels$elm_review$Review$Rule$reuseCache, shouldReuseCache, maybeCacheEntry);
				if (!_v2.$) {
					return $elm$core$Maybe$Nothing;
				} else {
					var inputProjectContext = A5($jfmengels$elm_review$Review$Rule$computeProjectContext, traversalAndFolder, project, hidden.gC.V, incoming, initialProjectContext);
					return $elm$core$Maybe$Just(
						function (availableData) {
							var ruleData = {w: hidden.Q.w, g_: availableData.g_, eH: schema.bV};
							var toRuleProjectVisitor = function (_v5) {
								var errors = _v5.a;
								var resultModuleContext = _v5.b;
								var cache = hidden.gC;
								var _v3 = function () {
									var _v4 = $jfmengels$elm_review$Review$Rule$getFolderFromTraversal(traversalAndFolder);
									if (!_v4.$) {
										var fromModuleToProject = _v4.a.aZ;
										return A4($jfmengels$elm_review$Review$Rule$applyContextCreator, availableData, isFileIgnored, fromModuleToProject, resultModuleContext);
									} else {
										return _Utils_Tuple2(_List_Nil, schema.aq);
									}
								}();
								var fromModuleToProjectErrors = _v3.a;
								var outputProjectContext = _v3.b;
								var cacheEntry = $jfmengels$elm_review$Review$Cache$Module$create(
									{
										d7: moduleContentHash,
										ca: A3($jfmengels$elm_review$Review$Rule$qualifyErrors, ruleData, fromModuleToProjectErrors, errors),
										du: inputContextHashes,
										dw: isFileIgnored,
										dI: outputProjectContext
									});
								return raise(
									_Utils_update(
										cache,
										{
											V: A3($elm$core$Dict$insert, availableData.g_, cacheEntry, cache.V)
										}));
							};
							var initialContext = A4($jfmengels$elm_review$Review$Rule$applyContextCreator, availableData, isFileIgnored, moduleContextCreator, inputProjectContext);
							return A4($jfmengels$elm_review$Review$Rule$createRuleModuleVisitor, moduleRuleSchema, ruleData, toRuleProjectVisitor, initialContext);
						});
				}
			});
	});
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Review$Rule$ModuleKey = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Rule$ModuleRuleSchema = $elm$core$Basics$identity;
var $stil4m$elm_syntax$Elm$Syntax$Node$Node = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Module$NormalModule = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$ModuleNameLookupTable = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$empty = function (currentModuleName) {
	return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$ModuleNameLookupTable, currentModuleName, $elm$core$Dict$empty);
};
var $stil4m$elm_syntax$Elm$Syntax$Range$empty = {
	b9: {a6: 0, bp: 0},
	cB: {a6: 0, bp: 0}
};
var $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange = $stil4m$elm_syntax$Elm$Syntax$Range$empty;
var $jfmengels$elm_review$Review$Rule$removeExtensibleRecordFromModuleRuleSchema = function (_v0) {
	var param = _v0;
	return param;
};
var $jfmengels$elm_review$Review$Rule$mergeModuleVisitorsHelp = F4(
	function (ruleName_, initialProjectContext, moduleContextCreator, visitors) {
		var dummyAst = {
			gI: _List_Nil,
			e4: _List_Nil,
			g4: _List_Nil,
			hi: A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				$stil4m$elm_syntax$Elm$Syntax$Module$NormalModule(
					{
						ef: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(_List_Nil)),
						dE: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, _List_Nil)
					}))
		};
		var dummyAvailableData = {
			gv: dummyAst,
			dn: $elm$core$Basics$always('dummy'),
			g_: 'dummy file path',
			fy: true,
			c0: $elm$core$Maybe$Nothing,
			dD: 'dummy',
			dF: $jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$empty(_List_Nil)
		};
		var initialModuleContext = A4($jfmengels$elm_review$Review$Rule$applyContextCreator, dummyAvailableData, false, moduleContextCreator, initialProjectContext);
		var emptyModuleVisitor = {
			az: $elm$core$Maybe$Nothing,
			aA: $elm$core$Maybe$Nothing,
			bx: $elm$core$Maybe$Nothing,
			aB: $elm$core$Maybe$Nothing,
			an: $elm$core$Maybe$Nothing,
			ao: $elm$core$Maybe$Nothing,
			I: $elm$core$Maybe$Nothing,
			Z: $elm$core$Maybe$Nothing,
			J: $elm$core$Maybe$Nothing,
			aW: $elm$core$Maybe$Nothing,
			aX: $elm$core$Maybe$Nothing,
			x: $elm$core$Result$Ok(_List_Nil),
			L: $elm$core$Maybe$Nothing,
			_: $elm$core$Maybe$Nothing,
			bK: $elm$core$Maybe$Nothing,
			cY: $elm$core$Maybe$Just(initialModuleContext),
			aG: $elm$core$Maybe$Nothing,
			aH: $elm$core$Maybe$Nothing,
			ab: $jfmengels$elm_review$Review$Rule$initContextCreator(
				$elm$core$Basics$always(initialModuleContext)),
			aI: $elm$core$Maybe$Nothing,
			aJ: $elm$core$Maybe$Nothing,
			bV: ruleName_,
			p: false,
			N: $elm$core$Maybe$Nothing
		};
		return _Utils_Tuple2(
			$jfmengels$elm_review$Review$Rule$removeExtensibleRecordFromModuleRuleSchema(
				A3(
					$elm$core$List$foldl,
					F2(
						function (addVisitors, _v0) {
							var moduleVisitorSchema = _v0;
							return addVisitors(moduleVisitorSchema);
						}),
					emptyModuleVisitor,
					visitors)),
			moduleContextCreator);
	});
var $jfmengels$elm_review$Review$Rule$mergeModuleVisitors = F4(
	function (ruleName_, initialProjectContext, maybeModuleContextCreator, visitors) {
		if (maybeModuleContextCreator.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var moduleContextCreator = maybeModuleContextCreator.a;
			return $elm$core$List$isEmpty(visitors) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A4($jfmengels$elm_review$Review$Rule$mergeModuleVisitorsHelp, ruleName_, initialProjectContext, moduleContextCreator, visitors));
		}
	});
var $jfmengels$elm_review$Review$Rule$createModuleVisitorFromProjectVisitor = F3(
	function (schema, raise, hidden) {
		var _v0 = A4($jfmengels$elm_review$Review$Rule$mergeModuleVisitors, schema.bV, schema.aq, schema.ab, schema.bU);
		if (_v0.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var moduleRuleSchema = _v0.a;
			var traversalAndFolder = function () {
				var _v1 = _Utils_Tuple2(schema.bt, schema.aa);
				if (!_v1.a) {
					var _v2 = _v1.a;
					return $jfmengels$elm_review$Review$Rule$TraverseAllModulesInParallel(schema.aa);
				} else {
					if (!_v1.b.$) {
						var _v3 = _v1.a;
						var folder = _v1.b.a;
						return $jfmengels$elm_review$Review$Rule$TraverseImportedModulesFirst(folder);
					} else {
						var _v4 = _v1.a;
						var _v5 = _v1.b;
						return $jfmengels$elm_review$Review$Rule$TraverseAllModulesInParallel($elm$core$Maybe$Nothing);
					}
				}
			}();
			return $elm$core$Maybe$Just(
				A5($jfmengels$elm_review$Review$Rule$createModuleVisitorFromProjectVisitorHelp, schema, raise, hidden, traversalAndFolder, moduleRuleSchema));
		}
	});
var $jfmengels$elm_review$Review$Rule$createProjectVisitor = F8(
	function (schema, hidden, maybeVisitor, step, computeContentHash, cacheGetter, toRuleProjectVisitor, toRuleProjectVisitorWithoutChangingCache) {
		if (maybeVisitor.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var visitor = maybeVisitor.a;
			return $elm$core$Maybe$Just(
				F2(
					function (project, data) {
						var contentHash = computeContentHash(project);
						var _v1 = A3($jfmengels$elm_review$Review$Rule$findInitialInputContext, hidden.gC, step, schema.aq);
						var baseInputContextHash = _v1.a;
						var inputContext = _v1.b;
						var inputContextHash = $jfmengels$elm_review$Review$Cache$ContextHash$toComparable(baseInputContextHash);
						var cachePredicate = function (cacheData) {
							return A3($jfmengels$elm_review$Review$Cache$ProjectFile$match, contentHash, inputContextHash, cacheData);
						};
						var _v2 = A3($jfmengels$elm_review$Review$Rule$reuseProjectRuleCache, cachePredicate, cacheGetter, hidden.gC);
						if (!_v2.$) {
							var entry = _v2.a;
							return _Utils_Tuple2(
								$jfmengels$elm_review$Review$Cache$ProjectFile$errors(entry),
								toRuleProjectVisitorWithoutChangingCache(0));
						} else {
							var _v3 = A2(visitor, data, inputContext);
							var errorsForVisitor = _v3.a;
							var outputContext = _v3.b;
							var errors = A3($jfmengels$elm_review$Review$Rule$filterExceptionsAndSetName, hidden.Q.w, schema.bV, errorsForVisitor);
							return _Utils_Tuple2(
								errors,
								toRuleProjectVisitor(
									$jfmengels$elm_review$Review$Cache$ProjectFile$create(
										{d7: contentHash, ca: errors, es: inputContextHash, dI: outputContext})));
						}
					}));
		}
	});
var $jfmengels$elm_review$Review$Cache$Module$errors = function (_v0) {
	var entry = _v0;
	return entry.ca;
};
var $jfmengels$elm_review$Review$Cache$ExtraFile$errorsForMaybe = function (maybeEntry) {
	if (!maybeEntry.$) {
		var entry = maybeEntry.a;
		return entry.ca;
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review$Review$Cache$ProjectFile$errorsForMaybe = function (maybeEntry) {
	if (!maybeEntry.$) {
		var entry = maybeEntry.a;
		return entry.ca;
	} else {
		return _List_Nil;
	}
};
var $jfmengels$elm_review$Review$Rule$errorsFromCache = function (cache) {
	return $elm$core$List$concat(
		_List_fromArray(
			[
				A3(
				$elm$core$Dict$foldl,
				F3(
					function (_v0, cacheEntry, acc) {
						return A2(
							$elm$core$List$append,
							$jfmengels$elm_review$Review$Cache$Module$errors(cacheEntry),
							acc);
					}),
				_List_Nil,
				cache.V),
				$jfmengels$elm_review$Review$Cache$ProjectFile$errorsForMaybe(cache.ba),
				$jfmengels$elm_review$Review$Cache$ProjectFile$errorsForMaybe(cache.bX),
				$jfmengels$elm_review$Review$Cache$ExtraFile$errorsForMaybe(cache.ap),
				$jfmengels$elm_review$Review$Cache$ProjectFile$errorsForMaybe(cache.e6),
				A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Maybe$map, $jfmengels$elm_review$Review$Cache$EndAnalysis$output, cache.bE))
			]));
};
var $jfmengels$elm_review$Review$Rule$finalCacheMarker = F3(
  function (ruleName, ruleId, cacheEntry) {
    globalThis.saveResultToCache(ruleName, ruleId, cacheEntry);
    return cacheEntry;
  });
var $jfmengels$elm_review$Review$Rule$getErrorsForModule = F2(
	function (cache, filePath) {
		var _v0 = A2($elm$core$Dict$get, filePath, cache.V);
		if (!_v0.$) {
			var cacheEntry = _v0.a;
			return $jfmengels$elm_review$Review$Cache$Module$errors(cacheEntry);
		} else {
			return _List_Nil;
		}
	});
var $jfmengels$elm_review$Review$Project$Valid$readmeHash = function (_v0) {
	var project = _v0;
	return A2($elm$core$Maybe$map, $elm$core$Tuple$second, project.bX);
};
var $jfmengels$elm_review$Review$Project$Valid$doesModuleExist = F2(
	function (path, _v0) {
		var project = _v0;
		return A2($elm$core$Dict$member, path, project.ac);
	});
var $jfmengels$elm_review$Review$Rule$removeUnknownModulesFromInitialCache = F2(
	function (validProject, projectRuleCache) {
		return _Utils_update(
			projectRuleCache,
			{
				V: A2(
					$elm$core$Dict$filter,
					F2(
						function (path, _v0) {
							return A2($jfmengels$elm_review$Review$Project$Valid$doesModuleExist, path, validProject);
						}),
					projectRuleCache.V)
			});
	});
var $jfmengels$elm_review$Review$Cache$ExtraFile$setErrors = F2(
	function (newErrors, maybeEntry) {
		if (!maybeEntry.$) {
			var entry = maybeEntry.a;
			return $elm$core$Maybe$Just(
				_Utils_update(
					entry,
					{ca: newErrors}));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review$Review$Cache$Module$setErrors = F2(
	function (newErrors, _v0) {
		var entry = _v0;
		return _Utils_update(
			entry,
			{ca: newErrors});
	});
var $jfmengels$elm_review$Review$Cache$ProjectFile$setErrors = F2(
	function (newErrors, maybeEntry) {
		if (!maybeEntry.$) {
			var entry = maybeEntry.a;
			return $elm$core$Maybe$Just(
				_Utils_update(
					entry,
					{ca: newErrors}));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jfmengels$elm_review$Review$Cache$EndAnalysis$setOutput = F2(
	function (newOutput, maybeEntry) {
		if (!maybeEntry.$) {
			var entry = maybeEntry.a;
			return $elm$core$Maybe$Just(
				{du: entry.du, eD: newOutput});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === -1) && (dict.d.$ === -1)) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.e.d.$ === -1) && (!dict.e.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.d.d.$ === -1) && (!dict.d.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === -1) && (!left.a)) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === -1) && (right.a === 1)) {
					if (right.d.$ === -1) {
						if (right.d.a === 1) {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === -1) && (dict.d.$ === -1)) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor === 1) {
			if ((lLeft.$ === -1) && (!lLeft.a)) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === -1) {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === -2) {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === -1) && (left.a === 1)) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === -1) && (!lLeft.a)) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === -1) {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === -1) {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === -1) {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (!_v0.$) {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $jfmengels$elm_review$Review$Rule$createRuleProjectVisitor = F4(
	function (schema, initialProject, ruleData, initialCache) {
		var raise = function (hidden) {
			var cache = hidden.gC;
			var raiseCache = function (newCache) {
				return raise(
					{gC: newCache, Q: hidden.Q});
			};
			return {
				c8: function (_v0) {
					return {
						w: hidden.Q.w,
						dr: hidden.Q.c5,
						bV: schema.bV,
						p: schema.p,
						hG: hidden.Q.hG,
						as: $elm$core$Result$Ok(
							F2(
								function (newProject, newRuleData) {
									return A4($jfmengels$elm_review$Review$Rule$createRuleProjectVisitor, schema, newProject, newRuleData, cache);
								}))
					};
				},
				d8: A3($jfmengels$elm_review$Review$Rule$createModuleVisitorFromProjectVisitor, schema, raiseCache, hidden),
				ea: A3($jfmengels$elm_review$Review$Rule$createDataExtractVisitor, schema, raiseCache, cache),
				I: A5(
					$jfmengels$elm_review$Review$Rule$createDependenciesVisitor,
					schema,
					hidden.Q,
					raiseCache,
					cache,
					{eX: schema.I, fc: schema.Z}),
				J: A8(
					$jfmengels$elm_review$Review$Rule$createProjectVisitor,
					schema,
					hidden,
					schema.J,
					0,
					$jfmengels$elm_review$Review$Project$Valid$elmJsonHash,
					function ($) {
						return $.ba;
					},
					function (entry) {
						return raiseCache(
							_Utils_update(
								cache,
								{
									ba: $elm$core$Maybe$Just(entry)
								}));
					},
					function (_v1) {
						return raise(hidden);
					}),
				L: A4($jfmengels$elm_review$Review$Rule$createExtraFilesVisitor, schema, hidden, raise, raiseCache),
				ek: A4($jfmengels$elm_review$Review$Rule$createFinalProjectEvaluationVisitor, schema, hidden.Q, raiseCache, cache),
				dq: function (_v2) {
					return $jfmengels$elm_review$Review$Rule$errorsFromCache(
						A3($jfmengels$elm_review$Review$Rule$finalCacheMarker, schema.bV, hidden.Q.c5, cache));
				},
				eo: function (filePath) {
					return A2($jfmengels$elm_review$Review$Rule$getErrorsForModule, cache, filePath);
				},
				N: A8(
					$jfmengels$elm_review$Review$Rule$createProjectVisitor,
					schema,
					hidden,
					schema.N,
					1,
					$jfmengels$elm_review$Review$Project$Valid$readmeHash,
					function ($) {
						return $.bX;
					},
					function (entry) {
						return raiseCache(
							_Utils_update(
								cache,
								{
									bX: $elm$core$Maybe$Just(entry)
								}));
					},
					function (_v3) {
						return raise(hidden);
					}),
				hG: hidden.Q.hG,
				eJ: function (newErrors) {
					return raiseCache(
						_Utils_update(
							cache,
							{
								e6: A2($jfmengels$elm_review$Review$Cache$ProjectFile$setErrors, newErrors, cache.e6)
							}));
				},
				eK: function (newErrors) {
					return raiseCache(
						_Utils_update(
							cache,
							{
								ba: A2($jfmengels$elm_review$Review$Cache$ProjectFile$setErrors, newErrors, cache.ba)
							}));
				},
				eL: function (newErrors) {
					return raiseCache(
						_Utils_update(
							cache,
							{
								ap: A2($jfmengels$elm_review$Review$Cache$ExtraFile$setErrors, newErrors, cache.ap)
							}));
				},
				eM: function (newErrors) {
					return raiseCache(
						_Utils_update(
							cache,
							{
								bE: A2($jfmengels$elm_review$Review$Cache$EndAnalysis$setOutput, newErrors, cache.bE)
							}));
				},
				eN: F2(
					function (filePath, newErrors) {
						return raiseCache(
							_Utils_update(
								cache,
								{
									V: A3(
										$elm$core$Dict$update,
										filePath,
										$elm$core$Maybe$map(
											function (entry) {
												return A2($jfmengels$elm_review$Review$Cache$Module$setErrors, newErrors, entry);
											}),
										cache.V)
								}));
					}),
				eO: function (newErrors) {
					return raiseCache(
						_Utils_update(
							cache,
							{
								bX: A2($jfmengels$elm_review$Review$Cache$ProjectFile$setErrors, newErrors, cache.bX)
							}));
				}
			};
		};
		return raise(
			{
				gC: A2($jfmengels$elm_review$Review$Rule$removeUnknownModulesFromInitialCache, initialProject, initialCache),
				Q: ruleData
			});
	});
var $jfmengels$elm_review$Review$Rule$emptyCache = {e6: $elm$core$Maybe$Nothing, ba: $elm$core$Maybe$Nothing, ap: $elm$core$Maybe$Nothing, fj: $elm$core$Maybe$Nothing, bE: $elm$core$Maybe$Nothing, V: $elm$core$Dict$empty, bX: $elm$core$Maybe$Nothing};
var $jfmengels$elm_review$Review$Rule$initialCacheMarker = F3(
  function (ruleName, ruleId, defaultCache) {
    return globalThis.loadResultFromCache(ruleName, ruleId) || defaultCache;
  });
var $jfmengels$elm_review$Review$Rule$requestedDataFromContextCreator = function (_v0) {
	var requestedData = _v0.b;
	return requestedData;
};
var $jfmengels$elm_review$Review$RequestedData$withFiles = F2(
	function (files, untouched) {
		var requested = untouched;
		return $elm$core$List$isEmpty(files) ? untouched : _Utils_update(
			requested,
			{g$: files});
	});
var $jfmengels$elm_review$Review$Rule$fromProjectRuleSchema = function (_v0) {
	var schema = _v0;
	var _v1 = schema.x;
	if (!_v1.$) {
		var extraFileGlobs = _v1.a;
		return {
			w: $jfmengels$elm_review$Review$Exceptions$init,
			dr: 0,
			bV: schema.bV,
			p: schema.p,
			hG: A2(
				$jfmengels$elm_review$Review$RequestedData$withFiles,
				extraFileGlobs,
				A2(
					$jfmengels$elm_review$Review$RequestedData$combine,
					A2($elm$core$Maybe$map, $jfmengels$elm_review$Review$Rule$requestedDataFromContextCreator, schema.ab),
					A2(
						$elm$core$Maybe$map,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.aZ;
							},
							$jfmengels$elm_review$Review$Rule$requestedDataFromContextCreator),
						schema.aa))),
			as: $elm$core$Result$Ok(
				F2(
					function (project, ruleData) {
						return A4(
							$jfmengels$elm_review$Review$Rule$createRuleProjectVisitor,
							schema,
							project,
							ruleData,
							A3($jfmengels$elm_review$Review$Rule$initialCacheMarker, schema.bV, ruleData.c5, $jfmengels$elm_review$Review$Rule$emptyCache));
					}))
		};
	} else {
		var faultyGlobs = _v1.a;
		return A2(
			$jfmengels$elm_review$Review$Rule$configurationError,
			schema.bV,
			{
				dd: _List_fromArray(
					[
						'This rule requested additional files, but did so by specifying globs that I could not make sense of:',
						A2(
						$elm$core$String$join,
						'\n',
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (index, glob) {
									return '  ' + ($elm$core$String$fromInt(index + 1) + ('. ' + glob));
								}),
							faultyGlobs))
					]),
				a_: 'Invalid globs provided when requesting extra files'
			});
	}
};
var $jfmengels$elm_review_unused$NoUnused$Modules$fromProjectToModule = $jfmengels$elm_review$Review$Rule$initContextCreator(
	function (projectContext) {
		return {cG: false, bM: $elm$core$Set$empty, ad: projectContext.ad};
	});
var $elm$core$Set$singleton = function (key) {
	return A2($elm$core$Dict$singleton, key, 0);
};
var $jfmengels$elm_review_unused$NoUnused$Modules$initialProjectContext = {
	av: $elm$core$Dict$empty,
	ad: $jfmengels$elm_review_unused$NoUnused$Modules$Application(0),
	b0: $elm$core$Set$singleton(
		_List_fromArray(
			['ReviewConfig']))
};
var $jfmengels$elm_review_unused$NoUnused$Modules$isMainFunction = function (elmApplicationType) {
	if (!elmApplicationType) {
		return function (name) {
			return name === 'main';
		};
	} else {
		return function (name) {
			return (name === 'main') || (name === 'app');
		};
	}
};
var $jfmengels$elm_review_unused$NoUnused$Modules$declarationListVisitor = F2(
	function (list, context) {
		var _v0 = context.ad;
		if (!_v0.$) {
			return _Utils_Tuple2(_List_Nil, context);
		} else {
			var elmApplicationType = _v0.a;
			var isMain = $jfmengels$elm_review_unused$NoUnused$Modules$isMainFunction(elmApplicationType);
			var containsMainFunction = A2(
				$elm$core$List$any,
				function (declaration) {
					var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
					if (!_v1.$) {
						var _function = _v1.a;
						return isMain(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(
								$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.gM).bV));
					} else {
						return false;
					}
				},
				list);
			return _Utils_Tuple2(
				_List_Nil,
				_Utils_update(
					context,
					{cG: containsMainFunction}));
		}
	});
var $jfmengels$elm_review_unused$NoUnused$Modules$moduleNameForImport = function (node) {
	return $stil4m$elm_syntax$Elm$Syntax$Node$value(
		$stil4m$elm_syntax$Elm$Syntax$Node$value(node).dE);
};
var $jfmengels$elm_review_unused$NoUnused$Modules$importVisitor = F2(
	function (node, context) {
		return _Utils_Tuple2(
			_List_Nil,
			_Utils_update(
				context,
				{
					bM: A2(
						$elm$core$Set$insert,
						$jfmengels$elm_review_unused$NoUnused$Modules$moduleNameForImport(node),
						context.bM)
				}));
	});
var $jfmengels$elm_review$Review$Rule$combineVisitors = F2(
	function (newVisitor, maybePreviousVisitor) {
		if (maybePreviousVisitor.$ === 1) {
			return newVisitor;
		} else {
			var previousVisitor = maybePreviousVisitor.a;
			return F2(
				function (node, moduleContext) {
					var _v1 = A2(previousVisitor, node, moduleContext);
					var errorsAfterFirstVisit = _v1.a;
					var contextAfterFirstVisit = _v1.b;
					var _v2 = A2(newVisitor, node, contextAfterFirstVisit);
					var errorsAfterSecondVisit = _v2.a;
					var contextAfterSecondVisit = _v2.b;
					return _Utils_Tuple2(
						A2($elm$core$List$append, errorsAfterFirstVisit, errorsAfterSecondVisit),
						contextAfterSecondVisit);
				});
		}
	});
var $jfmengels$elm_review$Review$Rule$withDeclarationListVisitor = F2(
	function (visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				aB: $elm$core$Maybe$Just(
					A2($jfmengels$elm_review$Review$Rule$combineVisitors, visitor, schema.aB))
			});
	});
var $jfmengels$elm_review$Review$Rule$withImportVisitor = F2(
	function (visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				bK: $elm$core$Maybe$Just(
					A2($jfmengels$elm_review$Review$Rule$combineVisitors, visitor, schema.bK))
			});
	});
var $jfmengels$elm_review_unused$NoUnused$Modules$moduleVisitor = function (schema) {
	return A2(
		$jfmengels$elm_review$Review$Rule$withDeclarationListVisitor,
		$jfmengels$elm_review_unused$NoUnused$Modules$declarationListVisitor,
		A2($jfmengels$elm_review$Review$Rule$withImportVisitor, $jfmengels$elm_review_unused$NoUnused$Modules$importVisitor, schema));
};
var $jfmengels$elm_review$Review$Rule$AllModulesInParallel = 0;
var $jfmengels$elm_review$Review$Rule$ProjectRuleSchema = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Rule$newProjectRuleSchema = F2(
	function (name, initialProjectContext) {
		return {
			b6: $elm$core$Maybe$Nothing,
			I: $elm$core$Maybe$Nothing,
			Z: $elm$core$Maybe$Nothing,
			J: $elm$core$Maybe$Nothing,
			x: $elm$core$Result$Ok(_List_Nil),
			L: $elm$core$Maybe$Nothing,
			_: $elm$core$Maybe$Nothing,
			aa: $elm$core$Maybe$Nothing,
			aq: initialProjectContext,
			ab: $elm$core$Maybe$Nothing,
			bU: _List_Nil,
			bV: name,
			p: false,
			N: $elm$core$Maybe$Nothing,
			bt: 0
		};
	});
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $jfmengels$elm_review$Review$Rule$removeErrorPhantomTypes = function (list) {
	return A2(
		$elm$core$List$map,
		function (_v0) {
			var err = _v0;
			return err;
		},
		list);
};
var $jfmengels$elm_review$Review$Rule$removeErrorPhantomTypeFromVisitor = function (_function) {
	return F2(
		function (element, projectContext) {
			return A2(
				$elm$core$Tuple$mapFirst,
				$jfmengels$elm_review$Review$Rule$removeErrorPhantomTypes,
				A2(_function, element, projectContext));
		});
};
var $jfmengels$elm_review$Review$Rule$withElmJsonProjectVisitor = F2(
	function (visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				J: $elm$core$Maybe$Just(
					A2(
						$jfmengels$elm_review$Review$Rule$combineVisitors,
						$jfmengels$elm_review$Review$Rule$removeErrorPhantomTypeFromVisitor(visitor),
						schema.J))
			});
	});
var $jfmengels$elm_review$Review$Rule$withFinalProjectEvaluation = F2(
	function (visitor, _v0) {
		var schema = _v0;
		var combinedVisitor = function () {
			var _v1 = schema._;
			if (_v1.$ === 1) {
				return function (projectContext) {
					return $jfmengels$elm_review$Review$Rule$removeErrorPhantomTypes(
						visitor(projectContext));
				};
			} else {
				var previousVisitor = _v1.a;
				return function (projectContext) {
					return A2(
						$elm$core$List$append,
						$jfmengels$elm_review$Review$Rule$removeErrorPhantomTypes(
							visitor(projectContext)),
						previousVisitor(projectContext));
				};
			}
		}();
		return _Utils_update(
			schema,
			{
				_: $elm$core$Maybe$Just(combinedVisitor)
			});
	});
var $jfmengels$elm_review$Review$Rule$mapContextCreator = F2(
	function (mapper, _v0) {
		var fn = _v0.a;
		var requestedData = _v0.b;
		return A2(
			$jfmengels$elm_review$Review$Rule$ContextCreator,
			F3(
				function (availableData, bool, from) {
					return mapper(
						A3(fn, availableData, bool, from));
				}),
			requestedData);
	});
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $jfmengels$elm_review$Review$Rule$withModuleContextUsingContextCreator = F2(
	function (functions, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				aa: $elm$core$Maybe$Just(
					{
						aY: functions.aY,
						aZ: A2(
							$jfmengels$elm_review$Review$Rule$mapContextCreator,
							$elm$core$Tuple$pair(_List_Nil),
							functions.aZ)
					}),
				ab: $elm$core$Maybe$Just(functions.em)
			});
	});
var $jfmengels$elm_review$Review$Rule$removeExtensibleRecordTypeVariable = function (_function) {
	return A2($elm$core$Basics$composeR, _function, $jfmengels$elm_review$Review$Rule$removeExtensibleRecordFromModuleRuleSchema);
};
var $jfmengels$elm_review$Review$Rule$withModuleVisitor = F2(
	function (visitor, _v0) {
		var schema = _v0;
		return _Utils_update(
			schema,
			{
				bU: A2(
					$elm$core$List$cons,
					$jfmengels$elm_review$Review$Rule$removeExtensibleRecordTypeVariable(visitor),
					schema.bU)
			});
	});
var $jfmengels$elm_review_unused$NoUnused$Modules$rule = $jfmengels$elm_review$Review$Rule$fromProjectRuleSchema(
	A2(
		$jfmengels$elm_review$Review$Rule$withFinalProjectEvaluation,
		$jfmengels$elm_review_unused$NoUnused$Modules$finalEvaluationForProject,
		A2(
			$jfmengels$elm_review$Review$Rule$withElmJsonProjectVisitor,
			$jfmengels$elm_review_unused$NoUnused$Modules$elmJsonVisitor,
			A2(
				$jfmengels$elm_review$Review$Rule$withModuleContextUsingContextCreator,
				{aY: $jfmengels$elm_review_unused$NoUnused$Modules$foldProjectContexts, aZ: $jfmengels$elm_review_unused$NoUnused$Modules$fromModuleToProject, em: $jfmengels$elm_review_unused$NoUnused$Modules$fromProjectToModule},
				A2(
					$jfmengels$elm_review$Review$Rule$withModuleVisitor,
					$jfmengels$elm_review_unused$NoUnused$Modules$moduleVisitor,
					A2($jfmengels$elm_review$Review$Rule$newProjectRuleSchema, 'NoUnused.Modules', $jfmengels$elm_review_unused$NoUnused$Modules$initialProjectContext))))));
var $author$project$ReviewConfig$config = _List_fromArray(
	[$jfmengels$elm_review_unused$NoUnused$Modules$rule]);
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $author$project$Elm$Review$Reporter$WithDetails = 0;
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$json$Json$Decode$string = _Json_decodeString;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $author$project$Elm$Review$Main$decodeDetailsMode = A2(
	$elm$json$Json$Decode$andThen,
	function (detailsMode) {
		switch (detailsMode) {
			case 'with-details':
				return $elm$json$Json$Decode$succeed(0);
			case 'without-details':
				return $elm$json$Json$Decode$succeed(1);
			default:
				return $elm$json$Json$Decode$fail('I could not understand the following details mode: ' + detailsMode);
		}
	},
	$elm$json$Json$Decode$string);
var $author$project$Elm$Review$Main$Mode_Fix = function (a) {
	return {$: 1, a: a};
};
var $author$project$Elm$Review$Main$Mode_FixAll = function (a) {
	return {$: 2, a: a};
};
var $author$project$Elm$Review$Main$decodeFix = A2(
	$elm$json$Json$Decode$andThen,
	function (fixMode) {
		switch (fixMode) {
			case 'dontfix':
				return $elm$json$Json$Decode$succeed(
					$elm$core$Basics$always($author$project$Elm$Review$Main$Mode_DontFix));
			case 'fix':
				return $elm$json$Json$Decode$succeed($author$project$Elm$Review$Main$Mode_Fix);
			case 'fixAll':
				return $elm$json$Json$Decode$succeed($author$project$Elm$Review$Main$Mode_FixAll);
			default:
				return $elm$json$Json$Decode$fail('I could not understand the following fix mode: ' + fixMode);
		}
	},
	$elm$json$Json$Decode$string);
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $author$project$Elm$Review$Main$decodeFixLimit = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			function (n) {
				return $elm$core$Maybe$Just(
					A2($elm$core$Basics$max, 1, n));
			},
			$elm$json$Json$Decode$int),
			$elm$json$Json$Decode$null($elm$core$Maybe$Nothing)
		]));
var $author$project$Elm$Review$Main$Json = 1;
var $author$project$Elm$Review$Main$decodeReportMode = A2(
	$elm$json$Json$Decode$andThen,
	function (reportMode) {
		switch (reportMode) {
			case 'human':
				return $elm$json$Json$Decode$succeed(0);
			case 'json':
				return $elm$json$Json$Decode$succeed(1);
			default:
				return $elm$json$Json$Decode$fail('I could not understand the following report mode: ' + reportMode);
		}
	},
	$elm$json$Json$Decode$string);
var $elm$json$Json$Decode$list = _Json_decodeList;
var $author$project$Elm$Review$Main$decodeRulesFilter = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			A2($elm$core$Basics$composeR, $elm$core$Set$fromList, $elm$core$Maybe$Just),
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
			$elm$json$Json$Decode$null($elm$core$Maybe$Nothing)
		]));
var $author$project$Elm$Review$CliCommunication$Key = $elm$core$Basics$identity;
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $author$project$Elm$Review$CliCommunication$decoder = A2($elm$json$Json$Decode$map, $elm$core$Basics$identity, $elm$json$Json$Decode$value);
var $author$project$Elm$Review$UnsuppressMode$UnsuppressAll = {$: 0};
var $author$project$Elm$Review$UnsuppressMode$UnsuppressRules = function (a) {
	return {$: 1, a: a};
};
var $author$project$Elm$Review$UnsuppressMode$decoder = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			A2($elm$core$Basics$composeR, $elm$core$Set$fromList, $author$project$Elm$Review$UnsuppressMode$UnsuppressRules),
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
			A2(
			$elm$json$Json$Decode$map,
			function (bool) {
				return bool ? $author$project$Elm$Review$UnsuppressMode$UnsuppressAll : $author$project$Elm$Review$UnsuppressMode$UnsuppressNone;
			},
			$elm$json$Json$Decode$bool)
		]));
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $author$project$Elm$Review$Main$field = F3(
	function (key, valDecoder, decoder) {
		return A3(
			$elm$json$Json$Decode$map2,
			$elm$core$Basics$apR,
			A2($elm$json$Json$Decode$field, key, valDecoder),
			decoder);
	});
var $author$project$Elm$Review$FixExplanation$Detailed = 1;
var $author$project$Elm$Review$Main$toDecodedFlags = function (fixMode) {
	return function (fixLimit) {
		return function (fileRemovalFixesEnabled) {
			return function (explainFixFailure) {
				return function (enableExtract) {
					return function (unsuppressMode) {
						return function (detailsMode) {
							return function (reportMode) {
								return function (ignoreProblematicDependencies) {
									return function (rulesFilter) {
										return function (ignoredDirs) {
											return function (ignoredFiles) {
												return function (writeSuppressionFiles) {
													return function (logger) {
														return {
															ag: detailsMode,
															bA: enableExtract,
															aE: explainFixFailure ? 1 : 0,
															bd: fixLimit,
															aj: fixMode(fileRemovalFixesEnabled),
															be: ignoreProblematicDependencies,
															ds: ignoredDirs,
															dt: ignoredFiles,
															dA: logger,
															a1: reportMode,
															dP: rulesFilter,
															aS: unsuppressMode,
															b2: writeSuppressionFiles
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Elm$Review$Main$decodeFlags = A3(
	$author$project$Elm$Review$Main$field,
	'logger',
	$author$project$Elm$Review$CliCommunication$decoder,
	A3(
		$author$project$Elm$Review$Main$field,
		'writeSuppressionFiles',
		$elm$json$Json$Decode$bool,
		A3(
			$author$project$Elm$Review$Main$field,
			'ignoredFiles',
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
			A3(
				$author$project$Elm$Review$Main$field,
				'ignoredDirs',
				$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
				A3(
					$author$project$Elm$Review$Main$field,
					'rulesFilter',
					$author$project$Elm$Review$Main$decodeRulesFilter,
					A3(
						$author$project$Elm$Review$Main$field,
						'ignoreProblematicDependencies',
						$elm$json$Json$Decode$bool,
						A3(
							$author$project$Elm$Review$Main$field,
							'report',
							$author$project$Elm$Review$Main$decodeReportMode,
							A3(
								$author$project$Elm$Review$Main$field,
								'detailsMode',
								$author$project$Elm$Review$Main$decodeDetailsMode,
								A3(
									$author$project$Elm$Review$Main$field,
									'unsuppress',
									$author$project$Elm$Review$UnsuppressMode$decoder,
									A3(
										$author$project$Elm$Review$Main$field,
										'enableExtract',
										$elm$json$Json$Decode$bool,
										A3(
											$author$project$Elm$Review$Main$field,
											'explainFixFailure',
											$elm$json$Json$Decode$bool,
											A3(
												$author$project$Elm$Review$Main$field,
												'fileRemovalFixesEnabled',
												$elm$json$Json$Decode$bool,
												A3(
													$author$project$Elm$Review$Main$field,
													'fixLimit',
													$author$project$Elm$Review$Main$decodeFixLimit,
													A3(
														$author$project$Elm$Review$Main$field,
														'fixMode',
														$author$project$Elm$Review$Main$decodeFix,
														$elm$json$Json$Decode$succeed($author$project$Elm$Review$Main$toDecodedFlags)))))))))))))));
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $elm$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2($elm$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});
var $elm$core$Set$diff = F2(
	function (_v0, _v1) {
		var dict1 = _v0;
		var dict2 = _v1;
		return A2($elm$core$Dict$diff, dict1, dict2);
	});
var $elm$json$Json$Encode$bool = _Json_wrap;
var $author$project$Elm$Review$CliCommunication$dummy = $elm$json$Json$Encode$bool(true);
var $author$project$Elm$Review$RefusedErrorFixes$RefusedErrorFixes = $elm$core$Basics$identity;
var $author$project$Elm$Review$RefusedErrorFixes$empty = $elm$core$Set$empty;
var $author$project$Elm$Review$SuppressedErrors$SuppressedErrors = $elm$core$Basics$identity;
var $author$project$Elm$Review$SuppressedErrors$empty = $elm$core$Dict$empty;
var $author$project$Elm$Review$Reporter$ConfigurationError = {$: 2};
var $author$project$Elm$Review$Reporter$Source = $elm$core$Basics$identity;
var $elm$json$Json$Encode$int = _Json_wrap;
var $author$project$Elm$Review$Main$encodePosition = function (position) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'line',
				$elm$json$Json$Encode$int(position.bp)),
				_Utils_Tuple2(
				'column',
				$elm$json$Json$Encode$int(position.a6))
			]));
};
var $author$project$Elm$Review$Main$encodeRange = function (range) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'start',
				$author$project$Elm$Review$Main$encodePosition(range.cB)),
				_Utils_Tuple2(
				'end',
				$author$project$Elm$Review$Main$encodePosition(range.b9))
			]));
};
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (!_v0.$) {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(function (f, xs) {
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;
  for (; xs.b; xs = xs.b) {
    var m = f(xs.a);
    if (!m.$) {
      var next = _List_Cons(m.a, _List_Nil);
      end.b = next;
      end = next;
    }
  }
  return tmp.b;
});
var $author$project$Elm$Review$Main$encodeReportPart = function (_v0) {
	var str = _v0.hM;
	var color = _v0.gG;
	var href = _v0.g3;
	return (_Utils_eq(color, $elm$core$Maybe$Nothing) && _Utils_eq(href, $elm$core$Maybe$Nothing)) ? $elm$json$Json$Encode$string(str) : $elm$json$Json$Encode$object(
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					$elm$core$Maybe$Just(
					_Utils_Tuple2(
						'string',
						$elm$json$Json$Encode$string(str))),
					A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeR,
						$elm$json$Json$Encode$string,
						$elm$core$Tuple$pair('color')),
					color),
					A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeR,
						$elm$json$Json$Encode$string,
						$elm$core$Tuple$pair('href')),
					href)
				])));
};
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(0),
				entries));
	});
var $author$project$Elm$Review$Main$encodeReport = function (texts) {
	return A2($elm$json$Json$Encode$list, $author$project$Elm$Review$Main$encodeReportPart, texts);
};
var $elm$core$List$filter = F2(function (f, xs) {
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;
  for (; xs.b; xs = xs.b) {
    if (f(xs.a)) {
      var next = _List_Cons(xs.a, _List_Nil);
      end.b = next;
      end = next;
    }
  }
  return tmp.b;
});
var $author$project$Elm$Review$Text$Text = $elm$core$Basics$identity;
var $author$project$Elm$Review$Text$from = function (value) {
	return {gG: $elm$core$Maybe$Nothing, g3: $elm$core$Maybe$Nothing, hM: value};
};
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{M: nodeList, B: nodeListSize, F: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Basics$ge = _Utils_ge;
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (!_v0.$) {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $elm$core$String$length = _String_length;
var $elm$core$String$trimLeft = _String_trimLeft;
var $author$project$Elm$Review$Reporter$getIndexOfFirstNonSpace = function (string) {
	return $elm$core$String$length(string) - $elm$core$String$length(
		$elm$core$String$trimLeft(string));
};
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$List$intersperse = F2(function (sep, xs) {
  if (!xs.b) {
    return xs;
  }
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;

  end.b = _List_Cons(xs.a, _List_Nil);
  end = end.b;
  xs = xs.b;

  for (; xs.b; xs = xs.b) {
    var valNode = _List_Cons(xs.a, _List_Nil);
    var sepNode = _List_Cons(sep, valNode);
    end.b = sepNode;
    end = valNode;
  }

  return tmp.b;
});
var $author$project$Elm$Review$Text$join = F2(
	function (sep, chunks) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$intersperse,
				_List_fromArray(
					[
						$author$project$Elm$Review$Text$from(sep)
					]),
				chunks));
	});
var $author$project$Elm$Review$Reporter$lengthOfLineNumber = function (lineNumber) {
	return $elm$core$String$length(
		$elm$core$String$fromInt(lineNumber));
};
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)),
			string);
	});
var $author$project$Elm$Review$Reporter$lineNumberPrefixUnpadded = F2(
	function (maxLineNumberLength, rowIndex) {
		return A3(
			$elm$core$String$padLeft,
			maxLineNumberLength,
			' ',
			$elm$core$String$fromInt(rowIndex + 1)) + '|';
	});
var $author$project$Elm$Review$Reporter$lineNumberPrefix = F2(
	function (maxLineNumberLength, rowIndex) {
		return A2($author$project$Elm$Review$Reporter$lineNumberPrefixUnpadded, maxLineNumberLength, rowIndex) + ' ';
	});
var $elm$core$String$lines = _String_lines;
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $elm$core$String$trimRight = _String_trimRight;
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $elm$core$String$fromList = _String_fromList;
var $author$project$Elm$Review$Text$inRed = function (_v0) {
	var text = _v0;
	return _Utils_update(
		text,
		{
			gG: $elm$core$Maybe$Just('#FF0000')
		});
};
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(function(n, xs) {
  var tmp = _List_Cons(undefined, _List_Nil);
  var end = tmp;
  for (var i = 0; i < n && xs.b; xs = xs.b, i++) {
    var next = _List_Cons(xs.a, _List_Nil);
    end.b = next;
    end = next;
  }
  return tmp.b;
});
var $author$project$Elm$Review$Reporter$underline = F3(
	function (gutterLength, _v0, messageAfterCarets) {
		var start = _v0.cB;
		var end = _v0.b9;
		var lineContent = _v0.dz;
		var lineChars = $elm$core$String$toList(lineContent);
		var preText = A2($elm$core$List$take, (gutterLength + start) - 1, lineChars);
		var unicodePreOffset = $elm$core$String$length(
			$elm$core$String$fromList(preText)) - $elm$core$List$length(preText);
		var inText = A2(
			$elm$core$List$take,
			end - start,
			A2($elm$core$List$drop, (gutterLength + start) - 1, lineChars));
		var unicodeInOffset = $elm$core$String$length(
			$elm$core$String$fromList(inText)) - $elm$core$List$length(inText);
		var baseCarets = A2($elm$core$String$repeat, (unicodeInOffset + end) - start, '^');
		var caretLine = function () {
			if (!messageAfterCarets.$) {
				var message = messageAfterCarets.a;
				return baseCarets + (' ' + message);
			} else {
				return baseCarets;
			}
		}();
		return _List_fromArray(
			[
				$author$project$Elm$Review$Text$from(
				A2($elm$core$String$repeat, ((gutterLength + unicodePreOffset) + start) - 1, ' ')),
				$author$project$Elm$Review$Text$inRed(
				$author$project$Elm$Review$Text$from(caretLine))
			]);
	});
var $author$project$Elm$Review$Reporter$underlineWholeLine = F2(
	function (gutterLength, line) {
		var start = $author$project$Elm$Review$Reporter$getIndexOfFirstNonSpace(line);
		var end = $elm$core$String$length(line);
		return _List_fromArray(
			[
				$author$project$Elm$Review$Text$from(
				A2($elm$core$String$repeat, gutterLength + start, ' ')),
				$author$project$Elm$Review$Text$inRed(
				$author$project$Elm$Review$Text$from(
					A2($elm$core$String$repeat, end - start, '^')))
			]);
	});
var $author$project$Elm$Review$Reporter$codeExtract = F3(
	function (_v0, _v1, messageAfterCarets) {
		var source = _v0;
		var start = _v1.cB;
		var end = _v1.b9;
		var lines = $elm$core$Array$fromList(
			$elm$core$String$lines(source));
		var getRowAtLine = function (rowIndex) {
			var _v2 = A2($elm$core$Array$get, rowIndex, lines);
			if (!_v2.$) {
				var line = _v2.a;
				return $elm$core$String$trimRight(line);
			} else {
				return '';
			}
		};
		var maxLineNumber = $elm$core$String$isEmpty(
			getRowAtLine(end.bp + 1)) ? end.bp : (end.bp + 1);
		var maxLineNumberLength = $author$project$Elm$Review$Reporter$lengthOfLineNumber(maxLineNumber);
		var getRowWithLineNumber = function (rowIndex) {
			var line = getRowAtLine(rowIndex);
			return $elm$core$String$isEmpty(line) ? A2($author$project$Elm$Review$Reporter$lineNumberPrefixUnpadded, maxLineNumberLength, rowIndex) : _Utils_ap(
				A2($author$project$Elm$Review$Reporter$lineNumberPrefix, maxLineNumberLength, rowIndex),
				getRowAtLine(rowIndex));
		};
		var getRowWithLineNumberUnlessEmpty = function (rowIndex) {
			var line = getRowAtLine(rowIndex);
			return $elm$core$String$isEmpty(line) ? _List_Nil : _List_fromArray(
				[
					$author$project$Elm$Review$Text$from(
					_Utils_ap(
						A2($author$project$Elm$Review$Reporter$lineNumberPrefix, maxLineNumberLength, rowIndex),
						line))
				]);
		};
		var gutterLength = $elm$core$String$length(
			A2($author$project$Elm$Review$Reporter$lineNumberPrefix, maxLineNumberLength, maxLineNumber));
		if (_Utils_eq(start.bp, end.bp)) {
			if (_Utils_eq(start.a6, end.a6)) {
				return _List_Nil;
			} else {
				var lineContent = getRowWithLineNumber(start.bp - 1);
				return A2(
					$author$project$Elm$Review$Text$join,
					'\n',
					A2(
						$elm$core$List$filter,
						A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$List$isEmpty),
						_List_fromArray(
							[
								getRowWithLineNumberUnlessEmpty(start.bp - 2),
								_List_fromArray(
								[
									$author$project$Elm$Review$Text$from(lineContent)
								]),
								A3(
								$author$project$Elm$Review$Reporter$underline,
								gutterLength,
								{b9: end.a6, dz: lineContent, cB: start.a6},
								messageAfterCarets),
								getRowWithLineNumberUnlessEmpty(end.bp)
							])));
			}
		} else {
			var startLineNumber = start.bp - 1;
			var startLineContent = getRowAtLine(startLineNumber);
			var startLineContentWithLineNumber = _Utils_ap(
				A2($author$project$Elm$Review$Reporter$lineNumberPrefix, maxLineNumberLength, startLineNumber),
				startLineContent);
			var linesBetweenStartAndEnd = A2($elm$core$List$range, start.bp, end.bp - 2);
			var endLine = end.bp - 1;
			var endLineContent = getRowAtLine(endLine);
			var endLineContentWithLineNumber = _Utils_ap(
				A2($author$project$Elm$Review$Reporter$lineNumberPrefix, maxLineNumberLength, endLine),
				endLineContent);
			return A2(
				$author$project$Elm$Review$Text$join,
				'\n',
				A2(
					$elm$core$List$filter,
					A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$List$isEmpty),
					_List_fromArray(
						[
							getRowWithLineNumberUnlessEmpty(startLineNumber - 1),
							_List_fromArray(
							[
								$author$project$Elm$Review$Text$from(startLineContentWithLineNumber)
							]),
							A3(
							$author$project$Elm$Review$Reporter$underline,
							gutterLength,
							{
								b9: $elm$core$List$length(
									$elm$core$String$toList(startLineContent)) + 1,
								dz: startLineContentWithLineNumber,
								cB: start.a6
							},
							messageAfterCarets),
							A2(
							$author$project$Elm$Review$Text$join,
							'\n',
							A2(
								$elm$core$List$map,
								function (middleLine) {
									var line = getRowAtLine(middleLine);
									return $elm$core$String$isEmpty(line) ? _List_fromArray(
										[
											$author$project$Elm$Review$Text$from(
											getRowWithLineNumber(middleLine))
										]) : A2(
										$elm$core$List$cons,
										$author$project$Elm$Review$Text$from(
											getRowWithLineNumber(middleLine)),
										A2(
											$elm$core$List$cons,
											$author$project$Elm$Review$Text$from('\n'),
											A2($author$project$Elm$Review$Reporter$underlineWholeLine, gutterLength, line)));
								},
								linesBetweenStartAndEnd)),
							_List_fromArray(
							[
								$author$project$Elm$Review$Text$from(endLineContentWithLineNumber)
							]),
							A3(
							$author$project$Elm$Review$Reporter$underline,
							gutterLength,
							{
								b9: end.a6,
								dz: endLineContentWithLineNumber,
								cB: $author$project$Elm$Review$Reporter$getIndexOfFirstNonSpace(endLineContent) + 1
							},
							messageAfterCarets),
							getRowWithLineNumberUnlessEmpty(endLine + 1)
						])));
		}
	});
var $author$project$Elm$Review$Text$inBlue = function (_v0) {
	var text = _v0;
	return _Utils_update(
		text,
		{
			gG: $elm$core$Maybe$Just('#33BBC8')
		});
};
var $author$project$Elm$Review$Text$inYellow = function (_v0) {
	var text = _v0;
	return _Utils_update(
		text,
		{
			gG: $elm$core$Maybe$Just('#E8C338')
		});
};
var $author$project$Elm$Review$Reporter$addFixPrefix = F3(
	function (mode, error, previous) {
		if (mode.$ === 1) {
			var fileRemovalFixesEnabled = mode.a;
			var _v1 = error.fm;
			if (!_v1.$) {
				return A2(
					$elm$core$List$cons,
					$author$project$Elm$Review$Text$inYellow(
						$author$project$Elm$Review$Text$from('(FIX FAILED) ')),
					previous);
			} else {
				return ((!fileRemovalFixesEnabled) && error.fW) ? A2(
					$elm$core$List$cons,
					$author$project$Elm$Review$Text$inBlue(
						$author$project$Elm$Review$Text$from('(fix removes files) ')),
					previous) : previous;
			}
		} else {
			var _v2 = error.fm;
			if (!_v2.$) {
				return A2(
					$elm$core$List$cons,
					$author$project$Elm$Review$Text$inYellow(
						$author$project$Elm$Review$Text$from('(failing fix) ')),
					previous);
			} else {
				return error.fX ? (error.fW ? A2(
					$elm$core$List$cons,
					$author$project$Elm$Review$Text$inBlue(
						$author$project$Elm$Review$Text$from('(fix removes files) ')),
					previous) : A2(
					$elm$core$List$cons,
					$author$project$Elm$Review$Text$inBlue(
						$author$project$Elm$Review$Text$from('(fix) ')),
					previous)) : previous;
			}
		}
	});
var $author$project$Elm$Review$Text$inOrange = function (_v0) {
	var text = _v0;
	return _Utils_update(
		text,
		{
			gG: $elm$core$Maybe$Just('#FFA500')
		});
};
var $author$project$Elm$Review$Reporter$addSuppressedPrefix = F2(
	function (error, previous) {
		return error.gb ? A2(
			$elm$core$List$cons,
			$author$project$Elm$Review$Text$inOrange(
				$author$project$Elm$Review$Text$from('(unsuppressed) ')),
			previous) : previous;
	});
var $author$project$Elm$Review$Text$withLink = F2(
	function (maybeLink, _v0) {
		var text = _v0;
		return _Utils_update(
			text,
			{g3: maybeLink});
	});
var $author$project$Elm$Review$Reporter$formatErrorTitle = F2(
	function (mode, error) {
		return A2(
			$author$project$Elm$Review$Reporter$addSuppressedPrefix,
			error,
			A3(
				$author$project$Elm$Review$Reporter$addFixPrefix,
				mode,
				error,
				_List_fromArray(
					[
						A2(
						$author$project$Elm$Review$Text$withLink,
						error.f$,
						$author$project$Elm$Review$Text$inRed(
							$author$project$Elm$Review$Text$from(error.eH))),
						$author$project$Elm$Review$Text$from(': ' + error.a_)
					])));
	});
var $elm$parser$Parser$Problem = function (a) {
	return {$: 12, a: a};
};
var $author$project$Elm$Review$Reporter$problemToString = function (p) {
	switch (p.$) {
		case 0:
			var s = p.a;
			return 'Expecting \'' + (s + '\'');
		case 1:
			return 'Expecting int';
		case 2:
			return 'Expecting hex';
		case 3:
			return 'Expecting octal';
		case 4:
			return 'Expecting binary';
		case 5:
			return 'Expecting float';
		case 6:
			return 'Expecting number';
		case 7:
			return 'Expecting variable';
		case 8:
			var s = p.a;
			return 'Expecting symbol \'' + (s + '\'');
		case 9:
			var s = p.a;
			return 'Expecting keyword \'' + (s + '\'');
		case 10:
			return 'Expecting end';
		case 11:
			return 'Unexpected char';
		case 12:
			var s = p.a;
			return s;
		default:
			return 'Bad repeat';
	}
};
var $author$project$Elm$Review$Reporter$deadEndToString = function (deadend) {
	return $author$project$Elm$Review$Reporter$problemToString(deadend.eF) + (' at row ' + ($elm$core$String$fromInt(deadend.bp) + (', column ' + $elm$core$String$fromInt(deadend.da))));
};
var $author$project$Elm$Review$Reporter$deadEndsToString = function (deadEnds) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2($elm$core$List$map, $author$project$Elm$Review$Reporter$deadEndToString, deadEnds));
};
var $author$project$Elm$Review$Reporter$locationAsString = function (location) {
	return '{ row = ' + ($elm$core$String$fromInt(location.bp) + (', column = ' + ($elm$core$String$fromInt(location.a6) + ' }')));
};
var $author$project$Elm$Review$Reporter$rangeAsString = function (_v0) {
	var start = _v0.cB;
	var end = _v0.b9;
	return '{ start = ' + ($author$project$Elm$Review$Reporter$locationAsString(start) + (', end = ' + ($author$project$Elm$Review$Reporter$locationAsString(end) + ' }')));
};
var $elm$core$String$contains = _String_contains;
var $author$project$Elm$Review$Reporter$wrapInDoubleOrTripleQuotes = function (string) {
	return A2($elm$core$String$contains, '\"', string) ? ('\"\"\"' + (string + '\"\"\"')) : ('\"' + (string + '\"'));
};
var $author$project$Elm$Review$Reporter$editToFix = function (_v0) {
	var range = _v0.eG;
	var replacement = _v0.hF;
	return (replacement === '') ? ('Review.Fix.removeRange\n         ' + $author$project$Elm$Review$Reporter$rangeAsString(range)) : (_Utils_eq(range.cB, range.b9) ? ('Review.Fix.insertAt\n         ' + ($author$project$Elm$Review$Reporter$locationAsString(range.cB) + ('\n         ' + $author$project$Elm$Review$Reporter$wrapInDoubleOrTripleQuotes(replacement)))) : ('Review.Fix.replaceRangeBy\n         ' + ($author$project$Elm$Review$Reporter$rangeAsString(range) + ('\n         ' + $author$project$Elm$Review$Reporter$wrapInDoubleOrTripleQuotes(replacement)))));
};
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Elm$Review$Reporter$printCycle = function (moduleNames) {
	return A2(
		$author$project$Elm$Review$Text$join,
		'',
		_List_fromArray(
			[
				_List_fromArray(
				[
					$author$project$Elm$Review$Text$from('    ┌─────┐\n    │    ')
				]),
				A2(
				$elm$core$List$intersperse,
				$author$project$Elm$Review$Text$from('\n    │     ↓\n    │    '),
				A2(
					$elm$core$List$map,
					function (moduleName) {
						return $author$project$Elm$Review$Text$inYellow(
							$author$project$Elm$Review$Text$from(moduleName));
					},
					moduleNames)),
				_List_fromArray(
				[
					$author$project$Elm$Review$Text$from('\n    └─────┘')
				])
			]));
};
var $jfmengels$elm_review$Review$Fix$toRecord = function (fix_) {
	switch (fix_.$) {
		case 1:
			var range = fix_.a;
			var replacement = fix_.b;
			return {eG: range, hF: replacement};
		case 0:
			var range = fix_.a;
			return {eG: range, hF: ''};
		default:
			var position = fix_.a;
			var replacement = fix_.b;
			return {
				eG: {b9: position, cB: position},
				hF: replacement
			};
	}
};
var $author$project$Elm$Review$Reporter$wrapIn = F3(
	function (start, end, string) {
		return start + (string + (end + ''));
	});
var $author$project$Elm$Review$Reporter$detailedReasonFromProblem = function (problem) {
	switch (problem.$) {
		case 0:
			var filePath = problem.a.g_;
			var edits = problem.a.de;
			return _List_fromArray(
				[
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('I failed to apply the automatic fix because it resulted in the same source code.\n\nAfter applying the fixes, ' + filePath)),
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('\n\nHere are the individual edits for the file:')),
					$author$project$Elm$Review$Text$from('\n\n    '),
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from(
						A3(
							$author$project$Elm$Review$Reporter$wrapIn,
							'[ ',
							'\n    ]',
							A2(
								$elm$core$String$join,
								'\n    , ',
								A2(
									$elm$core$List$map,
									A2($elm$core$Basics$composeR, $jfmengels$elm_review$Review$Fix$toRecord, $author$project$Elm$Review$Reporter$editToFix),
									edits)))))
				]);
		case 1:
			var invalid = problem.a;
			var firstParsingError = A2(
				$elm$core$Maybe$withDefault,
				{
					da: 1,
					eF: $elm$parser$Parser$Problem('Parsing error'),
					bp: 1
				},
				$elm$core$List$head(invalid.fT));
			return $elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						[
							$author$project$Elm$Review$Text$inYellow(
							$author$project$Elm$Review$Text$from('I failed to apply the automatic fix because it resulted in ')),
							$author$project$Elm$Review$Text$inRed(
							$author$project$Elm$Review$Text$from(invalid.g_)),
							$author$project$Elm$Review$Text$inYellow(
							$author$project$Elm$Review$Text$from(' being invalid Elm code:')),
							$author$project$Elm$Review$Text$from('\n\n'),
							$author$project$Elm$Review$Text$inYellow(
							$author$project$Elm$Review$Text$from(
								$author$project$Elm$Review$Reporter$deadEndsToString(invalid.fT))),
							$author$project$Elm$Review$Text$from('\n\n')
						]),
						A3(
						$author$project$Elm$Review$Reporter$codeExtract,
						invalid.hK,
						{
							b9: {a6: firstParsingError.da + 1, bp: firstParsingError.bp},
							cB: {a6: firstParsingError.da, bp: firstParsingError.bp}
						},
						$elm$core$Maybe$Just(
							$author$project$Elm$Review$Reporter$problemToString(firstParsingError.eF))),
						_List_fromArray(
						[
							$author$project$Elm$Review$Text$from('\n\n'),
							$author$project$Elm$Review$Text$inYellow(
							$author$project$Elm$Review$Text$from('Here are the individual edits for the file:')),
							$author$project$Elm$Review$Text$from('\n\n    '),
							$author$project$Elm$Review$Text$inYellow(
							$author$project$Elm$Review$Text$from(
								A3(
									$author$project$Elm$Review$Reporter$wrapIn,
									'[ ',
									'\n    ]',
									A2(
										$elm$core$String$join,
										'\n    , ',
										A2(
											$elm$core$List$map,
											A2($elm$core$Basics$composeR, $jfmengels$elm_review$Review$Fix$toRecord, $author$project$Elm$Review$Reporter$editToFix),
											invalid.de)))))
						])
					]));
		case 2:
			var filePath = problem.a.g_;
			var source = problem.a.hK;
			var edits = problem.a.de;
			var decodingError = problem.a.gO;
			return _List_fromArray(
				[
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('I failed to apply the automatic fix because it resulted in ')),
					$author$project$Elm$Review$Text$inRed(
					$author$project$Elm$Review$Text$from(filePath)),
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from(' being invalid Elm code:')),
					$author$project$Elm$Review$Text$from('\n\n'),
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from(
						'    ' + $elm$json$Json$Decode$errorToString(decodingError))),
					$author$project$Elm$Review$Text$from('\n\n'),
					$author$project$Elm$Review$Text$from(source),
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('\n\nHere are the individual edits for the file:')),
					$author$project$Elm$Review$Text$from('\n\n    '),
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from(
						A3(
							$author$project$Elm$Review$Reporter$wrapIn,
							'[ ',
							'\n    ]',
							A2(
								$elm$core$String$join,
								'\n    , ',
								A2(
									$elm$core$List$map,
									A2($elm$core$Basics$composeR, $jfmengels$elm_review$Review$Fix$toRecord, $author$project$Elm$Review$Reporter$editToFix),
									edits)))))
				]);
		case 4:
			var filePath = problem.a.g_;
			var edits = problem.a.de;
			return _List_fromArray(
				[
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from(
						'I failed to apply the automatic fix because some edits for ' + (filePath + (' collide:\n\n    ' + A2(
							$elm$core$String$join,
							'\n\n    ',
							A2(
								$elm$core$List$map,
								A2($elm$core$Basics$composeR, $jfmengels$elm_review$Review$Fix$toRecord, $author$project$Elm$Review$Reporter$editToFix),
								edits))))))
				]);
		case 3:
			var filePath = problem.a.g_;
			var edit = problem.a.gR;
			return _List_fromArray(
				[
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from(
						'I failed to apply the automatic fix because I have found an edit for ' + (filePath + (' where the start is positioned after the end:\n\n  ' + $author$project$Elm$Review$Reporter$editToFix(
							$jfmengels$elm_review$Review$Fix$toRecord(edit))))))
				]);
		case 5:
			var cycle = problem.a;
			return A2(
				$elm$core$List$cons,
				$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('I failed to apply the automatic fix because it resulted in an import cycle.')),
				A2(
					$elm$core$List$cons,
					$author$project$Elm$Review$Text$from('\n\n'),
					$author$project$Elm$Review$Reporter$printCycle(cycle)));
		case 6:
			var filePath = problem.a;
			return _List_fromArray(
				[
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('I failed to apply the automatic fix because it attempted to remove ' + (filePath + ' which is unknown to me.\nThis should not be possible in theory, so please open an issue so this can be fixed.')))
				]);
		default:
			var problemDescription = problem.a;
			return _List_fromArray(
				[
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('I failed to apply the automatic fix.\n\n' + problemDescription))
				]);
	}
};
var $author$project$Elm$Review$Reporter$succinctReasonFromProblem = function (problem) {
	switch (problem.$) {
		case 0:
			var filePath = problem.a.g_;
			return _List_fromArray(
				[
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('I failed to apply the automatic fix because it resulted in the same source code for ')),
					$author$project$Elm$Review$Text$inRed(
					$author$project$Elm$Review$Text$from(filePath)),
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('.'))
				]);
		case 1:
			var filePath = problem.a.g_;
			return _List_fromArray(
				[
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('I failed to apply the automatic fix because it resulted in invalid Elm code for ')),
					$author$project$Elm$Review$Text$inRed(
					$author$project$Elm$Review$Text$from(filePath)),
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('.'))
				]);
		case 2:
			var filePath = problem.a.g_;
			return _List_fromArray(
				[
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('I failed to apply the automatic fix because it resulted in invalid JSON for ')),
					$author$project$Elm$Review$Text$inRed(
					$author$project$Elm$Review$Text$from(filePath)),
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('.'))
				]);
		case 4:
			return _List_fromArray(
				[
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('I failed to apply the automatic fix because it contained edits with collisions.'))
				]);
		case 3:
			return _List_fromArray(
				[
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('I failed to apply the automatic fix because it contained edits with negative ranges.'))
				]);
		case 5:
			return _List_fromArray(
				[
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('I failed to apply the automatic fix because it resulted in an import cycle.'))
				]);
		case 6:
			var filePath = problem.a;
			return _List_fromArray(
				[
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('I failed to apply the automatic fix because it attempted to remove ' + (filePath + ' which is unknown to me.\nThis should not be possible in theory, so please open an issue so this can be fixed.')))
				]);
		default:
			var problemDescription = problem.a;
			return _List_fromArray(
				[
					$author$project$Elm$Review$Text$inYellow(
					$author$project$Elm$Review$Text$from('I failed to apply the automatic fix.\n\n' + problemDescription))
				]);
	}
};
var $author$project$Elm$Review$Reporter$reasonFromProblem = F2(
	function (fixExplanation, problem) {
		if (!fixExplanation) {
			return $author$project$Elm$Review$Reporter$succinctReasonFromProblem(problem);
		} else {
			return $author$project$Elm$Review$Reporter$detailedReasonFromProblem(problem);
		}
	});
var $author$project$Elm$Review$Reporter$formatErrorWithExtract = F5(
	function (detailsMode, fixExplanation, mode, source, error) {
		var fixFailMessage = function () {
			if (mode.$ === 1) {
				var _v3 = error.fm;
				if (!_v3.$) {
					var problem = _v3.a;
					return A2(
						$elm$core$List$cons,
						$author$project$Elm$Review$Text$from('\n\n'),
						A2($author$project$Elm$Review$Reporter$reasonFromProblem, fixExplanation, problem));
				} else {
					return _List_Nil;
				}
			} else {
				return _List_Nil;
			}
		}();
		var details = function () {
			if (!detailsMode) {
				return A2(
					$elm$core$List$cons,
					$author$project$Elm$Review$Text$from('\n\n'),
					A2(
						$elm$core$List$intersperse,
						$author$project$Elm$Review$Text$from('\n\n'),
						A2($elm$core$List$map, $author$project$Elm$Review$Text$from, error.dd)));
			} else {
				return _List_Nil;
			}
		}();
		var codeExtract_ = function () {
			var _v0 = A3($author$project$Elm$Review$Reporter$codeExtract, source, error.eG, $elm$core$Maybe$Nothing);
			if (!_v0.b) {
				return _List_Nil;
			} else {
				var sourceCodeExtract = _v0;
				return A2(
					$elm$core$List$cons,
					$author$project$Elm$Review$Text$from('\n\n'),
					sourceCodeExtract);
			}
		}();
		return $elm$core$List$concat(
			_List_fromArray(
				[
					A2($author$project$Elm$Review$Reporter$formatErrorTitle, mode, error),
					codeExtract_,
					details,
					fixFailMessage
				]));
	});
var $author$project$Elm$Review$Text$simplifyHelp = F3(
	function (previousTexts, lastText, chunks) {
		simplifyHelp:
		while (true) {
			if (!chunks.b) {
				return A2($elm$core$List$cons, lastText, previousTexts);
			} else {
				var newLastText = chunks.a;
				var restOfChunks = chunks.b;
				if (_Utils_eq(lastText.gG, newLastText.gG) && _Utils_eq(lastText.g3, newLastText.g3)) {
					var $temp$previousTexts = previousTexts,
						$temp$lastText = {
						gG: lastText.gG,
						g3: lastText.g3,
						hM: _Utils_ap(lastText.hM, newLastText.hM)
					},
						$temp$chunks = restOfChunks;
					previousTexts = $temp$previousTexts;
					lastText = $temp$lastText;
					chunks = $temp$chunks;
					continue simplifyHelp;
				} else {
					var $temp$previousTexts = A2($elm$core$List$cons, lastText, previousTexts),
						$temp$lastText = newLastText,
						$temp$chunks = restOfChunks;
					previousTexts = $temp$previousTexts;
					lastText = $temp$lastText;
					chunks = $temp$chunks;
					continue simplifyHelp;
				}
			}
		}
	});
var $author$project$Elm$Review$Text$simplify = function (chunks) {
	if (!chunks.b) {
		return _List_Nil;
	} else {
		var chunk = chunks.a;
		var restOfChunks = chunks.b;
		return $elm$core$List$reverse(
			A3($author$project$Elm$Review$Text$simplifyHelp, _List_Nil, chunk, restOfChunks));
	}
};
var $author$project$Elm$Review$Text$toRecord = function (_v0) {
	var text = _v0;
	return text;
};
var $author$project$Elm$Review$Reporter$formatIndividualError = F4(
	function (detailsMode, fixExplanation, source, error) {
		return A2(
			$elm$core$List$map,
			$author$project$Elm$Review$Text$toRecord,
			$author$project$Elm$Review$Text$simplify(
				A5($author$project$Elm$Review$Reporter$formatErrorWithExtract, detailsMode, fixExplanation, $author$project$Elm$Review$Reporter$Reviewing, source, error)));
	});
var $author$project$Elm$Review$Main$encodeConfigurationError = F2(
	function (detailsMode, error) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'rule',
					$elm$json$Json$Encode$string(error.eH)),
					_Utils_Tuple2(
					'message',
					$elm$json$Json$Encode$string(error.a_)),
					_Utils_Tuple2(
					'details',
					A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, error.dd)),
					_Utils_Tuple2(
					'region',
					$author$project$Elm$Review$Main$encodeRange($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange)),
					_Utils_Tuple2(
					'formatted',
					$author$project$Elm$Review$Main$encodeReport(
						A4($author$project$Elm$Review$Reporter$formatIndividualError, detailsMode, 0, '', error)))
				]));
	});
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $author$project$Elm$Review$Main$encodeFilePath = function (filePath) {
	switch (filePath.$) {
		case 0:
			var path = filePath.a;
			return $elm$json$Json$Encode$string(path);
		case 1:
			return $elm$json$Json$Encode$null;
		default:
			return $elm$json$Json$Encode$null;
	}
};
var $author$project$Elm$Review$Main$encodeConfigurationErrors = F2(
	function (detailsMode, errors) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'path',
					$author$project$Elm$Review$Main$encodeFilePath($author$project$Elm$Review$Reporter$ConfigurationError)),
					_Utils_Tuple2(
					'errors',
					A2(
						$elm$json$Json$Encode$list,
						$author$project$Elm$Review$Main$encodeConfigurationError(detailsMode),
						errors))
				]));
	});
var $author$project$Elm$Review$Reporter$filePathToString = function (path_) {
	switch (path_.$) {
		case 0:
			var str = path_.a;
			return str;
		case 1:
			return '';
		default:
			return '';
	}
};
var $author$project$Elm$Review$Reporter$fileSeparator = F2(
	function (pathAbove, pathBelow) {
		return _List_fromArray(
			[
				$author$project$Elm$Review$Text$from(
				'\n\n' + A2(
					$elm$core$String$repeat,
					73 - $elm$core$String$length(
						$author$project$Elm$Review$Reporter$filePathToString(pathAbove)),
					' ')),
				$author$project$Elm$Review$Text$inRed(
				$author$project$Elm$Review$Text$from(
					($author$project$Elm$Review$Reporter$filePathToString(pathAbove) + '  ↑') + ('\n====o======================================================================o====' + ('\n    ↓  ' + $author$project$Elm$Review$Reporter$filePathToString(pathBelow))))),
				$author$project$Elm$Review$Text$from('\n\n\n')
			]);
	});
var $author$project$Elm$Review$Reporter$compareRange = F2(
	function (a, b) {
		return (_Utils_cmp(a.cB.bp, b.cB.bp) < 0) ? 0 : ((_Utils_cmp(a.cB.bp, b.cB.bp) > 0) ? 2 : ((_Utils_cmp(a.cB.a6, b.cB.a6) < 0) ? 0 : ((_Utils_cmp(a.cB.a6, b.cB.a6) > 0) ? 2 : ((_Utils_cmp(a.b9.bp, b.b9.bp) < 0) ? 0 : ((_Utils_cmp(a.b9.bp, b.b9.bp) > 0) ? 2 : ((_Utils_cmp(a.b9.a6, b.b9.a6) < 0) ? 0 : ((_Utils_cmp(a.b9.a6, b.b9.a6) > 0) ? 2 : 1)))))));
	});
var $author$project$Elm$Review$Reporter$compareErrorPositions = F2(
	function (a, b) {
		return A2($author$project$Elm$Review$Reporter$compareRange, a.eG, b.eG);
	});
var $author$project$Elm$Review$Reporter$firstErrorPrefix = '-- ELM-REVIEW ERROR -';
var $author$project$Elm$Review$Reporter$header = F3(
	function (isFirstError, filePath, range) {
		var position = function () {
			switch (filePath.$) {
				case 0:
					var str = filePath.a;
					return ' ' + (str + (':' + ($elm$core$String$fromInt(range.cB.bp) + (':' + $elm$core$String$fromInt(range.cB.a6)))));
				case 1:
					return ' GLOBAL ERROR';
				default:
					return ' CONFIGURATION ERROR';
			}
		}();
		return isFirstError ? $author$project$Elm$Review$Text$inBlue(
			$author$project$Elm$Review$Text$from(
				_Utils_ap(
					$author$project$Elm$Review$Reporter$firstErrorPrefix,
					A3(
						$elm$core$String$padLeft,
						80 - $elm$core$String$length($author$project$Elm$Review$Reporter$firstErrorPrefix),
						'-',
						position)))) : $author$project$Elm$Review$Text$from(
			'────' + A3($elm$core$String$padLeft, 76, '─', position));
	});
var $elm$core$List$sortWith = _List_sortWith;
var $author$project$Elm$Review$Reporter$formatReportForFileWithExtract = F4(
	function (detailsMode, fixExplanation, mode, file) {
		return A2(
			$author$project$Elm$Review$Text$join,
			'\n\n',
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (index, error) {
						return A2(
							$author$project$Elm$Review$Text$join,
							'\n\n',
							_List_fromArray(
								[
									_List_fromArray(
									[
										A3($author$project$Elm$Review$Reporter$header, !index, file.hw, error.eG)
									]),
									A5($author$project$Elm$Review$Reporter$formatErrorWithExtract, detailsMode, fixExplanation, mode, file.hK, error)
								]));
					}),
				A2($elm$core$List$sortWith, $author$project$Elm$Review$Reporter$compareErrorPositions, file.ca)));
	});
var $author$project$Elm$Review$Reporter$reverseThenConcat = function (reverseLists) {
	return A3($elm$core$List$foldl, $elm$core$Basics$append, _List_Nil, reverseLists);
};
var $author$project$Elm$Review$Reporter$formatReportsEndingWith = F5(
	function (soFarReverse, detailsMode, fixExplanation, mode, files) {
		formatReportsEndingWith:
		while (true) {
			if (!files.b) {
				return $author$project$Elm$Review$Reporter$reverseThenConcat(soFarReverse);
			} else {
				if (!files.b.b) {
					var firstFile = files.a;
					return $author$project$Elm$Review$Reporter$reverseThenConcat(
						A2(
							$elm$core$List$cons,
							A4($author$project$Elm$Review$Reporter$formatReportForFileWithExtract, detailsMode, fixExplanation, mode, firstFile),
							soFarReverse));
				} else {
					var firstFile = files.a;
					var _v1 = files.b;
					var secondFile = _v1.a;
					var restOfFiles = _v1.b;
					var $temp$soFarReverse = A2(
						$elm$core$List$cons,
						A2($author$project$Elm$Review$Reporter$fileSeparator, firstFile.hw, secondFile.hw),
						A2(
							$elm$core$List$cons,
							A4($author$project$Elm$Review$Reporter$formatReportForFileWithExtract, detailsMode, fixExplanation, mode, firstFile),
							soFarReverse)),
						$temp$detailsMode = detailsMode,
						$temp$fixExplanation = fixExplanation,
						$temp$mode = mode,
						$temp$files = A2($elm$core$List$cons, secondFile, restOfFiles);
					soFarReverse = $temp$soFarReverse;
					detailsMode = $temp$detailsMode;
					fixExplanation = $temp$fixExplanation;
					mode = $temp$mode;
					files = $temp$files;
					continue formatReportsEndingWith;
				}
			}
		}
	});
var $author$project$Elm$Review$Reporter$formatReports = F4(
	function (detailsMode, fixExplanation, mode, files) {
		return A5($author$project$Elm$Review$Reporter$formatReportsEndingWith, _List_Nil, detailsMode, fixExplanation, mode, files);
	});
var $author$project$Elm$Review$Reporter$pluralizeEnding = F2(
	function (n, word) {
		return (n > 1) ? (word + 's') : word;
	});
var $author$project$Elm$Review$Reporter$pluralize = F2(
	function (n, word) {
		return $elm$core$String$fromInt(n) + (' ' + A2($author$project$Elm$Review$Reporter$pluralizeEnding, n, word));
	});
var $author$project$Elm$Review$Reporter$formatConfigurationErrors = function (_v0) {
	var detailsMode = _v0.ag;
	var mode = _v0.fH;
	var configurationErrors = _v0.gJ;
	var filesWithErrors = _List_fromArray(
		[
			{ca: configurationErrors, hw: $author$project$Elm$Review$Reporter$ConfigurationError, hK: ''}
		]);
	return A2(
		$elm$core$List$map,
		$author$project$Elm$Review$Text$toRecord,
		$author$project$Elm$Review$Text$simplify(
			A2(
				$author$project$Elm$Review$Text$join,
				'\n\n',
				_List_fromArray(
					[
						A4($author$project$Elm$Review$Reporter$formatReports, detailsMode, 0, mode, filesWithErrors),
						_List_fromArray(
						[
							$author$project$Elm$Review$Text$from('I found '),
							$author$project$Elm$Review$Text$inRed(
							$author$project$Elm$Review$Text$from(
								A2(
									$author$project$Elm$Review$Reporter$pluralize,
									$elm$core$List$length(configurationErrors),
									'configuration error'))),
							$author$project$Elm$Review$Text$from('.')
						])
					]))));
};
var $jfmengels$elm_review$Review$Rule$getConfigurationError = function (_v0) {
	var rule = _v0;
	var _v1 = rule.as;
	if (!_v1.$) {
		return $elm$core$Maybe$Nothing;
	} else {
		var err = _v1.a;
		return $elm$core$Maybe$Just(err);
	}
};
var $jfmengels$elm_review$Review$Rule$ruleName = function (_v0) {
	var rule = _v0;
	return rule.bV;
};
var $author$project$Elm$Review$Main$getConfigurationError = function (rule) {
	var _v0 = $jfmengels$elm_review$Review$Rule$getConfigurationError(rule);
	if (!_v0.$) {
		var configurationError = _v0.a;
		return $elm$core$Maybe$Just(
			{
				dd: configurationError.dd,
				fm: $elm$core$Maybe$Nothing,
				a_: configurationError.a_,
				fW: false,
				fX: false,
				eG: $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				f$: $elm$core$Maybe$Nothing,
				eH: $jfmengels$elm_review$Review$Rule$ruleName(rule),
				gb: false
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review$Review$Exceptions$addFilter = F2(
	function (condition, _v0) {
		var conditions = _v0;
		return A2($elm$core$List$cons, condition, conditions);
	});
var $elm$core$String$endsWith = _String_endsWith;
var $elm$core$String$startsWith = _String_startsWith;
var $jfmengels$elm_review$Review$Exceptions$isInAnIgnoredDirectory = F2(
	function (directories, path) {
		return A2(
			$elm$core$List$any,
			function (dir) {
				return A2($elm$core$String$startsWith, dir, path);
			},
			directories);
	});
var $jfmengels$elm_review$Review$Exceptions$addDirectories = F2(
	function (directories, exceptions) {
		var cleanedDirectories = A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				$jfmengels$elm_review$Path$makeOSAgnostic,
				function (dir) {
					return A2($elm$core$String$endsWith, '/', dir) ? dir : (dir + '/');
				}),
			directories);
		return A2(
			$jfmengels$elm_review$Review$Exceptions$addFilter,
			function (path) {
				return !A2($jfmengels$elm_review$Review$Exceptions$isInAnIgnoredDirectory, cleanedDirectories, path);
			},
			exceptions);
	});
var $jfmengels$elm_review$Review$Rule$ignoreErrorsForDirectories = F2(
	function (directories, _v0) {
		var rule = _v0;
		return {
			w: A2($jfmengels$elm_review$Review$Exceptions$addDirectories, directories, rule.w),
			dr: rule.dr,
			bV: rule.bV,
			p: rule.p,
			hG: rule.hG,
			as: rule.as
		};
	});
var $jfmengels$elm_review$Review$Exceptions$addFiles = F2(
	function (files, exceptions) {
		var cleanedFiles = $elm$core$Set$fromList(
			A2($elm$core$List$map, $jfmengels$elm_review$Path$makeOSAgnostic, files));
		return A2(
			$jfmengels$elm_review$Review$Exceptions$addFilter,
			function (file) {
				return !A2($elm$core$Set$member, file, cleanedFiles);
			},
			exceptions);
	});
var $jfmengels$elm_review$Review$Rule$ignoreErrorsForFiles = F2(
	function (files, _v0) {
		var rule = _v0;
		return {
			w: A2($jfmengels$elm_review$Review$Exceptions$addFiles, files, rule.w),
			dr: rule.dr,
			bV: rule.bV,
			p: rule.p,
			hG: rule.hG,
			as: rule.as
		};
	});
var $jfmengels$elm_review$Review$Project$Internal$Project = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Project$ProjectCache$empty = {e7: $elm$core$Maybe$Nothing, ew: $elm$core$Dict$empty, av: $elm$core$Dict$empty};
var $jfmengels$elm_review$Review$Project$new = {
	gC: $jfmengels$elm_review$Review$Project$ProjectCache$empty,
	e6: $elm$core$Dict$empty,
	ba: $elm$core$Maybe$Nothing,
	ap: $elm$core$Dict$empty,
	K: $elm$core$Dict$empty,
	fI: $elm$core$Maybe$Nothing,
	av: $elm$core$Dict$empty,
	cr: _List_Nil,
	bX: $elm$core$Maybe$Nothing,
	eP: _List_fromArray(
		['src/'])
};
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $author$project$Elm$Review$Main$requestReadingFiles = _Platform_outgoingPort(
	'requestReadingFiles',
	$elm$json$Json$Encode$list(
		function ($) {
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'excludedDirectories',
						$elm$json$Json$Encode$list($elm$json$Json$Encode$string)($.gV)),
						_Utils_Tuple2(
						'files',
						$elm$json$Json$Encode$list(
							function ($) {
								return $elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'included',
											$elm$json$Json$Encode$bool($.g6)),
											_Utils_Tuple2(
											'pattern',
											$elm$json$Json$Encode$string($.hy))
										]));
							})($.g$))
					]));
		}));
var $jfmengels$elm_review$Review$Rule$ruleRequestedFiles = function (_v0) {
	var rule = _v0;
	var _v1 = rule.hG;
	var requestedData = _v1;
	return requestedData.g$;
};
var $author$project$Elm$Review$Vendor$Table$Table = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			$elm$core$Array$initialize,
			n,
			function (_v0) {
				return e;
			});
	});
var $author$project$Elm$Review$Vendor$Table$empty = function (_v0) {
	var sizeA = _v0.a;
	var sizeB = _v0.b;
	var arraySize = ((sizeA + 1) * (sizeB + 1)) - 1;
	return A2(
		$author$project$Elm$Review$Vendor$Table$Table,
		sizeB + 1,
		A2($elm$core$Array$repeat, arraySize, -1));
};
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$setHelp = F4(
	function (shift, index, value, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
		if (!_v0.$) {
			var subTree = _v0.a;
			var newSub = A4($elm$core$Array$setHelp, shift - $elm$core$Array$shiftStep, index, value, subTree);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$SubTree(newSub),
				tree);
		} else {
			var values = _v0.a;
			var newLeaf = A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, values);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$Leaf(newLeaf),
				tree);
		}
	});
var $elm$core$Array$set = F3(
	function (index, value, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? array : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			tree,
			A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, tail)) : A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A4($elm$core$Array$setHelp, startShift, index, value, tree),
			tail));
	});
var $author$project$Elm$Review$Vendor$Table$fetch = F3(
	function (key, builder, table) {
		var iKey = key.a;
		var jKey = key.b;
		var dimension = table.a;
		var store = table.b;
		var index = (iKey * dimension) + jKey;
		var _v0 = A2($elm$core$Array$get, index, store);
		if (!_v0.$) {
			var value = _v0.a;
			if (_Utils_eq(value, -1)) {
				var _v1 = A2(builder, table, key);
				var _v2 = _v1.a;
				var newStore = _v2.b;
				var newValue = _v1.b;
				return _Utils_Tuple2(
					A2(
						$author$project$Elm$Review$Vendor$Table$Table,
						dimension,
						A3($elm$core$Array$set, index, newValue, newStore)),
					newValue);
			} else {
				return _Utils_Tuple2(table, value);
			}
		} else {
			return _Utils_Tuple2(table, -1);
		}
	});
var $elm$core$Array$length = function (_v0) {
	var len = _v0.a;
	return len;
};
var $author$project$Elm$Review$Vendor$Levenshtein$distanceHelper = F2(
	function (arr1, arr2) {
		var indecesForLastChars = _Utils_Tuple2(
			$elm$core$Array$length(arr1),
			$elm$core$Array$length(arr2));
		var calculateEditDistanceForChars = F2(
			function (table, _v0) {
				var i = _v0.a;
				var j = _v0.b;
				var _v1 = _Utils_Tuple2(
					A2($elm$core$Array$get, i - 1, arr1),
					A2($elm$core$Array$get, j - 1, arr2));
				if ((!_v1.a.$) && (!_v1.b.$)) {
					var chr1 = _v1.a.a;
					var chr2 = _v1.b.a;
					var _v2 = A3(
						$author$project$Elm$Review$Vendor$Table$fetch,
						_Utils_Tuple2(i - 1, j),
						calculateEditDistanceForChars,
						table);
					var table1 = _v2.a;
					var dist1 = _v2.b;
					var _v3 = A3(
						$author$project$Elm$Review$Vendor$Table$fetch,
						_Utils_Tuple2(i, j - 1),
						calculateEditDistanceForChars,
						table1);
					var table2 = _v3.a;
					var dist2 = _v3.b;
					var _v4 = A3(
						$author$project$Elm$Review$Vendor$Table$fetch,
						_Utils_Tuple2(i - 1, j - 1),
						calculateEditDistanceForChars,
						table2);
					var table3 = _v4.a;
					var dist3 = _v4.b;
					return _Utils_Tuple2(
						table3,
						(_Utils_cmp(dist3, dist1) < 0) ? ((_Utils_cmp(dist3, dist2) < 0) ? ((!_Utils_eq(chr1, chr2)) ? (dist3 + 1) : dist3) : (dist2 + 1)) : ((_Utils_cmp(dist1, dist2) > 0) ? (dist2 + 1) : (dist1 + 1)));
				} else {
					return _Utils_Tuple2(
						table,
						A2($elm$core$Basics$max, i, j));
				}
			});
		return A2(
			calculateEditDistanceForChars,
			$author$project$Elm$Review$Vendor$Table$empty(indecesForLastChars),
			indecesForLastChars).b;
	});
var $author$project$Elm$Review$Vendor$Levenshtein$distance = F2(
	function (str1, str2) {
		return _Utils_eq(str1, str2) ? 0 : A2(
			$author$project$Elm$Review$Vendor$Levenshtein$distanceHelper,
			$elm$core$Array$fromList(
				$elm$core$String$toList(str1)),
			$elm$core$Array$fromList(
				$elm$core$String$toList(str2)));
	});
var $elm$core$List$sortBy = _List_sortBy;
var $author$project$Elm$Review$Main$closestNames = F2(
	function (names, name) {
		return A2(
			$elm$core$List$take,
			3,
			A2(
				$elm$core$List$sortBy,
				$author$project$Elm$Review$Vendor$Levenshtein$distance(name),
				names));
	});
var $author$project$Elm$Review$Main$unknownRulesFilterMessage = function (_v0) {
	var ruleNames = _v0.f0;
	var filterNames = _v0.fk;
	var unknownRulesMessage = A2(
		$elm$core$String$join,
		'\n\n',
		A2(
			$elm$core$List$map,
			function (filterName) {
				return '- ' + (filterName + ('. Did you mean:\n  - ' + A2(
					$elm$core$String$join,
					'\n  - ',
					A2($author$project$Elm$Review$Main$closestNames, ruleNames, filterName))));
			},
			filterNames));
	return {a_: 'You requested to only run several rules, but I could not find some of them.\n\n' + unknownRulesMessage, c6: 'UNKNOWN FILTERED RULE(S)'};
};
var $jfmengels$elm_review$Review$Rule$withRuleId = F2(
	function (id, _v0) {
		var rule = _v0;
		return _Utils_update(
			rule,
			{dr: id});
	});
var $author$project$Elm$Review$Main$init = function (rawFlags) {
	var rulesWithIds = A2($elm$core$List$indexedMap, $jfmengels$elm_review$Review$Rule$withRuleId, $author$project$ReviewConfig$config);
	var _v0 = function () {
		var _v1 = A2($elm$json$Json$Decode$decodeValue, $author$project$Elm$Review$Main$decodeFlags, rawFlags);
		if (!_v1.$) {
			var decodedFlags = _v1.a;
			return _Utils_Tuple2(decodedFlags, $elm$core$Platform$Cmd$none);
		} else {
			var error = _v1.a;
			return _Utils_Tuple2(
				{ag: 1, bA: false, aE: 0, bd: $elm$core$Maybe$Nothing, aj: $author$project$Elm$Review$Main$Mode_DontFix, be: false, ds: _List_Nil, dt: _List_Nil, dA: $author$project$Elm$Review$CliCommunication$dummy, a1: 0, dP: $elm$core$Maybe$Nothing, aS: $author$project$Elm$Review$UnsuppressMode$UnsuppressNone, b2: false},
				$author$project$Elm$Review$Main$abort(
					'Problem decoding the flags when running the elm-review runner:\n  ' + $elm$json$Json$Decode$errorToString(error)));
		}
	}();
	var flags = _v0.a;
	var cmd = _v0.b;
	var _v2 = function () {
		var _v3 = flags.dP;
		if (!_v3.$) {
			var rulesToEnable = _v3.a;
			var ruleNames = $elm$core$Set$fromList(
				A2($elm$core$List$map, $jfmengels$elm_review$Review$Rule$ruleName, rulesWithIds));
			return _Utils_Tuple2(
				A2(
					$elm$core$List$filter,
					function (rule) {
						return A2(
							$elm$core$Set$member,
							$jfmengels$elm_review$Review$Rule$ruleName(rule),
							rulesToEnable);
					},
					rulesWithIds),
				$elm$core$Set$toList(
					A2($elm$core$Set$diff, rulesToEnable, ruleNames)));
		} else {
			return _Utils_Tuple2(rulesWithIds, _List_Nil);
		}
	}();
	var rulesFromConfig = _v2.a;
	var filterNames = _v2.b;
	var rules = A2(
		$elm$core$List$map,
		A2(
			$elm$core$Basics$composeR,
			$jfmengels$elm_review$Review$Rule$ignoreErrorsForDirectories(flags.ds),
			$jfmengels$elm_review$Review$Rule$ignoreErrorsForFiles(flags.dt)),
		rulesFromConfig);
	return _Utils_Tuple2(
		{aV: flags.dA, ag: flags.ag, bA: flags.bA, aC: $author$project$Elm$Review$Main$NotAwaiting, cL: false, cS: $elm$core$Dict$empty, aD: $elm$core$Dict$empty, bG: $jfmengels$elm_review$Review$Project$new, ch: rules, aE: flags.aE, bd: flags.bd, aj: flags.aj, be: flags.be, dx: true, bS: $elm$core$Dict$empty, c2: 0, h: $jfmengels$elm_review$Review$Project$new, c4: $author$project$Elm$Review$RefusedErrorFixes$empty, a1: flags.a1, bY: _List_Nil, aP: _List_Nil, aQ: rules, R: $author$project$Elm$Review$SuppressedErrors$empty, aS: flags.aS, b2: flags.b2},
		function () {
			if ($elm$core$List$isEmpty($author$project$ReviewConfig$config)) {
				return $author$project$Elm$Review$Main$abortWithDetails(
					{a_: 'Your configuration contains no rules. You can add rules by editing the ReviewConfig.elm file.\n\nI recommend you take a look at the following documents:\n  - How to configure elm-review: https://github.com/jfmengels/elm-review/#Configuration\n  - When to write or enable a rule: https://github.com/jfmengels/elm-review/#when-to-write-or-enable-a-rule', c6: 'CONFIGURATION IS EMPTY'});
			} else {
				if (!$elm$core$List$isEmpty(filterNames)) {
					return $author$project$Elm$Review$Main$abortWithDetails(
						$author$project$Elm$Review$Main$unknownRulesFilterMessage(
							{
								fk: filterNames,
								f0: $elm$core$Set$toList(
									$elm$core$Set$fromList(
										A2($elm$core$List$map, $jfmengels$elm_review$Review$Rule$ruleName, $author$project$ReviewConfig$config)))
							}));
				} else {
					var _v4 = A2($elm$core$List$filterMap, $author$project$Elm$Review$Main$getConfigurationError, $author$project$ReviewConfig$config);
					if (!_v4.b) {
						return $elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									cmd,
									$author$project$Elm$Review$Main$requestReadingFiles(
									A2($elm$core$List$concatMap, $jfmengels$elm_review$Review$Rule$ruleRequestedFiles, rules))
								]));
					} else {
						var configurationErrors = _v4;
						return $author$project$Elm$Review$Main$abortForConfigurationErrors(
							function () {
								var _v5 = flags.a1;
								if (!_v5) {
									return $author$project$Elm$Review$Main$encodeReport(
										$author$project$Elm$Review$Reporter$formatConfigurationErrors(
											{gJ: configurationErrors, ag: flags.ag, fH: $author$project$Elm$Review$Reporter$Reviewing}));
								} else {
									return A2($author$project$Elm$Review$Main$encodeConfigurationErrors, flags.ag, configurationErrors);
								}
							}());
					}
				}
			}
		}());
};
var $author$project$Elm$Review$Main$GotRequestToGenerateSuppressionErrors = {$: 10};
var $author$project$Elm$Review$Main$GotRequestToReview = {$: 9};
var $author$project$Elm$Review$Main$ReceivedDependencies = function (a) {
	return {$: 5, a: a};
};
var $author$project$Elm$Review$Main$ReceivedElmJson = function (a) {
	return {$: 2, a: a};
};
var $author$project$Elm$Review$Main$ReceivedExtraFiles = function (a) {
	return {$: 4, a: a};
};
var $author$project$Elm$Review$Main$ReceivedFile = function (a) {
	return {$: 0, a: a};
};
var $author$project$Elm$Review$Main$ReceivedLinks = function (a) {
	return {$: 8, a: a};
};
var $author$project$Elm$Review$Main$ReceivedReadme = function (a) {
	return {$: 3, a: a};
};
var $author$project$Elm$Review$Main$ReceivedSuppressedErrors = function (a) {
	return {$: 6, a: a};
};
var $author$project$Elm$Review$Main$RemovedFile = function (a) {
	return {$: 1, a: a};
};
var $author$project$Elm$Review$Main$RequestedToKnowIfAFixConfirmationIsExpected = {$: 12};
var $author$project$Elm$Review$Main$UpdateSuppressedErrors = function (a) {
	return {$: 7, a: a};
};
var $author$project$Elm$Review$Main$UserConfirmedFix = function (a) {
	return {$: 11, a: a};
};
var $author$project$Elm$Review$Main$askForFixConfirmationStatus = _Platform_incomingPort(
	'askForFixConfirmationStatus',
	$elm$json$Json$Decode$null(0));
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $author$project$Elm$Review$Main$collectDependencies = _Platform_incomingPort('collectDependencies', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$collectElmJson = _Platform_incomingPort('collectElmJson', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$collectExtraFiles = _Platform_incomingPort('collectExtraFiles', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$collectFile = _Platform_incomingPort('collectFile', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$collectLinks = _Platform_incomingPort('collectLinks', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$collectReadme = _Platform_incomingPort('collectReadme', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$collectSuppressedErrors = _Platform_incomingPort('collectSuppressedErrors', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$removeFile = _Platform_incomingPort('removeFile', $elm$json$Json$Decode$string);
var $author$project$Elm$Review$Main$startGeneratingSuppressions = _Platform_incomingPort(
	'startGeneratingSuppressions',
	$elm$json$Json$Decode$null(0));
var $author$project$Elm$Review$Main$startReview = _Platform_incomingPort(
	'startReview',
	$elm$json$Json$Decode$null(0));
var $author$project$Elm$Review$Main$updateSuppressedErrors = _Platform_incomingPort('updateSuppressedErrors', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$userConfirmedFix = _Platform_incomingPort('userConfirmedFix', $elm$json$Json$Decode$value);
var $author$project$Elm$Review$Main$subscriptions = $elm$core$Platform$Sub$batch(
	_List_fromArray(
		[
			$author$project$Elm$Review$Main$collectFile($author$project$Elm$Review$Main$ReceivedFile),
			$author$project$Elm$Review$Main$removeFile($author$project$Elm$Review$Main$RemovedFile),
			$author$project$Elm$Review$Main$collectElmJson($author$project$Elm$Review$Main$ReceivedElmJson),
			$author$project$Elm$Review$Main$collectReadme($author$project$Elm$Review$Main$ReceivedReadme),
			$author$project$Elm$Review$Main$collectExtraFiles($author$project$Elm$Review$Main$ReceivedExtraFiles),
			$author$project$Elm$Review$Main$collectDependencies($author$project$Elm$Review$Main$ReceivedDependencies),
			$author$project$Elm$Review$Main$collectSuppressedErrors($author$project$Elm$Review$Main$ReceivedSuppressedErrors),
			$author$project$Elm$Review$Main$updateSuppressedErrors($author$project$Elm$Review$Main$UpdateSuppressedErrors),
			$author$project$Elm$Review$Main$collectLinks($author$project$Elm$Review$Main$ReceivedLinks),
			$author$project$Elm$Review$Main$startReview(
			$elm$core$Basics$always($author$project$Elm$Review$Main$GotRequestToReview)),
			$author$project$Elm$Review$Main$startGeneratingSuppressions(
			$elm$core$Basics$always($author$project$Elm$Review$Main$GotRequestToGenerateSuppressionErrors)),
			$author$project$Elm$Review$Main$userConfirmedFix($author$project$Elm$Review$Main$UserConfirmedFix),
			$author$project$Elm$Review$Main$askForFixConfirmationStatus(
			$elm$core$Basics$always($author$project$Elm$Review$Main$RequestedToKnowIfAFixConfirmationIsExpected))
		]));
var $author$project$Elm$Review$Main$acknowledgeFileReceipt = _Platform_outgoingPort('acknowledgeFileReceipt', $elm$core$Basics$identity);
var $jfmengels$elm_review$Review$Project$Dependency$name = function (_v0) {
	var dependency = _v0;
	return dependency.bV;
};
var $jfmengels$elm_review$Review$Project$addDependency = F2(
	function (dependency, _v0) {
		var project = _v0;
		return _Utils_update(
			project,
			{
				e6: A3(
					$elm$core$Dict$insert,
					$jfmengels$elm_review$Review$Project$Dependency$name(dependency),
					dependency,
					project.e6)
			});
	});
var $jfmengels$elm_review$Review$Cache$ContentHash$ContentHash = $elm$core$Basics$identity;
var $jfmengels$elm_review$Vendor$Murmur3$HashData = F4(
	function (shift, seed, hash, charsProcessed) {
		return {b4: charsProcessed, cl: hash, f2: seed, cz: shift};
	});
var $jfmengels$elm_review$Vendor$Murmur3$c1 = 3432918353;
var $jfmengels$elm_review$Vendor$Murmur3$c2 = 461845907;
var $jfmengels$elm_review$Vendor$Murmur3$multiplyBy = F2(
	function (b, a) {
		return ((a & 65535) * b) + ((((a >>> 16) * b) & 65535) << 16);
	});
var $jfmengels$elm_review$Vendor$Murmur3$rotlBy = F2(
	function (b, a) {
		return (a << b) | (a >>> (32 - b));
	});
var $jfmengels$elm_review$Vendor$Murmur3$finalize = function (data) {
	var acc = (!(!data.cl)) ? (data.f2 ^ A2(
		$jfmengels$elm_review$Vendor$Murmur3$multiplyBy,
		$jfmengels$elm_review$Vendor$Murmur3$c2,
		A2(
			$jfmengels$elm_review$Vendor$Murmur3$rotlBy,
			15,
			A2($jfmengels$elm_review$Vendor$Murmur3$multiplyBy, $jfmengels$elm_review$Vendor$Murmur3$c1, data.cl)))) : data.f2;
	var h0 = acc ^ data.b4;
	var h1 = A2($jfmengels$elm_review$Vendor$Murmur3$multiplyBy, 2246822507, h0 ^ (h0 >>> 16));
	var h2 = A2($jfmengels$elm_review$Vendor$Murmur3$multiplyBy, 3266489909, h1 ^ (h1 >>> 13));
	return (h2 ^ (h2 >>> 16)) >>> 0;
};
var $elm$core$String$foldl = _String_foldl;
var $jfmengels$elm_review$Vendor$Murmur3$mix = F2(
	function (h1, k1) {
		return A2(
			$jfmengels$elm_review$Vendor$Murmur3$multiplyBy,
			5,
			A2(
				$jfmengels$elm_review$Vendor$Murmur3$rotlBy,
				13,
				h1 ^ A2(
					$jfmengels$elm_review$Vendor$Murmur3$multiplyBy,
					$jfmengels$elm_review$Vendor$Murmur3$c2,
					A2(
						$jfmengels$elm_review$Vendor$Murmur3$rotlBy,
						15,
						A2($jfmengels$elm_review$Vendor$Murmur3$multiplyBy, $jfmengels$elm_review$Vendor$Murmur3$c1, k1))))) + 3864292196;
	});
var $jfmengels$elm_review$Vendor$Murmur3$hashFold = F2(
	function (c, data) {
		var res = data.cl | ((255 & $elm$core$Char$toCode(c)) << data.cz);
		var _v0 = data.cz;
		if (_v0 === 24) {
			return {
				b4: data.b4 + 1,
				cl: 0,
				f2: A2($jfmengels$elm_review$Vendor$Murmur3$mix, data.f2, res),
				cz: 0
			};
		} else {
			return {b4: data.b4 + 1, cl: res, f2: data.f2, cz: data.cz + 8};
		}
	});
var $jfmengels$elm_review$Vendor$Murmur3$hashString = F2(
	function (seed, str) {
		return $jfmengels$elm_review$Vendor$Murmur3$finalize(
			A3(
				$elm$core$String$foldl,
				$jfmengels$elm_review$Vendor$Murmur3$hashFold,
				A4($jfmengels$elm_review$Vendor$Murmur3$HashData, 0, seed, 0, 0),
				str));
	});
var $jfmengels$elm_review$Review$Cache$ContentHash$hash = function (source) {
	return A2($jfmengels$elm_review$Vendor$Murmur3$hashString, 0, source);
};
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === -2) {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $jfmengels$elm_review$Review$Project$ProjectModule$OpaqueProjectModule = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Project$ProjectModule$setIsInSourceDirectories = F2(
	function (isInSourceDirectories_, _v0) {
		var module_ = _v0;
		return _Utils_update(
			module_,
			{fy: isInSourceDirectories_});
	});
var $jfmengels$elm_review$Review$Project$Internal$endWithSlash = function (dir) {
	return A2($elm$core$String$endsWith, '/', dir) ? dir : (dir + '/');
};
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $jfmengels$elm_review$Review$Project$Internal$removeDotSlashAtBeginning = function (dir) {
	return A2($elm$core$String$startsWith, './', dir) ? A2($elm$core$String$dropLeft, 2, dir) : dir;
};
var $jfmengels$elm_review$Review$Project$Internal$sourceDirectoriesForProject = function (elmJson_) {
	if (!elmJson_.$) {
		var dirs = elmJson_.a.fd;
		return A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				$jfmengels$elm_review$Review$Project$Internal$removeDotSlashAtBeginning,
				A2($elm$core$Basics$composeR, $jfmengels$elm_review$Path$makeOSAgnostic, $jfmengels$elm_review$Review$Project$Internal$endWithSlash)),
			dirs);
	} else {
		return _List_fromArray(
			['src/']);
	}
};
var $jfmengels$elm_review$Review$Project$addElmJson = F2(
	function (elmJson_, _v0) {
		var project = _v0;
		var sourceDirectories = $jfmengels$elm_review$Review$Project$Internal$sourceDirectoriesForProject(elmJson_.h);
		var modules_ = _Utils_eq(project.eP, sourceDirectories) ? project.av : A2(
			$elm$core$Dict$map,
			F2(
				function (path, module_) {
					var osAgnosticPath = $jfmengels$elm_review$Path$makeOSAgnostic(path);
					return A2(
						$jfmengels$elm_review$Review$Project$ProjectModule$setIsInSourceDirectories,
						A2(
							$elm$core$List$any,
							function (dir) {
								return A2($elm$core$String$startsWith, dir, osAgnosticPath);
							},
							sourceDirectories),
						module_);
				}),
			project.av);
		return _Utils_update(
			project,
			{
				ba: $elm$core$Maybe$Just(
					_Utils_Tuple2(
						elmJson_,
						$jfmengels$elm_review$Review$Cache$ContentHash$hash(elmJson_.dM))),
				av: modules_,
				eP: sourceDirectories
			});
	});
var $jfmengels$elm_review$Review$Project$addExtraFiles = F2(
	function (newFiles, _v0) {
		var project = _v0;
		var _v1 = A3(
			$elm$core$Dict$foldl,
			F3(
				function (path, content, _v2) {
					var extraFiles_ = _v2.a;
					var hashes = _v2.b;
					return _Utils_Tuple2(
						A3($elm$core$Dict$insert, path, content, extraFiles_),
						A3(
							$elm$core$Dict$insert,
							path,
							$jfmengels$elm_review$Review$Cache$ContentHash$hash(content),
							hashes));
				}),
			_Utils_Tuple2(project.ap, project.K),
			newFiles);
		var updatedExtraFiles = _v1.a;
		var extraFilesContentHashes = _v1.b;
		return _Utils_update(
			project,
			{ap: updatedExtraFiles, K: extraFilesContentHashes});
	});
var $jfmengels$elm_review$Review$Project$addFileThatFailedToParse = F2(
	function (_v0, _v1) {
		var path = _v0.hw;
		var source = _v0.hK;
		var project = _v1;
		return _Utils_update(
			project,
			{
				cr: A2(
					$elm$core$List$cons,
					{hw: path, hK: source},
					project.cr)
			});
	});
var $jfmengels$elm_review$Review$Project$ProjectModule$path = function (_v0) {
	var module_ = _v0;
	return module_.hw;
};
var $jfmengels$elm_review$Review$Project$addModuleToProject = F2(
	function (module_, _v0) {
		var project = _v0;
		return _Utils_update(
			project,
			{
				av: A3(
					$elm$core$Dict$insert,
					$jfmengels$elm_review$Review$Project$ProjectModule$path(module_),
					module_,
					project.av)
			});
	});
var $stil4m$elm_syntax$Elm$Syntax$Module$moduleName = function (m) {
	switch (m.$) {
		case 0:
			var x = m.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(x.dE);
		case 1:
			var x = m.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(x.dE);
		default:
			var x = m.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(x.dE);
	}
};
var $jfmengels$elm_review$Review$Project$ProjectModule$positionAsInt = function (_v0) {
	var row = _v0.bp;
	var column = _v0.a6;
	return (row * 1000000) + column;
};
var $jfmengels$elm_review$Review$Project$ProjectModule$sanitizeModule = function (ast_) {
	return _Utils_update(
		ast_,
		{
			gI: A2(
				$elm$core$List$sortBy,
				function (_v0) {
					var range = _v0.a;
					return $jfmengels$elm_review$Review$Project$ProjectModule$positionAsInt(range.cB);
				},
				ast_.gI)
		});
};
var $jfmengels$elm_review$Review$Project$ProjectModule$create = function (params) {
	return {
		gv: $jfmengels$elm_review$Review$Project$ProjectModule$sanitizeModule(params.gv),
		d7: $jfmengels$elm_review$Review$Cache$ContentHash$hash(params.hK),
		fy: params.fy,
		dE: $stil4m$elm_syntax$Elm$Syntax$Module$moduleName(
			$stil4m$elm_syntax$Elm$Syntax$Node$value(params.gv.hi)),
		hw: params.hw,
		hK: params.hK
	};
};
var $jfmengels$elm_review$Review$Project$forceModuleGraphRecomputation = function (_v0) {
	var project = _v0;
	return _Utils_update(
		project,
		{fI: $elm$core$Maybe$Nothing});
};
var $stil4m$elm_syntax$Rope$empty = $elm$core$Maybe$Nothing;
var $stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration = function (a) {
	return {$: 1, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration = function (a) {
	return {$: 2, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Declaration$PortDeclaration = function (a) {
	return {$: 3, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Signature$Signature = F2(
	function (name, typeAnnotation) {
		return {bV: name, gk: typeAnnotation};
	});
var $stil4m$elm_syntax$Elm$Syntax$Node$combine = F3(
	function (f, a, b) {
		var start = a.a.cB;
		var end = b.a.b9;
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			{b9: end, cB: start},
			A2(f, a, b));
	});
var $stil4m$elm_syntax$ParserFast$Done = function (a) {
	return {$: 1, a: a};
};
var $stil4m$elm_syntax$ParserFast$Loop = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$ParserFast$Bad = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $stil4m$elm_syntax$ParserFast$ExpectingAnyChar = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $stil4m$elm_syntax$ParserFast$Good = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $stil4m$elm_syntax$ParserFast$Parser = $elm$core$Basics$identity;
var $elm$core$String$any = _String_any;
var $elm$core$Basics$isNaN = _Basics_isNaN;
var $stil4m$elm_syntax$Char$Extra$isUtf16Surrogate = function (c) {
	return $elm$core$Basics$isNaN(
		$elm$core$Char$toCode(c));
};
var $stil4m$elm_syntax$ParserFast$charStringIsUtf16HighSurrogate = function (charString) {
	return A2($elm$core$String$any, $stil4m$elm_syntax$Char$Extra$isUtf16Surrogate, charString);
};
var $stil4m$elm_syntax$ParserFast$charOrEnd = F2(
	function (offset, string) {
		var actualChar = A3($elm$core$String$slice, offset, offset + 1, string);
		switch (actualChar) {
			case '\n':
				return -2;
			case '':
				return -1;
			default:
				return $stil4m$elm_syntax$ParserFast$charStringIsUtf16HighSurrogate(actualChar) ? (offset + 2) : (offset + 1);
		}
	});
var $stil4m$elm_syntax$ParserFast$skipWhileHelp = F6(
	function (isGood, offset, row, col, src, indent) {
		skipWhileHelp:
		while (true) {
			var actualChar = A3($elm$core$String$slice, offset, offset + 1, src);
			if (A2($elm$core$String$any, isGood, actualChar)) {
				if (actualChar === '\n') {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$src = src,
						$temp$indent = indent;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					continue skipWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$src = src,
						$temp$indent = indent;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					continue skipWhileHelp;
				}
			} else {
				if ($stil4m$elm_syntax$ParserFast$charStringIsUtf16HighSurrogate(actualChar) && A2(
					$elm$core$String$any,
					isGood,
					A3($elm$core$String$slice, offset, offset + 2, src))) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 2,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$src = src,
						$temp$indent = indent;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					continue skipWhileHelp;
				} else {
					return {da: col, o: indent, e: offset, bp: row, d: src};
				}
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$anyCharFollowedByWhileMap = F2(
	function (consumedStringToRes, afterFirstIsOkay) {
		return function (s) {
			var firstOffset = A2($stil4m$elm_syntax$ParserFast$charOrEnd, s.e, s.d);
			if (_Utils_eq(firstOffset, -1)) {
				return A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A2($stil4m$elm_syntax$ParserFast$ExpectingAnyChar, s.bp, s.da));
			} else {
				var s1 = _Utils_eq(firstOffset, -2) ? A6($stil4m$elm_syntax$ParserFast$skipWhileHelp, afterFirstIsOkay, s.e + 1, s.bp + 1, 1, s.d, s.o) : A6($stil4m$elm_syntax$ParserFast$skipWhileHelp, afterFirstIsOkay, firstOffset, s.bp, s.da + 1, s.d, s.o);
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					consumedStringToRes(
						A3($elm$core$String$slice, s.e, s1.e, s.d)),
					s1);
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$loopHelp = F5(
	function (committedSoFar, state, element, reduce, s0) {
		loopHelp:
		while (true) {
			var parseElement = element;
			var _v0 = parseElement(s0);
			if (!_v0.$) {
				var step = _v0.a;
				var s1 = _v0.b;
				var _v1 = A2(reduce, step, state);
				if (!_v1.$) {
					var newState = _v1.a;
					var $temp$committedSoFar = true,
						$temp$state = newState,
						$temp$element = element,
						$temp$reduce = reduce,
						$temp$s0 = s1;
					committedSoFar = $temp$committedSoFar;
					state = $temp$state;
					element = $temp$element;
					reduce = $temp$reduce;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = _v1.a;
					return A2($stil4m$elm_syntax$ParserFast$Good, result, s1);
				}
			} else {
				var elementCommitted = _v0.a;
				var x = _v0.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committedSoFar || elementCommitted, x);
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$loop = F3(
	function (state, element, reduce) {
		return function (s) {
			return A5($stil4m$elm_syntax$ParserFast$loopHelp, false, state, element, reduce, s);
		};
	});
var $stil4m$elm_syntax$ParserFast$map2WithRange = F3(
	function (func, _v0, _v1) {
		var parseA = _v0;
		var parseB = _v1;
		return function (s0) {
			var _v2 = parseA(s0);
			if (_v2.$ === 1) {
				var committed = _v2.a;
				var x = _v2.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var a = _v2.a;
				var s1 = _v2.b;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var x = _v3.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v3.a;
					var s2 = _v3.b;
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						A3(
							func,
							{
								b9: {a6: s2.da, bp: s2.bp},
								cB: {a6: s0.da, bp: s0.bp}
							},
							a,
							b),
						s2);
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$ExpectingOneOf = F3(
	function (a, b, c) {
		return {$: 7, a: a, b: b, c: c};
	});
var $stil4m$elm_syntax$ParserFast$oneOf2 = F2(
	function (_v0, _v1) {
		var attemptFirst = _v0;
		var attemptSecond = _v1;
		return function (s) {
			var _v2 = attemptFirst(s);
			if (!_v2.$) {
				var firstGood = _v2;
				return firstGood;
			} else {
				var firstBad = _v2;
				var firstCommitted = firstBad.a;
				var firstX = firstBad.b;
				if (firstCommitted) {
					return firstBad;
				} else {
					var _v3 = attemptSecond(s);
					if (!_v3.$) {
						var secondGood = _v3;
						return secondGood;
					} else {
						var secondBad = _v3;
						var secondCommitted = secondBad.a;
						var secondX = secondBad.b;
						return secondCommitted ? secondBad : A2(
							$stil4m$elm_syntax$ParserFast$Bad,
							false,
							A3($stil4m$elm_syntax$ParserFast$ExpectingOneOf, firstX, secondX, _List_Nil));
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$oneOf3 = F3(
	function (_v0, _v1, _v2) {
		var attemptFirst = _v0;
		var attemptSecond = _v1;
		var attemptThird = _v2;
		return function (s) {
			var _v3 = attemptFirst(s);
			if (!_v3.$) {
				var firstGood = _v3;
				return firstGood;
			} else {
				var firstBad = _v3;
				var firstCommitted = firstBad.a;
				var firstX = firstBad.b;
				if (firstCommitted) {
					return firstBad;
				} else {
					var _v4 = attemptSecond(s);
					if (!_v4.$) {
						var secondGood = _v4;
						return secondGood;
					} else {
						var secondBad = _v4;
						var secondCommitted = secondBad.a;
						var secondX = secondBad.b;
						if (secondCommitted) {
							return secondBad;
						} else {
							var _v5 = attemptThird(s);
							if (!_v5.$) {
								var thirdGood = _v5;
								return thirdGood;
							} else {
								var thirdBad = _v5;
								var thirdCommitted = thirdBad.a;
								var thirdX = thirdBad.b;
								return thirdCommitted ? thirdBad : A2(
									$stil4m$elm_syntax$ParserFast$Bad,
									false,
									A3(
										$stil4m$elm_syntax$ParserFast$ExpectingOneOf,
										firstX,
										secondX,
										_List_fromArray(
											[thirdX])));
							}
						}
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$ExpectingSymbol = F3(
	function (a, b, c) {
		return {$: 1, a: a, b: b, c: c};
	});
var $stil4m$elm_syntax$ParserFast$symbol = F2(
	function (str, res) {
		var strLength = $elm$core$String$length(str);
		return function (s) {
			var newOffset = s.e + strLength;
			return _Utils_eq(
				A3($elm$core$String$slice, s.e, newOffset, s.d),
				str + '') ? A2(
				$stil4m$elm_syntax$ParserFast$Good,
				res,
				{da: s.da + strLength, o: s.o, e: newOffset, bp: s.bp, d: s.d}) : A2(
				$stil4m$elm_syntax$ParserFast$Bad,
				false,
				A3($stil4m$elm_syntax$ParserFast$ExpectingSymbol, s.bp, s.da, str));
		};
	});
var $stil4m$elm_syntax$ParserFast$pStepCommit = function (pStep) {
	if (!pStep.$) {
		var good = pStep;
		return good;
	} else {
		var x = pStep.b;
		return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
	}
};
var $stil4m$elm_syntax$ParserFast$symbolFollowedBy = F2(
	function (str, _v0) {
		var parseNext = _v0;
		var strLength = $elm$core$String$length(str);
		return function (s) {
			var newOffset = s.e + strLength;
			return _Utils_eq(
				A3($elm$core$String$slice, s.e, newOffset, s.d),
				str + '') ? $stil4m$elm_syntax$ParserFast$pStepCommit(
				parseNext(
					{da: s.da + strLength, o: s.o, e: newOffset, bp: s.bp, d: s.d})) : A2(
				$stil4m$elm_syntax$ParserFast$Bad,
				false,
				A3($stil4m$elm_syntax$ParserFast$ExpectingSymbol, s.bp, s.da, str));
		};
	});
var $stil4m$elm_syntax$ParserFast$while = function (isGood) {
	return function (s0) {
		var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileHelp, isGood, s0.e, s0.bp, s0.da, s0.d, s0.o);
		return A2(
			$stil4m$elm_syntax$ParserFast$Good,
			A3($elm$core$String$slice, s0.e, s1.e, s0.d),
			s1);
	};
};
var $stil4m$elm_syntax$ParserFast$nestableMultiCommentMapWithRange = F3(
	function (rangeContentToRes, _v0, _v1) {
		var openChar = _v0.a;
		var openTail = _v0.b;
		var closeChar = _v1.a;
		var closeTail = _v1.b;
		var open = A2($elm$core$String$cons, openChar, openTail);
		var isNotRelevant = function (_char) {
			return (!_Utils_eq(_char, openChar)) && ((!_Utils_eq(_char, closeChar)) && (!$stil4m$elm_syntax$Char$Extra$isUtf16Surrogate(_char)));
		};
		var close = A2($elm$core$String$cons, closeChar, closeTail);
		return A3(
			$stil4m$elm_syntax$ParserFast$map2WithRange,
			F3(
				function (range, afterOpen, contentAfterAfterOpen) {
					return A2(
						rangeContentToRes,
						range,
						_Utils_ap(
							open,
							_Utils_ap(
								afterOpen,
								_Utils_ap(contentAfterAfterOpen, close))));
				}),
			A2(
				$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
				open,
				$stil4m$elm_syntax$ParserFast$while(isNotRelevant)),
			A2(
				$stil4m$elm_syntax$ParserFast$oneOf2,
				A2($stil4m$elm_syntax$ParserFast$symbol, close, ''),
				A3(
					$stil4m$elm_syntax$ParserFast$loop,
					_Utils_Tuple2('', 1),
					A3(
						$stil4m$elm_syntax$ParserFast$oneOf3,
						A2(
							$stil4m$elm_syntax$ParserFast$symbol,
							close,
							_Utils_Tuple2(close, -1)),
						A2(
							$stil4m$elm_syntax$ParserFast$symbol,
							open,
							_Utils_Tuple2(open, 1)),
						A2(
							$stil4m$elm_syntax$ParserFast$anyCharFollowedByWhileMap,
							function (consumed) {
								return _Utils_Tuple2(consumed, 0);
							},
							isNotRelevant)),
					F2(
						function (_v2, _v3) {
							var toAppend = _v2.a;
							var nestingChange = _v2.b;
							var soFarContent = _v3.a;
							var soFarNesting = _v3.b;
							var newNesting = soFarNesting + nestingChange;
							return (!newNesting) ? $stil4m$elm_syntax$ParserFast$Done(soFarContent) : $stil4m$elm_syntax$ParserFast$Loop(
								_Utils_Tuple2(soFarContent + (toAppend + ''), newNesting));
						}))));
	});
var $stil4m$elm_syntax$Elm$Parser$Comments$multiLineCommentNoCheck = A3(
	$stil4m$elm_syntax$ParserFast$nestableMultiCommentMapWithRange,
	$stil4m$elm_syntax$Elm$Syntax$Node$Node,
	_Utils_Tuple2('{', '-'),
	_Utils_Tuple2('-', '}'));
var $stil4m$elm_syntax$Elm$Parser$Comments$declarationDocumentation = $stil4m$elm_syntax$Elm$Parser$Comments$multiLineCommentNoCheck;
var $stil4m$elm_syntax$Rope$Branch2 = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $stil4m$elm_syntax$Rope$filledPrependTo = F2(
	function (right, leftLikelyFilled) {
		if (right.$ === 1) {
			return $elm$core$Maybe$Just(leftLikelyFilled);
		} else {
			var rightLikelyFilled = right.a;
			return $elm$core$Maybe$Just(
				A2($stil4m$elm_syntax$Rope$Branch2, leftLikelyFilled, rightLikelyFilled));
		}
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$FunctionDeclarationAfterDocumentation = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Application = function (a) {
	return {$: 1, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression = function (a) {
	return {$: 16, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Expression$ExtendRightByOperation = $elm$core$Basics$identity;
var $stil4m$elm_syntax$Elm$Parser$Expression$FieldsFirstValue = function (a) {
	return {$: 1, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock = F3(
	function (a, b, c) {
		return {$: 4, a: a, b: b, c: c};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression = function (a) {
	return {$: 17, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Infix$Left = 0;
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression = function (a) {
	return {$: 15, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr = function (a) {
	return {$: 19, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Negation = function (a) {
	return {$: 10, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Infix$Non = 2;
var $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression = function (a) {
	return {$: 14, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess = F2(
	function (a, b) {
		return {$: 20, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr = function (a) {
	return {$: 18, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression = F2(
	function (a, b) {
		return {$: 22, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$RecordUpdateFirstSetter = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Infix$Right = 1;
var $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression = function (a) {
	return {$: 13, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Expression$TupledParenthesizedFollowedByRecordAccesses = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Expression$TupledTwoOrThree = function (a) {
	return {$: 1, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$UnitExpr = {$: 0};
var $stil4m$elm_syntax$Elm$Syntax$Expression$PrefixOperator = function (a) {
	return {$: 5, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$isAllowedOperatorToken = function (operatorCandidateToValidate) {
	switch (operatorCandidateToValidate) {
		case '==':
			return true;
		case '/=':
			return true;
		case '::':
			return true;
		case '++':
			return true;
		case '+':
			return true;
		case '*':
			return true;
		case '<|':
			return true;
		case '|>':
			return true;
		case '||':
			return true;
		case '<=':
			return true;
		case '>=':
			return true;
		case '|=':
			return true;
		case '|.':
			return true;
		case '//':
			return true;
		case '</>':
			return true;
		case '<?>':
			return true;
		case '^':
			return true;
		case '<<':
			return true;
		case '>>':
			return true;
		case '<':
			return true;
		case '>':
			return true;
		case '/':
			return true;
		case '&&':
			return true;
		case '-':
			return true;
		default:
			return false;
	}
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$isOperatorSymbolChar = function (c) {
	switch (c) {
		case '+':
			return true;
		case '-':
			return true;
		case '/':
			return true;
		case '*':
			return true;
		case '=':
			return true;
		case '.':
			return true;
		case '<':
			return true;
		case '>':
			return true;
		case ':':
			return true;
		case '&':
			return true;
		case '|':
			return true;
		case '^':
			return true;
		case '?':
			return true;
		default:
			return false;
	}
};
var $stil4m$elm_syntax$ParserFast$ExpectingStringSatisfyingPredicate = F2(
	function (a, b) {
		return {$: 5, a: a, b: b};
	});
var $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakAnd2PartUtf16Help = F3(
	function (isGood, offset, src) {
		skipWhileWithoutLinebreakAnd2PartUtf16Help:
		while (true) {
			if (A2(
				$elm$core$String$any,
				isGood,
				A3($elm$core$String$slice, offset, offset + 1, src))) {
				var $temp$isGood = isGood,
					$temp$offset = offset + 1,
					$temp$src = src;
				isGood = $temp$isGood;
				offset = $temp$offset;
				src = $temp$src;
				continue skipWhileWithoutLinebreakAnd2PartUtf16Help;
			} else {
				return offset;
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol = F4(
	function (whileRangeAndContentToRes, whileCharIsOkay, whileResultIsOkay, mandatoryFinalSymbol) {
		var mandatoryFinalSymbolLength = $elm$core$String$length(mandatoryFinalSymbol);
		return function (s0) {
			var s1Offset = A3($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakAnd2PartUtf16Help, whileCharIsOkay, s0.e, s0.d);
			var whileContent = A3($elm$core$String$slice, s0.e, s1Offset, s0.d);
			if (_Utils_eq(
				A3($elm$core$String$slice, s1Offset, s1Offset + mandatoryFinalSymbolLength, s0.d),
				mandatoryFinalSymbol + '') && whileResultIsOkay(whileContent)) {
				var s1Column = s0.da + (s1Offset - s0.e);
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					A2(
						whileRangeAndContentToRes,
						{
							b9: {a6: s1Column, bp: s0.bp},
							cB: {a6: s0.da, bp: s0.bp}
						},
						whileContent),
					{da: s1Column + mandatoryFinalSymbolLength, o: s0.o, e: s1Offset + mandatoryFinalSymbolLength, bp: s0.bp, d: s0.d});
			} else {
				return A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A2($stil4m$elm_syntax$ParserFast$ExpectingStringSatisfyingPredicate, s0.bp, s0.da + 1));
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$allowedPrefixOperatorFollowedByClosingParensOneOf = A4(
	$stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol,
	F2(
		function (operatorRange, operator) {
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					{
						b9: {a6: operatorRange.b9.a6 + 1, bp: operatorRange.b9.bp},
						cB: {a6: operatorRange.cB.a6 - 1, bp: operatorRange.cB.bp}
					},
					$stil4m$elm_syntax$Elm$Syntax$Expression$PrefixOperator(operator))
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$isOperatorSymbolChar,
	$stil4m$elm_syntax$Elm$Parser$Tokens$isAllowedOperatorToken,
	')');
var $stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication = F4(
	function (a, b, c, d) {
		return {$: 2, a: a, b: b, c: c, d: d};
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$applyExtensionRight = F2(
	function (_v0, leftNode) {
		var operation = _v0;
		var leftRange = leftNode.a;
		var rightExpressionNode = operation.dm;
		var rightExpressionRange = rightExpressionNode.a;
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			{b9: rightExpressionRange.b9, cB: leftRange.cB},
			A4($stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication, operation.bs, operation.gP, leftNode, rightExpressionNode));
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$CharLiteral = function (a) {
	return {$: 12, a: a};
};
var $stil4m$elm_syntax$ParserFast$anyChar = function (s) {
	var newOffset = A2($stil4m$elm_syntax$ParserFast$charOrEnd, s.e, s.d);
	if (_Utils_eq(newOffset, -1)) {
		return A2(
			$stil4m$elm_syntax$ParserFast$Bad,
			false,
			A2($stil4m$elm_syntax$ParserFast$ExpectingAnyChar, s.bp, s.da));
	} else {
		if (_Utils_eq(newOffset, -2)) {
			return A2(
				$stil4m$elm_syntax$ParserFast$Good,
				'\n',
				{da: 1, o: s.o, e: s.e + 1, bp: s.bp + 1, d: s.d});
		} else {
			var _v0 = $elm$core$String$toList(
				A3($elm$core$String$slice, s.e, newOffset, s.d));
			if (!_v0.b) {
				return A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A2($stil4m$elm_syntax$ParserFast$ExpectingAnyChar, s.bp, s.da));
			} else {
				var c = _v0.a;
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					c,
					{da: s.da + 1, o: s.o, e: newOffset, bp: s.bp, d: s.d});
			}
		}
	}
};
var $stil4m$elm_syntax$ParserFast$followedBySymbol = F2(
	function (str, _v0) {
		var parsePrevious = _v0;
		var strLength = $elm$core$String$length(str);
		return function (s0) {
			var _v1 = parsePrevious(s0);
			if (!_v1.$) {
				var res = _v1.a;
				var s1 = _v1.b;
				var newOffset = s1.e + strLength;
				return _Utils_eq(
					A3($elm$core$String$slice, s1.e, newOffset, s1.d),
					str + '') ? A2(
					$stil4m$elm_syntax$ParserFast$Good,
					res,
					{da: s1.da + strLength, o: s1.o, e: newOffset, bp: s1.bp, d: s1.d}) : A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					true,
					A3($stil4m$elm_syntax$ParserFast$ExpectingSymbol, s1.bp, s1.da, str));
			} else {
				var bad = _v1;
				return bad;
			}
		};
	});
var $elm$core$Char$fromCode = _Char_fromCode;
var $stil4m$elm_syntax$Elm$Parser$Tokens$charToHex = function (c) {
	switch (c) {
		case '0':
			return 0;
		case '1':
			return 1;
		case '2':
			return 2;
		case '3':
			return 3;
		case '4':
			return 4;
		case '5':
			return 5;
		case '6':
			return 6;
		case '7':
			return 7;
		case '8':
			return 8;
		case '9':
			return 9;
		case 'a':
			return 10;
		case 'b':
			return 11;
		case 'c':
			return 12;
		case 'd':
			return 13;
		case 'e':
			return 14;
		case 'f':
			return 15;
		case 'A':
			return 10;
		case 'B':
			return 11;
		case 'C':
			return 12;
		case 'D':
			return 13;
		case 'E':
			return 14;
		default:
			return 15;
	}
};
var $elm$core$Basics$pow = _Basics_pow;
var $stil4m$elm_syntax$Elm$Parser$Tokens$hexStringToInt = function (string) {
	return A3(
		$elm$core$String$foldr,
		F2(
			function (c, soFar) {
				return {
					dj: soFar.dj + 1,
					dN: soFar.dN + (A2($elm$core$Basics$pow, 16, soFar.dj) * $stil4m$elm_syntax$Elm$Parser$Tokens$charToHex(c))
				};
			}),
		{dj: 0, dN: 0},
		string).dN;
};
var $stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak = F3(
	function (predicate, offset, string) {
		var actualChar = A3($elm$core$String$slice, offset, offset + 1, string);
		return A2($elm$core$String$any, predicate, actualChar) ? (offset + 1) : (($stil4m$elm_syntax$ParserFast$charStringIsUtf16HighSurrogate(actualChar) && A2(
			$elm$core$String$any,
			predicate,
			A3($elm$core$String$slice, offset, offset + 2, string))) ? (offset + 2) : (-1));
	});
var $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp = F6(
	function (isGood, offset, row, col, src, indent) {
		skipWhileWithoutLinebreakHelp:
		while (true) {
			var actualChar = A3($elm$core$String$slice, offset, offset + 1, src);
			if (A2($elm$core$String$any, isGood, actualChar)) {
				var $temp$isGood = isGood,
					$temp$offset = offset + 1,
					$temp$row = row,
					$temp$col = col + 1,
					$temp$src = src,
					$temp$indent = indent;
				isGood = $temp$isGood;
				offset = $temp$offset;
				row = $temp$row;
				col = $temp$col;
				src = $temp$src;
				indent = $temp$indent;
				continue skipWhileWithoutLinebreakHelp;
			} else {
				if ($stil4m$elm_syntax$ParserFast$charStringIsUtf16HighSurrogate(actualChar) && A2(
					$elm$core$String$any,
					isGood,
					A3($elm$core$String$slice, offset, offset + 2, src))) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 2,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$src = src,
						$temp$indent = indent;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					continue skipWhileWithoutLinebreakHelp;
				} else {
					return {da: col, o: indent, e: offset, bp: row, d: src};
				}
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithoutLinebreak = F3(
	function (consumedStringToRes, firstIsOkay, afterFirstIsOkay) {
		return function (s0) {
			var firstOffset = A3($stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak, firstIsOkay, s0.e, s0.d);
			if (_Utils_eq(firstOffset, -1)) {
				return A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A2($stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate, s0.bp, s0.da));
			} else {
				var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp, afterFirstIsOkay, firstOffset, s0.bp, s0.da + 1, s0.d, s0.o);
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					consumedStringToRes(
						A3($elm$core$String$slice, s0.e, s1.e, s0.d)),
					s1);
			}
		};
	});
var $elm$core$Char$isHexDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return ((48 <= code) && (code <= 57)) || (((65 <= code) && (code <= 70)) || ((97 <= code) && (code <= 102)));
};
var $stil4m$elm_syntax$ParserFast$oneOf7 = F7(
	function (_v0, _v1, _v2, _v3, _v4, _v5, _v6) {
		var attempt0 = _v0;
		var attempt1 = _v1;
		var attempt2 = _v2;
		var attempt3 = _v3;
		var attempt4 = _v4;
		var attempt5 = _v5;
		var attempt6 = _v6;
		return function (s) {
			var _v7 = attempt0(s);
			if (!_v7.$) {
				var good = _v7;
				return good;
			} else {
				var bad0 = _v7;
				var committed0 = bad0.a;
				var x0 = bad0.b;
				if (committed0) {
					return bad0;
				} else {
					var _v8 = attempt1(s);
					if (!_v8.$) {
						var good = _v8;
						return good;
					} else {
						var bad1 = _v8;
						var committed1 = bad1.a;
						var x1 = bad1.b;
						if (committed1) {
							return bad1;
						} else {
							var _v9 = attempt2(s);
							if (!_v9.$) {
								var good = _v9;
								return good;
							} else {
								var bad2 = _v9;
								var committed2 = bad2.a;
								var x2 = bad2.b;
								if (committed2) {
									return bad2;
								} else {
									var _v10 = attempt3(s);
									if (!_v10.$) {
										var good = _v10;
										return good;
									} else {
										var bad3 = _v10;
										var committed3 = bad3.a;
										var x3 = bad3.b;
										if (committed3) {
											return bad3;
										} else {
											var _v11 = attempt4(s);
											if (!_v11.$) {
												var good = _v11;
												return good;
											} else {
												var bad4 = _v11;
												var committed4 = bad4.a;
												var x4 = bad4.b;
												if (committed4) {
													return bad4;
												} else {
													var _v12 = attempt5(s);
													if (!_v12.$) {
														var good = _v12;
														return good;
													} else {
														var bad5 = _v12;
														var committed5 = bad5.a;
														var x5 = bad5.b;
														if (committed5) {
															return bad5;
														} else {
															var _v13 = attempt6(s);
															if (!_v13.$) {
																var good = _v13;
																return good;
															} else {
																var bad6 = _v13;
																var committed6 = bad6.a;
																var x6 = bad6.b;
																return committed6 ? bad6 : A2(
																	$stil4m$elm_syntax$ParserFast$Bad,
																	false,
																	A3(
																		$stil4m$elm_syntax$ParserFast$ExpectingOneOf,
																		x0,
																		x1,
																		_List_fromArray(
																			[x2, x3, x4, x5, x6])));
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValueMap = function (charToRes) {
	return A7(
		$stil4m$elm_syntax$ParserFast$oneOf7,
		A2(
			$stil4m$elm_syntax$ParserFast$symbol,
			'\'',
			charToRes('\'')),
		A2(
			$stil4m$elm_syntax$ParserFast$symbol,
			'\"',
			charToRes('\"')),
		A2(
			$stil4m$elm_syntax$ParserFast$symbol,
			'n',
			charToRes('\n')),
		A2(
			$stil4m$elm_syntax$ParserFast$symbol,
			't',
			charToRes('\t')),
		A2(
			$stil4m$elm_syntax$ParserFast$symbol,
			'r',
			charToRes('\u000D')),
		A2(
			$stil4m$elm_syntax$ParserFast$symbol,
			'\\',
			charToRes('\\')),
		A2(
			$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
			'u{',
			A2(
				$stil4m$elm_syntax$ParserFast$followedBySymbol,
				'}',
				A3(
					$stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithoutLinebreak,
					function (hex) {
						return charToRes(
							$elm$core$Char$fromCode(
								$stil4m$elm_syntax$Elm$Parser$Tokens$hexStringToInt(hex)));
					},
					$elm$core$Char$isHexDigit,
					$elm$core$Char$isHexDigit))));
};
var $stil4m$elm_syntax$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn = F4(
	function (firstToChoice, _v0, secondToChoice, _v1) {
		var attemptFirst = _v0;
		var attemptSecond = _v1;
		return function (s) {
			var _v2 = attemptFirst(s);
			if (!_v2.$) {
				var first = _v2.a;
				var s1 = _v2.b;
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					A5(firstToChoice, s.bp, s.da, first, s1.bp, s1.da),
					s1);
			} else {
				var firstCommitted = _v2.a;
				var firstX = _v2.b;
				if (firstCommitted) {
					return A2($stil4m$elm_syntax$ParserFast$Bad, firstCommitted, firstX);
				} else {
					var _v3 = attemptSecond(s);
					if (!_v3.$) {
						var second = _v3.a;
						var s1 = _v3.b;
						return A2(
							$stil4m$elm_syntax$ParserFast$Good,
							A5(secondToChoice, s.bp, s.da, second, s1.bp, s1.da),
							s1);
					} else {
						var secondCommitted = _v3.a;
						var secondX = _v3.b;
						return secondCommitted ? A2($stil4m$elm_syntax$ParserFast$Bad, secondCommitted, secondX) : A2(
							$stil4m$elm_syntax$ParserFast$Bad,
							false,
							A3($stil4m$elm_syntax$ParserFast$ExpectingOneOf, firstX, secondX, _List_Nil));
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteralMapWithRange = function (rangeAndCharToRes) {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'\'',
		A2(
			$stil4m$elm_syntax$ParserFast$followedBySymbol,
			'\'',
			A4(
				$stil4m$elm_syntax$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn,
				F5(
					function (startRow, startColumn, _char, endRow, endColumn) {
						return A2(
							rangeAndCharToRes,
							{
								b9: {a6: endColumn + 1, bp: endRow},
								cB: {a6: startColumn - 1, bp: startRow}
							},
							_char);
					}),
				A2(
					$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
					'\\',
					$stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValueMap($elm$core$Basics$identity)),
				F5(
					function (startRow, startColumn, _char, endRow, endColumn) {
						return A2(
							rangeAndCharToRes,
							{
								b9: {a6: endColumn + 1, bp: endRow},
								cB: {a6: startColumn - 1, bp: startRow}
							},
							_char);
					}),
				$stil4m$elm_syntax$ParserFast$anyChar)));
};
var $stil4m$elm_syntax$Elm$Parser$Expression$charLiteralExpression = $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteralMapWithRange(
	F2(
		function (range, _char) {
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Expression$CharLiteral(_char))
			};
		}));
var $stil4m$elm_syntax$Elm$Parser$Expression$errUnknownInfixOperator = $elm$core$Result$Err('unknown infix operator');
var $stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak = F4(
	function (toResult, firstIsOkay, afterFirstIsOkay, resultIsOkay) {
		return function (s0) {
			var firstOffset = A3($stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak, firstIsOkay, s0.e, s0.d);
			if (_Utils_eq(firstOffset, -1)) {
				return A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A2($stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate, s0.bp, s0.da));
			} else {
				var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp, afterFirstIsOkay, firstOffset, s0.bp, s0.da + 1, s0.d, s0.o);
				var name = A3($elm$core$String$slice, s0.e, s1.e, s0.d);
				return resultIsOkay(name) ? A2(
					$stil4m$elm_syntax$ParserFast$Good,
					A2(
						toResult,
						{
							b9: {a6: s1.da, bp: s1.bp},
							cB: {a6: s0.da, bp: s0.bp}
						},
						name),
					s1) : A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A2($stil4m$elm_syntax$ParserFast$ExpectingStringSatisfyingPredicate, s0.bp, s0.da + 1));
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Tokens$isNotReserved = function (name) {
	switch (name) {
		case 'module':
			return false;
		case 'exposing':
			return false;
		case 'import':
			return false;
		case 'as':
			return false;
		case 'if':
			return false;
		case 'then':
			return false;
		case 'else':
			return false;
		case 'let':
			return false;
		case 'in':
			return false;
		case 'case':
			return false;
		case 'of':
			return false;
		case 'port':
			return false;
		case 'type':
			return false;
		case 'where':
			return false;
		default:
			return true;
	}
};
var $stil4m$elm_syntax$Char$Extra$charCodeIsDigit = function (code) {
	return (code <= 57) && (48 <= code);
};
var $stil4m$elm_syntax$Char$Extra$charCodeIsLower = function (code) {
	return (97 <= code) && (code <= 122);
};
var $stil4m$elm_syntax$Char$Extra$charCodeIsUpper = function (code) {
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$modBy = _Basics_modBy;
var $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast = function (c) {
	var code = $elm$core$Char$toCode(c);
	return $stil4m$elm_syntax$Char$Extra$charCodeIsLower(code) || ($stil4m$elm_syntax$Char$Extra$charCodeIsUpper(code) || ($stil4m$elm_syntax$Char$Extra$charCodeIsDigit(code) || ((code === 95) || (((code !== 32) && (code !== 10)) && ((code < 256) ? (((48 <= code) && (code <= 57)) || (((65 <= code) && (code <= 90)) || (((97 <= code) && (code <= 122)) || ((code === 170) || (((178 <= code) && (code <= 179)) || ((code === 181) || (((185 <= code) && (code <= 186)) || (((188 <= code) && (code <= 190)) || (((192 <= code) && (code <= 214)) || (((216 <= code) && (code <= 246)) || ((248 <= code) && (code <= 255)))))))))))) : ((code < 43700) ? ((code < 4347) ? ((code < 2868) ? ((code < 2364) ? ((code < 1648) ? ((code < 930) ? (((256 <= code) && (code <= 705)) || (((710 <= code) && (code <= 721)) || (((736 <= code) && (code <= 740)) || (((880 <= code) && (code <= 884)) || (((886 <= code) && (code <= 887)) || (((890 <= code) && (code <= 893)) || ((code === 895) || ((code === 902) || (((904 <= code) && (code <= 906)) || ((code === 908) || (((910 <= code) && (code <= 929)) || ((!A2($elm$core$Basics$modBy, 2, code)) && ((748 <= code) && (code <= 750)))))))))))))) : (((931 <= code) && (code <= 1013)) || (((1015 <= code) && (code <= 1153)) || (((1162 <= code) && (code <= 1327)) || (((1329 <= code) && (code <= 1366)) || ((code === 1369) || (((1376 <= code) && (code <= 1416)) || (((1488 <= code) && (code <= 1514)) || (((1519 <= code) && (code <= 1522)) || (((1568 <= code) && (code <= 1610)) || (((1632 <= code) && (code <= 1641)) || ((1646 <= code) && (code <= 1647))))))))))))) : ((code < 2041) ? (((1649 <= code) && (code <= 1747)) || ((code === 1749) || (((1765 <= code) && (code <= 1766)) || (((1774 <= code) && (code <= 1788)) || ((code === 1791) || ((code === 1808) || (((1810 <= code) && (code <= 1839)) || (((1869 <= code) && (code <= 1957)) || ((code === 1969) || (((1984 <= code) && (code <= 2026)) || ((2036 <= code) && (code <= 2037)))))))))))) : ((code === 2042) || (((2048 <= code) && (code <= 2069)) || ((code === 2074) || ((code === 2084) || ((code === 2088) || (((2112 <= code) && (code <= 2136)) || (((2144 <= code) && (code <= 2154)) || (((2160 <= code) && (code <= 2183)) || (((2185 <= code) && (code <= 2190)) || (((2208 <= code) && (code <= 2249)) || ((2308 <= code) && (code <= 2361)))))))))))))) : ((code < 2609) ? ((code < 2492) ? ((code === 2365) || ((code === 2384) || (((2392 <= code) && (code <= 2401)) || (((2406 <= code) && (code <= 2415)) || (((2417 <= code) && (code <= 2432)) || (((2437 <= code) && (code <= 2444)) || (((2447 <= code) && (code <= 2448)) || (((2451 <= code) && (code <= 2472)) || (((2474 <= code) && (code <= 2480)) || ((code === 2482) || ((2486 <= code) && (code <= 2489)))))))))))) : ((code === 2493) || ((code === 2510) || (((2524 <= code) && (code <= 2525)) || (((2527 <= code) && (code <= 2529)) || (((2534 <= code) && (code <= 2545)) || (((2548 <= code) && (code <= 2553)) || ((code === 2556) || (((2565 <= code) && (code <= 2570)) || (((2575 <= code) && (code <= 2576)) || (((2579 <= code) && (code <= 2600)) || ((2602 <= code) && (code <= 2608))))))))))))) : ((code < 2737) ? (((2610 <= code) && (code <= 2611)) || (((2613 <= code) && (code <= 2614)) || (((2616 <= code) && (code <= 2617)) || (((2649 <= code) && (code <= 2652)) || ((code === 2654) || (((2662 <= code) && (code <= 2671)) || (((2674 <= code) && (code <= 2676)) || (((2693 <= code) && (code <= 2701)) || (((2703 <= code) && (code <= 2705)) || (((2707 <= code) && (code <= 2728)) || ((2730 <= code) && (code <= 2736)))))))))))) : (((2738 <= code) && (code <= 2739)) || (((2741 <= code) && (code <= 2745)) || ((code === 2749) || ((code === 2768) || (((2784 <= code) && (code <= 2785)) || (((2790 <= code) && (code <= 2799)) || ((code === 2809) || (((2821 <= code) && (code <= 2828)) || (((2831 <= code) && (code <= 2832)) || (((2835 <= code) && (code <= 2856)) || (((2858 <= code) && (code <= 2864)) || ((2866 <= code) && (code <= 2867)))))))))))))))) : ((code < 3411) ? ((code < 3132) ? ((code < 2971) ? (((2869 <= code) && (code <= 2873)) || ((code === 2877) || (((2908 <= code) && (code <= 2909)) || (((2911 <= code) && (code <= 2913)) || (((2918 <= code) && (code <= 2927)) || (((2929 <= code) && (code <= 2935)) || ((code === 2947) || (((2949 <= code) && (code <= 2954)) || (((2958 <= code) && (code <= 2960)) || (((2962 <= code) && (code <= 2965)) || ((2969 <= code) && (code <= 2970)))))))))))) : ((code === 2972) || (((2974 <= code) && (code <= 2975)) || (((2979 <= code) && (code <= 2980)) || (((2984 <= code) && (code <= 2986)) || (((2990 <= code) && (code <= 3001)) || ((code === 3024) || (((3046 <= code) && (code <= 3058)) || (((3077 <= code) && (code <= 3084)) || (((3086 <= code) && (code <= 3088)) || (((3090 <= code) && (code <= 3112)) || ((3114 <= code) && (code <= 3129))))))))))))) : ((code < 3252) ? ((code === 3133) || (((3160 <= code) && (code <= 3162)) || ((code === 3165) || (((3168 <= code) && (code <= 3169)) || (((3174 <= code) && (code <= 3183)) || (((3192 <= code) && (code <= 3198)) || ((code === 3200) || (((3205 <= code) && (code <= 3212)) || (((3214 <= code) && (code <= 3216)) || (((3218 <= code) && (code <= 3240)) || ((3242 <= code) && (code <= 3251)))))))))))) : (((3253 <= code) && (code <= 3257)) || ((code === 3261) || (((3293 <= code) && (code <= 3294)) || (((3296 <= code) && (code <= 3297)) || (((3302 <= code) && (code <= 3311)) || (((3313 <= code) && (code <= 3314)) || (((3332 <= code) && (code <= 3340)) || (((3342 <= code) && (code <= 3344)) || (((3346 <= code) && (code <= 3386)) || ((code === 3389) || (code === 3406))))))))))))) : ((code < 3775) ? ((code < 3633) ? (((3412 <= code) && (code <= 3414)) || (((3416 <= code) && (code <= 3425)) || (((3430 <= code) && (code <= 3448)) || (((3450 <= code) && (code <= 3455)) || (((3461 <= code) && (code <= 3478)) || (((3482 <= code) && (code <= 3505)) || (((3507 <= code) && (code <= 3515)) || ((code === 3517) || (((3520 <= code) && (code <= 3526)) || (((3558 <= code) && (code <= 3567)) || ((3585 <= code) && (code <= 3632)))))))))))) : (((3634 <= code) && (code <= 3635)) || (((3648 <= code) && (code <= 3654)) || (((3664 <= code) && (code <= 3673)) || (((3713 <= code) && (code <= 3714)) || ((code === 3716) || (((3718 <= code) && (code <= 3722)) || (((3724 <= code) && (code <= 3747)) || ((code === 3749) || (((3751 <= code) && (code <= 3760)) || (((3762 <= code) && (code <= 3763)) || (code === 3773)))))))))))) : ((code < 4175) ? (((3776 <= code) && (code <= 3780)) || ((code === 3782) || (((3792 <= code) && (code <= 3801)) || (((3804 <= code) && (code <= 3807)) || ((code === 3840) || (((3872 <= code) && (code <= 3891)) || (((3904 <= code) && (code <= 3911)) || (((3913 <= code) && (code <= 3948)) || (((3976 <= code) && (code <= 3980)) || (((4096 <= code) && (code <= 4138)) || ((4159 <= code) && (code <= 4169)))))))))))) : (((4176 <= code) && (code <= 4181)) || (((4186 <= code) && (code <= 4189)) || ((code === 4193) || (((4197 <= code) && (code <= 4198)) || (((4206 <= code) && (code <= 4208)) || (((4213 <= code) && (code <= 4225)) || ((code === 4238) || (((4240 <= code) && (code <= 4249)) || (((4256 <= code) && (code <= 4293)) || ((code === 4295) || ((code === 4301) || ((4304 <= code) && (code <= 4346))))))))))))))))) : ((code < 8454) ? ((code < 6527) ? ((code < 5760) ? ((code < 4801) ? (((4348 <= code) && (code <= 4680)) || (((4682 <= code) && (code <= 4685)) || (((4688 <= code) && (code <= 4694)) || ((code === 4696) || (((4698 <= code) && (code <= 4701)) || (((4704 <= code) && (code <= 4744)) || (((4746 <= code) && (code <= 4749)) || (((4752 <= code) && (code <= 4784)) || (((4786 <= code) && (code <= 4789)) || (((4792 <= code) && (code <= 4798)) || (code === 4800))))))))))) : (((4802 <= code) && (code <= 4805)) || (((4808 <= code) && (code <= 4822)) || (((4824 <= code) && (code <= 4880)) || (((4882 <= code) && (code <= 4885)) || (((4888 <= code) && (code <= 4954)) || (((4969 <= code) && (code <= 4988)) || (((4992 <= code) && (code <= 5007)) || (((5024 <= code) && (code <= 5109)) || (((5112 <= code) && (code <= 5117)) || (((5121 <= code) && (code <= 5740)) || ((5743 <= code) && (code <= 5759))))))))))))) : ((code < 6111) ? (((5761 <= code) && (code <= 5786)) || (((5792 <= code) && (code <= 5866)) || (((5870 <= code) && (code <= 5880)) || (((5888 <= code) && (code <= 5905)) || (((5919 <= code) && (code <= 5937)) || (((5952 <= code) && (code <= 5969)) || (((5984 <= code) && (code <= 5996)) || (((5998 <= code) && (code <= 6000)) || (((6016 <= code) && (code <= 6067)) || ((code === 6103) || (code === 6108))))))))))) : (((6112 <= code) && (code <= 6121)) || (((6128 <= code) && (code <= 6137)) || (((6160 <= code) && (code <= 6169)) || (((6176 <= code) && (code <= 6264)) || (((6272 <= code) && (code <= 6276)) || (((6279 <= code) && (code <= 6312)) || ((code === 6314) || (((6320 <= code) && (code <= 6389)) || (((6400 <= code) && (code <= 6430)) || (((6470 <= code) && (code <= 6509)) || ((6512 <= code) && (code <= 6516)))))))))))))) : ((code < 7417) ? ((code < 7042) ? (((6528 <= code) && (code <= 6571)) || (((6576 <= code) && (code <= 6601)) || (((6608 <= code) && (code <= 6618)) || (((6656 <= code) && (code <= 6678)) || (((6688 <= code) && (code <= 6740)) || (((6784 <= code) && (code <= 6793)) || (((6800 <= code) && (code <= 6809)) || ((code === 6823) || (((6917 <= code) && (code <= 6963)) || (((6981 <= code) && (code <= 6988)) || ((6992 <= code) && (code <= 7001)))))))))))) : (((7043 <= code) && (code <= 7072)) || (((7086 <= code) && (code <= 7141)) || (((7168 <= code) && (code <= 7203)) || (((7232 <= code) && (code <= 7241)) || (((7245 <= code) && (code <= 7293)) || (((7296 <= code) && (code <= 7304)) || (((7312 <= code) && (code <= 7354)) || (((7357 <= code) && (code <= 7359)) || (((7401 <= code) && (code <= 7404)) || (((7406 <= code) && (code <= 7411)) || ((7413 <= code) && (code <= 7414))))))))))))) : ((code < 8129) ? ((code === 7418) || (((7424 <= code) && (code <= 7615)) || (((7680 <= code) && (code <= 7957)) || (((7960 <= code) && (code <= 7965)) || (((7968 <= code) && (code <= 8005)) || (((8008 <= code) && (code <= 8013)) || (((8016 <= code) && (code <= 8023)) || (((8032 <= code) && (code <= 8061)) || (((8064 <= code) && (code <= 8116)) || (((8118 <= code) && (code <= 8124)) || ((code === 8126) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && ((8025 <= code) && (code <= 8031)))))))))))))) : (((8130 <= code) && (code <= 8132)) || (((8134 <= code) && (code <= 8140)) || (((8144 <= code) && (code <= 8147)) || (((8150 <= code) && (code <= 8155)) || (((8160 <= code) && (code <= 8172)) || (((8178 <= code) && (code <= 8180)) || (((8182 <= code) && (code <= 8188)) || (((8304 <= code) && (code <= 8305)) || (((8308 <= code) && (code <= 8313)) || (((8319 <= code) && (code <= 8329)) || (((8336 <= code) && (code <= 8348)) || (code === 8450))))))))))))))) : ((code < 12783) ? ((code < 11647) ? ((code < 9449) ? ((code === 8455) || (((8458 <= code) && (code <= 8467)) || ((code === 8469) || (((8473 <= code) && (code <= 8477)) || (((8490 <= code) && (code <= 8493)) || (((8495 <= code) && (code <= 8505)) || (((8508 <= code) && (code <= 8511)) || (((8517 <= code) && (code <= 8521)) || ((code === 8526) || (((8528 <= code) && (code <= 8585)) || (((9312 <= code) && (code <= 9371)) || ((!A2($elm$core$Basics$modBy, 2, code)) && ((8484 <= code) && (code <= 8488)))))))))))))) : (((9450 <= code) && (code <= 9471)) || (((10102 <= code) && (code <= 10131)) || (((11264 <= code) && (code <= 11492)) || (((11499 <= code) && (code <= 11502)) || (((11506 <= code) && (code <= 11507)) || ((code === 11517) || (((11520 <= code) && (code <= 11557)) || ((code === 11559) || ((code === 11565) || (((11568 <= code) && (code <= 11623)) || (code === 11631)))))))))))) : ((code < 12320) ? (((11648 <= code) && (code <= 11670)) || (((11680 <= code) && (code <= 11686)) || (((11688 <= code) && (code <= 11694)) || (((11696 <= code) && (code <= 11702)) || (((11704 <= code) && (code <= 11710)) || (((11712 <= code) && (code <= 11718)) || (((11720 <= code) && (code <= 11726)) || (((11728 <= code) && (code <= 11734)) || (((11736 <= code) && (code <= 11742)) || ((code === 11823) || ((12293 <= code) && (code <= 12295)))))))))))) : (((12321 <= code) && (code <= 12329)) || (((12337 <= code) && (code <= 12341)) || (((12344 <= code) && (code <= 12348)) || (((12353 <= code) && (code <= 12438)) || (((12445 <= code) && (code <= 12447)) || (((12449 <= code) && (code <= 12538)) || (((12540 <= code) && (code <= 12543)) || (((12549 <= code) && (code <= 12591)) || (((12593 <= code) && (code <= 12686)) || (((12690 <= code) && (code <= 12693)) || ((12704 <= code) && (code <= 12735)))))))))))))) : ((code < 43019) ? ((code < 42559) ? (((12784 <= code) && (code <= 12799)) || (((12832 <= code) && (code <= 12841)) || (((12872 <= code) && (code <= 12879)) || (((12881 <= code) && (code <= 12895)) || (((12928 <= code) && (code <= 12937)) || (((12977 <= code) && (code <= 12991)) || (((13312 <= code) && (code <= 19903)) || (((19968 <= code) && (code <= 42124)) || (((42192 <= code) && (code <= 42237)) || (((42240 <= code) && (code <= 42508)) || ((42512 <= code) && (code <= 42539)))))))))))) : (((42560 <= code) && (code <= 42606)) || (((42623 <= code) && (code <= 42653)) || (((42656 <= code) && (code <= 42735)) || (((42775 <= code) && (code <= 42783)) || (((42786 <= code) && (code <= 42888)) || (((42891 <= code) && (code <= 42954)) || (((42960 <= code) && (code <= 42961)) || (((42966 <= code) && (code <= 42969)) || (((42994 <= code) && (code <= 43009)) || (((43011 <= code) && (code <= 43013)) || (((43015 <= code) && (code <= 43018)) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && ((42963 <= code) && (code <= 42965))))))))))))))) : ((code < 43395) ? (((43020 <= code) && (code <= 43042)) || (((43056 <= code) && (code <= 43061)) || (((43072 <= code) && (code <= 43123)) || (((43138 <= code) && (code <= 43187)) || (((43216 <= code) && (code <= 43225)) || (((43250 <= code) && (code <= 43255)) || ((code === 43259) || (((43261 <= code) && (code <= 43262)) || (((43264 <= code) && (code <= 43301)) || (((43312 <= code) && (code <= 43334)) || ((43360 <= code) && (code <= 43388)))))))))))) : (((43396 <= code) && (code <= 43442)) || (((43471 <= code) && (code <= 43481)) || (((43488 <= code) && (code <= 43492)) || (((43494 <= code) && (code <= 43518)) || (((43520 <= code) && (code <= 43560)) || (((43584 <= code) && (code <= 43586)) || (((43588 <= code) && (code <= 43595)) || (((43600 <= code) && (code <= 43609)) || (((43616 <= code) && (code <= 43638)) || ((code === 43642) || (((43646 <= code) && (code <= 43695)) || (code === 43697))))))))))))))))) : ((code < 71351) ? ((code < 67671) ? ((code < 65548) ? ((code < 64286) ? ((code < 43867) ? (((43701 <= code) && (code <= 43702)) || (((43705 <= code) && (code <= 43709)) || (((43739 <= code) && (code <= 43741)) || (((43744 <= code) && (code <= 43754)) || (((43762 <= code) && (code <= 43764)) || (((43777 <= code) && (code <= 43782)) || (((43785 <= code) && (code <= 43790)) || (((43793 <= code) && (code <= 43798)) || (((43808 <= code) && (code <= 43814)) || (((43816 <= code) && (code <= 43822)) || (((43824 <= code) && (code <= 43866)) || ((!A2($elm$core$Basics$modBy, 2, code)) && ((43712 <= code) && (code <= 43714)))))))))))))) : (((43868 <= code) && (code <= 43881)) || (((43888 <= code) && (code <= 44002)) || (((44016 <= code) && (code <= 44025)) || (((44032 <= code) && (code <= 55203)) || (((55216 <= code) && (code <= 55238)) || (((55243 <= code) && (code <= 55291)) || (((63744 <= code) && (code <= 64109)) || (((64112 <= code) && (code <= 64217)) || (((64256 <= code) && (code <= 64262)) || (((64275 <= code) && (code <= 64279)) || (code === 64285)))))))))))) : ((code < 65135) ? (((64287 <= code) && (code <= 64296)) || (((64298 <= code) && (code <= 64310)) || (((64312 <= code) && (code <= 64316)) || ((code === 64318) || (((64320 <= code) && (code <= 64321)) || (((64323 <= code) && (code <= 64324)) || (((64326 <= code) && (code <= 64433)) || (((64467 <= code) && (code <= 64829)) || (((64848 <= code) && (code <= 64911)) || (((64914 <= code) && (code <= 64967)) || ((65008 <= code) && (code <= 65019)))))))))))) : (((65136 <= code) && (code <= 65140)) || (((65142 <= code) && (code <= 65276)) || (((65296 <= code) && (code <= 65305)) || (((65313 <= code) && (code <= 65338)) || (((65345 <= code) && (code <= 65370)) || (((65382 <= code) && (code <= 65470)) || (((65474 <= code) && (code <= 65479)) || (((65482 <= code) && (code <= 65487)) || (((65490 <= code) && (code <= 65495)) || (((65498 <= code) && (code <= 65500)) || ((65536 <= code) && (code <= 65547)))))))))))))) : ((code < 66775) ? ((code < 66272) ? (((65549 <= code) && (code <= 65574)) || (((65576 <= code) && (code <= 65594)) || (((65596 <= code) && (code <= 65597)) || (((65599 <= code) && (code <= 65613)) || (((65616 <= code) && (code <= 65629)) || (((65664 <= code) && (code <= 65786)) || (((65799 <= code) && (code <= 65843)) || (((65856 <= code) && (code <= 65912)) || (((65930 <= code) && (code <= 65931)) || (((66176 <= code) && (code <= 66204)) || ((66208 <= code) && (code <= 66256)))))))))))) : (((66273 <= code) && (code <= 66299)) || (((66304 <= code) && (code <= 66339)) || (((66349 <= code) && (code <= 66378)) || (((66384 <= code) && (code <= 66421)) || (((66432 <= code) && (code <= 66461)) || (((66464 <= code) && (code <= 66499)) || (((66504 <= code) && (code <= 66511)) || (((66513 <= code) && (code <= 66517)) || (((66560 <= code) && (code <= 66717)) || (((66720 <= code) && (code <= 66729)) || ((66736 <= code) && (code <= 66771))))))))))))) : ((code < 67071) ? (((66776 <= code) && (code <= 66811)) || (((66816 <= code) && (code <= 66855)) || (((66864 <= code) && (code <= 66915)) || (((66928 <= code) && (code <= 66938)) || (((66940 <= code) && (code <= 66954)) || (((66956 <= code) && (code <= 66962)) || (((66964 <= code) && (code <= 66965)) || (((66967 <= code) && (code <= 66977)) || (((66979 <= code) && (code <= 66993)) || (((66995 <= code) && (code <= 67001)) || ((67003 <= code) && (code <= 67004)))))))))))) : (((67072 <= code) && (code <= 67382)) || (((67392 <= code) && (code <= 67413)) || (((67424 <= code) && (code <= 67431)) || (((67456 <= code) && (code <= 67461)) || (((67463 <= code) && (code <= 67504)) || (((67506 <= code) && (code <= 67514)) || (((67584 <= code) && (code <= 67589)) || ((code === 67592) || (((67594 <= code) && (code <= 67637)) || (((67639 <= code) && (code <= 67640)) || ((code === 67644) || ((67647 <= code) && (code <= 67669)))))))))))))))) : ((code < 69871) ? ((code < 68471) ? ((code < 68116) ? (((67672 <= code) && (code <= 67702)) || (((67705 <= code) && (code <= 67742)) || (((67751 <= code) && (code <= 67759)) || (((67808 <= code) && (code <= 67826)) || (((67828 <= code) && (code <= 67829)) || (((67835 <= code) && (code <= 67867)) || (((67872 <= code) && (code <= 67897)) || (((67968 <= code) && (code <= 68023)) || (((68028 <= code) && (code <= 68047)) || (((68050 <= code) && (code <= 68096)) || ((68112 <= code) && (code <= 68115)))))))))))) : (((68117 <= code) && (code <= 68119)) || (((68121 <= code) && (code <= 68149)) || (((68160 <= code) && (code <= 68168)) || (((68192 <= code) && (code <= 68222)) || (((68224 <= code) && (code <= 68255)) || (((68288 <= code) && (code <= 68295)) || (((68297 <= code) && (code <= 68324)) || (((68331 <= code) && (code <= 68335)) || (((68352 <= code) && (code <= 68405)) || (((68416 <= code) && (code <= 68437)) || ((68440 <= code) && (code <= 68466))))))))))))) : ((code < 69423) ? (((68472 <= code) && (code <= 68497)) || (((68521 <= code) && (code <= 68527)) || (((68608 <= code) && (code <= 68680)) || (((68736 <= code) && (code <= 68786)) || (((68800 <= code) && (code <= 68850)) || (((68858 <= code) && (code <= 68899)) || (((68912 <= code) && (code <= 68921)) || (((69216 <= code) && (code <= 69246)) || (((69248 <= code) && (code <= 69289)) || (((69296 <= code) && (code <= 69297)) || ((69376 <= code) && (code <= 69415)))))))))))) : (((69424 <= code) && (code <= 69445)) || (((69457 <= code) && (code <= 69460)) || (((69488 <= code) && (code <= 69505)) || (((69552 <= code) && (code <= 69579)) || (((69600 <= code) && (code <= 69622)) || (((69635 <= code) && (code <= 69687)) || (((69714 <= code) && (code <= 69743)) || (((69745 <= code) && (code <= 69746)) || ((code === 69749) || (((69763 <= code) && (code <= 69807)) || ((69840 <= code) && (code <= 69864)))))))))))))) : ((code < 70404) ? ((code < 70112) ? (((69872 <= code) && (code <= 69881)) || (((69891 <= code) && (code <= 69926)) || (((69942 <= code) && (code <= 69951)) || ((code === 69956) || ((code === 69959) || (((69968 <= code) && (code <= 70002)) || ((code === 70006) || (((70019 <= code) && (code <= 70066)) || (((70081 <= code) && (code <= 70084)) || (((70096 <= code) && (code <= 70106)) || (code === 70108))))))))))) : (((70113 <= code) && (code <= 70132)) || (((70144 <= code) && (code <= 70161)) || (((70163 <= code) && (code <= 70187)) || (((70207 <= code) && (code <= 70208)) || (((70272 <= code) && (code <= 70278)) || ((code === 70280) || (((70282 <= code) && (code <= 70285)) || (((70287 <= code) && (code <= 70301)) || (((70303 <= code) && (code <= 70312)) || (((70320 <= code) && (code <= 70366)) || ((70384 <= code) && (code <= 70393))))))))))))) : ((code < 70735) ? (((70405 <= code) && (code <= 70412)) || (((70415 <= code) && (code <= 70416)) || (((70419 <= code) && (code <= 70440)) || (((70442 <= code) && (code <= 70448)) || (((70450 <= code) && (code <= 70451)) || (((70453 <= code) && (code <= 70457)) || ((code === 70461) || ((code === 70480) || (((70493 <= code) && (code <= 70497)) || (((70656 <= code) && (code <= 70708)) || ((70727 <= code) && (code <= 70730)))))))))))) : (((70736 <= code) && (code <= 70745)) || (((70751 <= code) && (code <= 70753)) || (((70784 <= code) && (code <= 70831)) || (((70852 <= code) && (code <= 70853)) || ((code === 70855) || (((70864 <= code) && (code <= 70873)) || (((71040 <= code) && (code <= 71086)) || (((71128 <= code) && (code <= 71131)) || (((71168 <= code) && (code <= 71215)) || ((code === 71236) || (((71248 <= code) && (code <= 71257)) || ((71296 <= code) && (code <= 71338))))))))))))))))) : ((code < 119893) ? ((code < 73727) ? ((code < 72703) ? ((code < 71959) ? ((code === 71352) || (((71360 <= code) && (code <= 71369)) || (((71424 <= code) && (code <= 71450)) || (((71472 <= code) && (code <= 71483)) || (((71488 <= code) && (code <= 71494)) || (((71680 <= code) && (code <= 71723)) || (((71840 <= code) && (code <= 71922)) || (((71935 <= code) && (code <= 71942)) || ((code === 71945) || (((71948 <= code) && (code <= 71955)) || ((71957 <= code) && (code <= 71958)))))))))))) : (((71960 <= code) && (code <= 71983)) || (((72016 <= code) && (code <= 72025)) || (((72096 <= code) && (code <= 72103)) || (((72106 <= code) && (code <= 72144)) || ((code === 72192) || (((72203 <= code) && (code <= 72242)) || ((code === 72250) || ((code === 72272) || (((72284 <= code) && (code <= 72329)) || ((code === 72349) || (((72368 <= code) && (code <= 72440)) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && (((71999 <= code) && (code <= 72001)) || ((72161 <= code) && (code <= 72163)))))))))))))))) : ((code < 73062) ? (((72704 <= code) && (code <= 72712)) || (((72714 <= code) && (code <= 72750)) || ((code === 72768) || (((72784 <= code) && (code <= 72812)) || (((72818 <= code) && (code <= 72847)) || (((72960 <= code) && (code <= 72966)) || (((72968 <= code) && (code <= 72969)) || (((72971 <= code) && (code <= 73008)) || ((code === 73030) || (((73040 <= code) && (code <= 73049)) || ((73056 <= code) && (code <= 73061)))))))))))) : (((73063 <= code) && (code <= 73064)) || (((73066 <= code) && (code <= 73097)) || ((code === 73112) || (((73120 <= code) && (code <= 73129)) || (((73440 <= code) && (code <= 73458)) || ((code === 73474) || (((73476 <= code) && (code <= 73488)) || (((73490 <= code) && (code <= 73523)) || (((73552 <= code) && (code <= 73561)) || ((code === 73648) || ((73664 <= code) && (code <= 73684)))))))))))))) : ((code < 94098) ? ((code < 92863) ? (((73728 <= code) && (code <= 74649)) || (((74752 <= code) && (code <= 74862)) || (((74880 <= code) && (code <= 75075)) || (((77712 <= code) && (code <= 77808)) || (((77824 <= code) && (code <= 78895)) || (((78913 <= code) && (code <= 78918)) || (((82944 <= code) && (code <= 83526)) || (((92160 <= code) && (code <= 92728)) || (((92736 <= code) && (code <= 92766)) || (((92768 <= code) && (code <= 92777)) || ((92784 <= code) && (code <= 92862)))))))))))) : (((92864 <= code) && (code <= 92873)) || (((92880 <= code) && (code <= 92909)) || (((92928 <= code) && (code <= 92975)) || (((92992 <= code) && (code <= 92995)) || (((93008 <= code) && (code <= 93017)) || (((93019 <= code) && (code <= 93025)) || (((93027 <= code) && (code <= 93047)) || (((93053 <= code) && (code <= 93071)) || (((93760 <= code) && (code <= 93846)) || (((93952 <= code) && (code <= 94026)) || (code === 94032)))))))))))) : ((code < 110927) ? (((94099 <= code) && (code <= 94111)) || (((94176 <= code) && (code <= 94177)) || ((code === 94179) || (((94208 <= code) && (code <= 100343)) || (((100352 <= code) && (code <= 101589)) || (((101632 <= code) && (code <= 101640)) || (((110576 <= code) && (code <= 110579)) || (((110581 <= code) && (code <= 110587)) || (((110589 <= code) && (code <= 110590)) || (((110592 <= code) && (code <= 110882)) || (code === 110898))))))))))) : (((110928 <= code) && (code <= 110930)) || ((code === 110933) || (((110948 <= code) && (code <= 110951)) || (((110960 <= code) && (code <= 111355)) || (((113664 <= code) && (code <= 113770)) || (((113776 <= code) && (code <= 113788)) || (((113792 <= code) && (code <= 113800)) || (((113808 <= code) && (code <= 113817)) || (((119488 <= code) && (code <= 119507)) || (((119520 <= code) && (code <= 119539)) || (((119648 <= code) && (code <= 119672)) || ((119808 <= code) && (code <= 119892)))))))))))))))) : ((code < 124911) ? ((code < 120597) ? ((code < 120085) ? (((119894 <= code) && (code <= 119964)) || (((119966 <= code) && (code <= 119967)) || ((code === 119970) || (((119973 <= code) && (code <= 119974)) || (((119977 <= code) && (code <= 119980)) || (((119982 <= code) && (code <= 119993)) || ((code === 119995) || (((119997 <= code) && (code <= 120003)) || (((120005 <= code) && (code <= 120069)) || (((120071 <= code) && (code <= 120074)) || ((120077 <= code) && (code <= 120084)))))))))))) : (((120086 <= code) && (code <= 120092)) || (((120094 <= code) && (code <= 120121)) || (((120123 <= code) && (code <= 120126)) || (((120128 <= code) && (code <= 120132)) || ((code === 120134) || (((120138 <= code) && (code <= 120144)) || (((120146 <= code) && (code <= 120485)) || (((120488 <= code) && (code <= 120512)) || (((120514 <= code) && (code <= 120538)) || (((120540 <= code) && (code <= 120570)) || ((120572 <= code) && (code <= 120596))))))))))))) : ((code < 123135) ? (((120598 <= code) && (code <= 120628)) || (((120630 <= code) && (code <= 120654)) || (((120656 <= code) && (code <= 120686)) || (((120688 <= code) && (code <= 120712)) || (((120714 <= code) && (code <= 120744)) || (((120746 <= code) && (code <= 120770)) || (((120772 <= code) && (code <= 120779)) || (((120782 <= code) && (code <= 120831)) || (((122624 <= code) && (code <= 122654)) || (((122661 <= code) && (code <= 122666)) || ((122928 <= code) && (code <= 122989)))))))))))) : (((123136 <= code) && (code <= 123180)) || (((123191 <= code) && (code <= 123197)) || (((123200 <= code) && (code <= 123209)) || ((code === 123214) || (((123536 <= code) && (code <= 123565)) || (((123584 <= code) && (code <= 123627)) || (((123632 <= code) && (code <= 123641)) || (((124112 <= code) && (code <= 124139)) || (((124144 <= code) && (code <= 124153)) || (((124896 <= code) && (code <= 124902)) || (((124904 <= code) && (code <= 124907)) || ((124909 <= code) && (code <= 124910))))))))))))))) : ((code < 126560) ? ((code < 126463) ? (((124912 <= code) && (code <= 124926)) || (((124928 <= code) && (code <= 125124)) || (((125127 <= code) && (code <= 125135)) || (((125184 <= code) && (code <= 125251)) || ((code === 125259) || (((125264 <= code) && (code <= 125273)) || (((126065 <= code) && (code <= 126123)) || (((126125 <= code) && (code <= 126127)) || (((126129 <= code) && (code <= 126132)) || (((126209 <= code) && (code <= 126253)) || ((126255 <= code) && (code <= 126269)))))))))))) : (((126464 <= code) && (code <= 126467)) || (((126469 <= code) && (code <= 126495)) || (((126497 <= code) && (code <= 126498)) || ((code === 126500) || ((code === 126503) || (((126505 <= code) && (code <= 126514)) || (((126516 <= code) && (code <= 126519)) || ((code === 126530) || (((126541 <= code) && (code <= 126543)) || (((126545 <= code) && (code <= 126546)) || ((code === 126548) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && (((126521 <= code) && (code <= 126523)) || (((126535 <= code) && (code <= 126539)) || ((126551 <= code) && (code <= 126559))))))))))))))))) : ((code < 126634) ? (((126561 <= code) && (code <= 126562)) || ((code === 126564) || (((126567 <= code) && (code <= 126570)) || (((126572 <= code) && (code <= 126578)) || (((126580 <= code) && (code <= 126583)) || (((126585 <= code) && (code <= 126588)) || ((code === 126590) || (((126592 <= code) && (code <= 126601)) || (((126603 <= code) && (code <= 126619)) || (((126625 <= code) && (code <= 126627)) || ((126629 <= code) && (code <= 126633)))))))))))) : (((126635 <= code) && (code <= 126651)) || (((127232 <= code) && (code <= 127244)) || (((130032 <= code) && (code <= 130041)) || (((131072 <= code) && (code <= 173791)) || (((173824 <= code) && (code <= 177977)) || (((177984 <= code) && (code <= 178205)) || (((178208 <= code) && (code <= 183969)) || (((183984 <= code) && (code <= 191456)) || (((191472 <= code) && (code <= 192093)) || (((194560 <= code) && (code <= 195101)) || (((196608 <= code) && (code <= 201546)) || ((201552 <= code) && (code <= 205743))))))))))))))))))))))));
};
var $elm$core$String$toLower = _String_toLower;
var $elm$core$String$toUpper = _String_toUpper;
var $stil4m$elm_syntax$Char$Extra$unicodeIsLowerFast = function (c) {
	var code = $elm$core$Char$toCode(c);
	var cString = $elm$core$String$fromChar(c);
	return $stil4m$elm_syntax$Char$Extra$charCodeIsLower(code) || ((_Utils_eq(
		$elm$core$String$toLower(cString),
		cString + '') && (!_Utils_eq(
		$elm$core$String$toUpper(cString),
		cString + ''))) ? ((code <= 836) || (((838 <= code) && (code <= 8559)) || (((8576 <= code) && (code <= 9423)) || ((9450 <= code) && (code <= 983040))))) : ((code < 43001) ? ((code < 8457) ? ((code < 590) ? (((311 <= code) && (code <= 312)) || (((396 <= code) && (code <= 397)) || (((409 <= code) && (code <= 411)) || (((426 <= code) && (code <= 427)) || (((441 <= code) && (code <= 442)) || (((445 <= code) && (code <= 447)) || ((code === 545) || ((563 <= code) && (code <= 569))))))))) : (((591 <= code) && (code <= 659)) || (((661 <= code) && (code <= 687)) || (((1019 <= code) && (code <= 1020)) || (((1376 <= code) && (code <= 1416)) || (((7424 <= code) && (code <= 7467)) || (((7531 <= code) && (code <= 7543)) || (((7545 <= code) && (code <= 7578)) || (((7829 <= code) && (code <= 7837)) || (code === 7839)))))))))) : ((code < 11376) ? ((code === 8458) || (((8462 <= code) && (code <= 8463)) || ((code === 8467) || ((code === 8495) || ((code === 8500) || ((code === 8505) || (((8508 <= code) && (code <= 8509)) || ((8518 <= code) && (code <= 8521))))))))) : ((code === 11377) || (((11379 <= code) && (code <= 11380)) || (((11382 <= code) && (code <= 11387)) || (((11491 <= code) && (code <= 11492)) || (((42799 <= code) && (code <= 42801)) || (((42865 <= code) && (code <= 42872)) || ((code === 42894) || (((42899 <= code) && (code <= 42901)) || ((code === 42927) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && ((42963 <= code) && (code <= 42965)))))))))))))) : ((code < 120353) ? ((code < 119994) ? ((code === 43002) || (((43824 <= code) && (code <= 43866)) || (((43872 <= code) && (code <= 43880)) || (((119834 <= code) && (code <= 119859)) || (((119886 <= code) && (code <= 119892)) || (((119894 <= code) && (code <= 119911)) || (((119938 <= code) && (code <= 119963)) || ((119990 <= code) && (code <= 119993))))))))) : ((code === 119995) || (((119997 <= code) && (code <= 120003)) || (((120005 <= code) && (code <= 120015)) || (((120042 <= code) && (code <= 120067)) || (((120094 <= code) && (code <= 120119)) || (((120146 <= code) && (code <= 120171)) || (((120198 <= code) && (code <= 120223)) || (((120250 <= code) && (code <= 120275)) || ((120302 <= code) && (code <= 120327))))))))))) : ((code < 120655) ? (((120354 <= code) && (code <= 120379)) || (((120406 <= code) && (code <= 120431)) || (((120458 <= code) && (code <= 120485)) || (((120514 <= code) && (code <= 120538)) || (((120540 <= code) && (code <= 120545)) || (((120572 <= code) && (code <= 120596)) || (((120598 <= code) && (code <= 120603)) || ((120630 <= code) && (code <= 120654))))))))) : (((120656 <= code) && (code <= 120661)) || (((120688 <= code) && (code <= 120712)) || (((120714 <= code) && (code <= 120719)) || (((120746 <= code) && (code <= 120770)) || (((120772 <= code) && (code <= 120777)) || ((code === 120779) || (((122624 <= code) && (code <= 122633)) || (((122635 <= code) && (code <= 122654)) || ((122661 <= code) && (code <= 122666))))))))))))));
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode = A4($stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak, $stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Char$Extra$unicodeIsLowerFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast, $stil4m$elm_syntax$Elm$Parser$Tokens$isNotReserved);
var $stil4m$elm_syntax$Elm$Syntax$Expression$GLSLExpression = function (a) {
	return {$: 23, a: a};
};
var $stil4m$elm_syntax$ParserFast$atLeastOneWhile = function (isGood) {
	return function (s0) {
		var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileHelp, isGood, s0.e, s0.bp, s0.da, s0.d, s0.o);
		return (!(s0.e - s1.e)) ? A2(
			$stil4m$elm_syntax$ParserFast$Bad,
			false,
			A2($stil4m$elm_syntax$ParserFast$ExpectingAnyChar, s0.bp, s0.da)) : A2(
			$stil4m$elm_syntax$ParserFast$Good,
			A3($elm$core$String$slice, s0.e, s1.e, s0.d),
			s1);
	};
};
var $stil4m$elm_syntax$ParserFast$loopUntilHelp = F7(
	function (committedSoFar, endParser, element, soFar, reduce, foldedToRes, s0) {
		loopUntilHelp:
		while (true) {
			var parseEnd = endParser;
			var parseElement = element;
			var _v0 = parseEnd(s0);
			if (!_v0.$) {
				var s1 = _v0.b;
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					foldedToRes(soFar),
					s1);
			} else {
				var endCommitted = _v0.a;
				var endX = _v0.b;
				if (endCommitted) {
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, endX);
				} else {
					var _v1 = parseElement(s0);
					if (!_v1.$) {
						var elementResult = _v1.a;
						var s1 = _v1.b;
						var $temp$committedSoFar = true,
							$temp$endParser = endParser,
							$temp$element = element,
							$temp$soFar = A2(reduce, elementResult, soFar),
							$temp$reduce = reduce,
							$temp$foldedToRes = foldedToRes,
							$temp$s0 = s1;
						committedSoFar = $temp$committedSoFar;
						endParser = $temp$endParser;
						element = $temp$element;
						soFar = $temp$soFar;
						reduce = $temp$reduce;
						foldedToRes = $temp$foldedToRes;
						s0 = $temp$s0;
						continue loopUntilHelp;
					} else {
						var elementCommitted = _v1.a;
						var x = _v1.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, committedSoFar || elementCommitted, x);
					}
				}
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$loopUntil = F5(
	function (endParser, element, initialFolded, reduce, foldedToRes) {
		return function (s) {
			return A7($stil4m$elm_syntax$ParserFast$loopUntilHelp, false, endParser, element, initialFolded, reduce, foldedToRes, s);
		};
	});
var $stil4m$elm_syntax$ParserFast$mapWithRange = F2(
	function (combineStartAndResult, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (!_v1.$) {
				var a = _v1.a;
				var s1 = _v1.b;
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					A2(
						combineStartAndResult,
						{
							b9: {a6: s1.da, bp: s1.bp},
							cB: {a6: s0.da, bp: s0.bp}
						},
						a),
					s1);
			} else {
				var committed = _v1.a;
				var x = _v1.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$glslExpressionAfterOpeningSquareBracket = A2(
	$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
	'glsl|',
	A2(
		$stil4m$elm_syntax$ParserFast$mapWithRange,
		F2(
			function (range, s) {
				return {
					gI: $stil4m$elm_syntax$Rope$empty,
					a: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						{
							b9: {a6: range.b9.a6 + 2, bp: range.b9.bp},
							cB: {a6: range.cB.a6 - 6, bp: range.cB.bp}
						},
						$stil4m$elm_syntax$Elm$Syntax$Expression$GLSLExpression(s))
				};
			}),
		A5(
			$stil4m$elm_syntax$ParserFast$loopUntil,
			A2($stil4m$elm_syntax$ParserFast$symbol, '|]', 0),
			A2(
				$stil4m$elm_syntax$ParserFast$oneOf2,
				A2($stil4m$elm_syntax$ParserFast$symbol, '|', '|'),
				$stil4m$elm_syntax$ParserFast$atLeastOneWhile(
					function (c) {
						return c !== '|';
					})),
			'',
			F2(
				function (extension, soFar) {
					return soFar + (extension + '');
				}),
			$elm$core$Basics$identity)));
var $stil4m$elm_syntax$ParserFast$ExpectingKeyword = F3(
	function (a, b, c) {
		return {$: 3, a: a, b: b, c: c};
	});
var $stil4m$elm_syntax$Char$Extra$isLatinAlphaNumOrUnderscoreFast = function (c) {
	var code = $elm$core$Char$toCode(c);
	return $stil4m$elm_syntax$Char$Extra$charCodeIsLower(code) || ($stil4m$elm_syntax$Char$Extra$charCodeIsUpper(code) || ($stil4m$elm_syntax$Char$Extra$charCodeIsDigit(code) || (code === 95)));
};
var $stil4m$elm_syntax$ParserFast$isSubCharAlphaNumOrUnderscore = F2(
	function (offset, string) {
		return A2(
			$elm$core$String$any,
			$stil4m$elm_syntax$Char$Extra$isLatinAlphaNumOrUnderscoreFast,
			A3($elm$core$String$slice, offset, offset + 1, string));
	});
var $stil4m$elm_syntax$ParserFast$keyword = F2(
	function (kwd, res) {
		var kwdLength = $elm$core$String$length(kwd);
		return function (s) {
			var newOffset = s.e + kwdLength;
			return (_Utils_eq(
				A3($elm$core$String$slice, s.e, newOffset, s.d),
				kwd + '') && (!A2($stil4m$elm_syntax$ParserFast$isSubCharAlphaNumOrUnderscore, newOffset, s.d))) ? A2(
				$stil4m$elm_syntax$ParserFast$Good,
				res,
				{da: s.da + kwdLength, o: s.o, e: newOffset, bp: s.bp, d: s.d}) : A2(
				$stil4m$elm_syntax$ParserFast$Bad,
				false,
				A3($stil4m$elm_syntax$ParserFast$ExpectingKeyword, s.bp, s.da, kwd));
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Tokens$inToken = A2($stil4m$elm_syntax$ParserFast$keyword, 'in', 0);
var $stil4m$elm_syntax$ParserFast$keywordFollowedBy = F2(
	function (kwd, _v0) {
		var parseNext = _v0;
		var kwdLength = $elm$core$String$length(kwd);
		return function (s) {
			var newOffset = s.e + kwdLength;
			return (_Utils_eq(
				A3($elm$core$String$slice, s.e, newOffset, s.d),
				kwd + '') && (!A2($stil4m$elm_syntax$ParserFast$isSubCharAlphaNumOrUnderscore, newOffset, s.d))) ? $stil4m$elm_syntax$ParserFast$pStepCommit(
				parseNext(
					{da: s.da + kwdLength, o: s.o, e: newOffset, bp: s.bp, d: s.d})) : A2(
				$stil4m$elm_syntax$ParserFast$Bad,
				false,
				A3($stil4m$elm_syntax$ParserFast$ExpectingKeyword, s.bp, s.da, kwd));
		};
	});
var $stil4m$elm_syntax$ParserFast$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0;
		var parseB = _v1;
		return function (s0) {
			var _v2 = parseA(s0);
			if (_v2.$ === 1) {
				var committed = _v2.a;
				var x = _v2.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var a = _v2.a;
				var s1 = _v2.b;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var x = _v3.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v3.a;
					var s2 = _v3.b;
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						A2(func, a, b),
						s2);
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$columnIndentAndThen = function (callback) {
	return function (s) {
		var _v0 = A2(callback, s.da, s.o);
		var parse = _v0;
		return parse(s);
	};
};
var $stil4m$elm_syntax$ParserFast$ExpectingCustom = F3(
	function (a, b, c) {
		return {$: 6, a: a, b: b, c: c};
	});
var $stil4m$elm_syntax$ParserFast$problem = function (msg) {
	return function (s) {
		return A2(
			$stil4m$elm_syntax$ParserFast$Bad,
			false,
			A3($stil4m$elm_syntax$ParserFast$ExpectingCustom, s.bp, s.da, msg));
	};
};
var $stil4m$elm_syntax$Elm$Parser$Layout$problemTopIndentation = $stil4m$elm_syntax$ParserFast$problem('must be on top indentation');
var $stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy = function (nextParser) {
	return $stil4m$elm_syntax$ParserFast$columnIndentAndThen(
		F2(
			function (column, indent) {
				return (!(column - indent)) ? nextParser : $stil4m$elm_syntax$Elm$Parser$Layout$problemTopIndentation;
			}));
};
var $stil4m$elm_syntax$ParserFast$skipWhileWhitespaceHelp = F5(
	function (offset, row, col, src, indent) {
		skipWhileWhitespaceHelp:
		while (true) {
			var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
			switch (_v0) {
				case ' ':
					var $temp$offset = offset + 1,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$src = src,
						$temp$indent = indent;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					continue skipWhileWhitespaceHelp;
				case '\n':
					var $temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$src = src,
						$temp$indent = indent;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					continue skipWhileWhitespaceHelp;
				case '\u000D':
					var $temp$offset = offset + 1,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$src = src,
						$temp$indent = indent;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					continue skipWhileWhitespaceHelp;
				default:
					return {da: col, o: indent, e: offset, bp: row, d: src};
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$followedBySkipWhileWhitespace = function (_v0) {
	var parseBefore = _v0;
	return function (s0) {
		var _v1 = parseBefore(s0);
		if (!_v1.$) {
			var res = _v1.a;
			var s1 = _v1.b;
			var s2 = A5($stil4m$elm_syntax$ParserFast$skipWhileWhitespaceHelp, s1.e, s1.bp, s1.da, s1.d, s1.o);
			return A2($stil4m$elm_syntax$ParserFast$Good, res, s2);
		} else {
			var bad = _v1;
			return bad;
		}
	};
};
var $stil4m$elm_syntax$ParserFast$map2OrSucceed = F4(
	function (func, _v0, _v1, fallback) {
		var parseA = _v0;
		var parseB = _v1;
		return function (s0) {
			var _v2 = parseA(s0);
			if (_v2.$ === 1) {
				var c1 = _v2.a;
				var x = _v2.b;
				return c1 ? A2($stil4m$elm_syntax$ParserFast$Bad, true, x) : A2($stil4m$elm_syntax$ParserFast$Good, fallback, s0);
			} else {
				var a = _v2.a;
				var s1 = _v2.b;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var x = _v3.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v3.a;
					var s2 = _v3.b;
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						A2(func, a, b),
						s2);
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$offsetSourceAndThen = function (callback) {
	return function (s) {
		var _v0 = A2(callback, s.e, s.d);
		var parse = _v0;
		return parse(s);
	};
};
var $stil4m$elm_syntax$Elm$Parser$Comments$problemUnexpectedDocumentation = $stil4m$elm_syntax$ParserFast$problem('unexpected documentation comment');
var $stil4m$elm_syntax$Elm$Parser$Comments$multilineComment = $stil4m$elm_syntax$ParserFast$offsetSourceAndThen(
	F2(
		function (offset, source) {
			var _v0 = A3($elm$core$String$slice, offset + 2, offset + 3, source);
			if (_v0 === '|') {
				return $stil4m$elm_syntax$Elm$Parser$Comments$problemUnexpectedDocumentation;
			} else {
				return $stil4m$elm_syntax$Elm$Parser$Comments$multiLineCommentNoCheck;
			}
		}));
var $stil4m$elm_syntax$Rope$Leaf = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $stil4m$elm_syntax$Rope$one = function (onlyElement) {
	return A2($stil4m$elm_syntax$Rope$Leaf, onlyElement, 0);
};
var $stil4m$elm_syntax$ParserFast$loopWhileSucceedsHelp = F5(
	function (element, soFar, reduce, foldedToRes, s0) {
		loopWhileSucceedsHelp:
		while (true) {
			var parseElement = element;
			var _v0 = parseElement(s0);
			if (!_v0.$) {
				var elementResult = _v0.a;
				var s1 = _v0.b;
				var $temp$element = element,
					$temp$soFar = A2(reduce, elementResult, soFar),
					$temp$reduce = reduce,
					$temp$foldedToRes = foldedToRes,
					$temp$s0 = s1;
				element = $temp$element;
				soFar = $temp$soFar;
				reduce = $temp$reduce;
				foldedToRes = $temp$foldedToRes;
				s0 = $temp$s0;
				continue loopWhileSucceedsHelp;
			} else {
				var elementCommitted = _v0.a;
				var x = _v0.b;
				return elementCommitted ? A2($stil4m$elm_syntax$ParserFast$Bad, true, x) : A2(
					$stil4m$elm_syntax$ParserFast$Good,
					foldedToRes(soFar),
					s0);
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$loopWhileSucceeds = F4(
	function (element, initialFolded, reduce, foldedToRes) {
		return function (s) {
			return A5($stil4m$elm_syntax$ParserFast$loopWhileSucceedsHelp, element, initialFolded, reduce, foldedToRes, s);
		};
	});
var $stil4m$elm_syntax$Rope$prependToFilled = F2(
	function (rightLikelyFilled, left) {
		if (left.$ === 1) {
			return $elm$core$Maybe$Just(rightLikelyFilled);
		} else {
			var leftLikelyFilled = left.a;
			return $elm$core$Maybe$Just(
				A2($stil4m$elm_syntax$Rope$Branch2, leftLikelyFilled, rightLikelyFilled));
		}
	});
var $stil4m$elm_syntax$ParserFast$whileMapWithRange = F2(
	function (isGood, rangeAndConsumedStringToRes) {
		return function (s0) {
			var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileHelp, isGood, s0.e, s0.bp, s0.da, s0.d, s0.o);
			return A2(
				$stil4m$elm_syntax$ParserFast$Good,
				A2(
					rangeAndConsumedStringToRes,
					{
						b9: {a6: s1.da, bp: s1.bp},
						cB: {a6: s0.da, bp: s0.bp}
					},
					A3($elm$core$String$slice, s0.e, s1.e, s0.d)),
				s1);
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Comments$singleLineComment = A2(
	$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
	'--',
	A2(
		$stil4m$elm_syntax$ParserFast$whileMapWithRange,
		function (c) {
			switch (c) {
				case '\u000D':
					return false;
				case '\n':
					return false;
				default:
					return !$stil4m$elm_syntax$Char$Extra$isUtf16Surrogate(c);
			}
		},
		F2(
			function (range, content) {
				return A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					{
						b9: {a6: range.b9.a6, bp: range.cB.bp},
						cB: {a6: range.cB.a6 - 2, bp: range.cB.bp}
					},
					'--' + content);
			})));
var $stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmptyLoop = A4(
	$stil4m$elm_syntax$ParserFast$loopWhileSucceeds,
	$stil4m$elm_syntax$ParserFast$followedBySkipWhileWhitespace(
		A2($stil4m$elm_syntax$ParserFast$oneOf2, $stil4m$elm_syntax$Elm$Parser$Comments$singleLineComment, $stil4m$elm_syntax$Elm$Parser$Comments$multilineComment)),
	$stil4m$elm_syntax$Rope$empty,
	F2(
		function (right, soFar) {
			return A2(
				$stil4m$elm_syntax$Rope$prependToFilled,
				$stil4m$elm_syntax$Rope$one(right),
				soFar);
		}),
	$elm$core$Basics$identity);
var $stil4m$elm_syntax$Elm$Parser$Layout$fromMultilineCommentNodeOrEmptyOnProblem = A4(
	$stil4m$elm_syntax$ParserFast$map2OrSucceed,
	F2(
		function (comment, commentsAfter) {
			return A2(
				$stil4m$elm_syntax$Rope$filledPrependTo,
				commentsAfter,
				$stil4m$elm_syntax$Rope$one(comment));
		}),
	$stil4m$elm_syntax$ParserFast$followedBySkipWhileWhitespace($stil4m$elm_syntax$Elm$Parser$Comments$multilineComment),
	$stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmptyLoop,
	$stil4m$elm_syntax$Rope$empty);
var $stil4m$elm_syntax$Elm$Parser$Layout$fromSingleLineCommentNode = A3(
	$stil4m$elm_syntax$ParserFast$map2,
	F2(
		function (content, commentsAfter) {
			return A2(
				$stil4m$elm_syntax$Rope$filledPrependTo,
				commentsAfter,
				$stil4m$elm_syntax$Rope$one(content));
		}),
	$stil4m$elm_syntax$ParserFast$followedBySkipWhileWhitespace($stil4m$elm_syntax$Elm$Parser$Comments$singleLineComment),
	$stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmptyLoop);
var $stil4m$elm_syntax$ParserFast$offsetSourceAndThenOrSucceed = F2(
	function (callback, fallback) {
		return function (s) {
			var _v0 = A2(callback, s.e, s.d);
			if (_v0.$ === 1) {
				return A2($stil4m$elm_syntax$ParserFast$Good, fallback, s);
			} else {
				var parse = _v0.a;
				return parse(s);
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$skipWhileWhitespaceFollowedBy = function (_v0) {
	var parseNext = _v0;
	return function (s0) {
		var s1 = A5($stil4m$elm_syntax$ParserFast$skipWhileWhitespaceHelp, s0.e, s0.bp, s0.da, s0.d, s0.o);
		return $stil4m$elm_syntax$ParserFast$pStepCommit(
			parseNext(s1));
	};
};
var $stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmpty = $stil4m$elm_syntax$ParserFast$skipWhileWhitespaceFollowedBy(
	A2(
		$stil4m$elm_syntax$ParserFast$offsetSourceAndThenOrSucceed,
		F2(
			function (offset, source) {
				var _v0 = A3($elm$core$String$slice, offset, offset + 2, source);
				switch (_v0) {
					case '--':
						return $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Parser$Layout$fromSingleLineCommentNode);
					case '{-':
						return $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Parser$Layout$fromMultilineCommentNodeOrEmptyOnProblem);
					default:
						return $elm$core$Maybe$Nothing;
				}
			}),
		$stil4m$elm_syntax$Rope$empty));
var $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout = $stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmpty;
var $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedBy = function (nextParser) {
	return A3(
		$stil4m$elm_syntax$ParserFast$map2,
		F2(
			function (commentsBefore, after) {
				return {gI: commentsBefore, a: after};
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		$stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy(nextParser));
};
var $stil4m$elm_syntax$ParserFast$lazy = function (thunk) {
	return function (s) {
		var _v0 = thunk(0);
		var parse = _v0;
		return parse(s);
	};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Literal = function (a) {
	return {$: 11, a: a};
};
var $stil4m$elm_syntax$ParserFast$atLeastOneWhileWithoutLinebreak = function (isGood) {
	return function (s0) {
		var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp, isGood, s0.e, s0.bp, s0.da, s0.d, s0.o);
		return (!(s0.e - s1.e)) ? A2(
			$stil4m$elm_syntax$ParserFast$Bad,
			false,
			A2($stil4m$elm_syntax$ParserFast$ExpectingAnyChar, s0.bp, s0.da)) : A2(
			$stil4m$elm_syntax$ParserFast$Good,
			A3($elm$core$String$slice, s0.e, s1.e, s0.d),
			s1);
	};
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$singleQuotedStringLiteralAfterDoubleQuote = A5(
	$stil4m$elm_syntax$ParserFast$loopUntil,
	A2($stil4m$elm_syntax$ParserFast$symbol, '\"', 0),
	A2(
		$stil4m$elm_syntax$ParserFast$oneOf2,
		A2(
			$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
			'\\',
			$stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValueMap($elm$core$String$fromChar)),
		$stil4m$elm_syntax$ParserFast$atLeastOneWhileWithoutLinebreak(
			function (c) {
				switch (c) {
					case '\"':
						return false;
					case '\\':
						return false;
					default:
						return !$stil4m$elm_syntax$Char$Extra$isUtf16Surrogate(c);
				}
			})),
	'',
	F2(
		function (extension, soFar) {
			return soFar + (extension + '');
		}),
	$elm$core$Basics$identity);
var $stil4m$elm_syntax$Elm$Parser$Tokens$tripleQuotedStringLiteralOfterTripleDoubleQuote = A5(
	$stil4m$elm_syntax$ParserFast$loopUntil,
	A2($stil4m$elm_syntax$ParserFast$symbol, '\"\"\"', 0),
	A3(
		$stil4m$elm_syntax$ParserFast$oneOf3,
		A2($stil4m$elm_syntax$ParserFast$symbol, '\"', '\"'),
		A2(
			$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
			'\\',
			$stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValueMap($elm$core$String$fromChar)),
		$stil4m$elm_syntax$ParserFast$atLeastOneWhile(
			function (c) {
				switch (c) {
					case '\"':
						return false;
					case '\\':
						return false;
					default:
						return !$stil4m$elm_syntax$Char$Extra$isUtf16Surrogate(c);
				}
			})),
	'',
	F2(
		function (extension, soFar) {
			return soFar + (extension + '');
		}),
	$elm$core$Basics$identity);
var $stil4m$elm_syntax$Elm$Parser$Tokens$singleOrTripleQuotedStringLiteralMapWithRange = function (rangeAndStringToRes) {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'\"',
		A4(
			$stil4m$elm_syntax$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn,
			F5(
				function (startRow, startColumn, string, endRow, endColumn) {
					return A2(
						rangeAndStringToRes,
						{
							b9: {a6: endColumn, bp: endRow},
							cB: {a6: startColumn - 1, bp: startRow}
						},
						string);
				}),
			A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '\"\"', $stil4m$elm_syntax$Elm$Parser$Tokens$tripleQuotedStringLiteralOfterTripleDoubleQuote),
			F5(
				function (startRow, startColumn, string, endRow, endColumn) {
					return A2(
						rangeAndStringToRes,
						{
							b9: {a6: endColumn, bp: endRow},
							cB: {a6: startColumn - 1, bp: startRow}
						},
						string);
				}),
			$stil4m$elm_syntax$Elm$Parser$Tokens$singleQuotedStringLiteralAfterDoubleQuote));
};
var $stil4m$elm_syntax$Elm$Parser$Expression$literalExpression = $stil4m$elm_syntax$Elm$Parser$Tokens$singleOrTripleQuotedStringLiteralMapWithRange(
	F2(
		function (range, string) {
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Expression$Literal(string))
			};
		}));
var $stil4m$elm_syntax$ParserFast$loopWhileSucceedsOntoResultFromParser = F4(
	function (element, _v0, reduce, foldedToRes) {
		var parseInitialFolded = _v0;
		return function (s0) {
			var _v1 = parseInitialFolded(s0);
			if (!_v1.$) {
				var initialFolded = _v1.a;
				var s1 = _v1.b;
				return A5($stil4m$elm_syntax$ParserFast$loopWhileSucceedsHelp, element, initialFolded, reduce, foldedToRes, s1);
			} else {
				var committed = _v1.a;
				var x = _v1.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			}
		};
	});
var $stil4m$elm_syntax$Rope$prependTo = F2(
	function (right, left) {
		if (left.$ === 1) {
			return right;
		} else {
			var leftLikelyFilled = left.a;
			if (right.$ === 1) {
				return left;
			} else {
				var rightLikelyFilled = right.a;
				return $elm$core$Maybe$Just(
					A2($stil4m$elm_syntax$Rope$Branch2, leftLikelyFilled, rightLikelyFilled));
			}
		}
	});
var $stil4m$elm_syntax$ParserWithComments$many = function (p) {
	return A4(
		$stil4m$elm_syntax$ParserFast$loopWhileSucceeds,
		p,
		_Utils_Tuple2($stil4m$elm_syntax$Rope$empty, _List_Nil),
		F2(
			function (pResult, _v0) {
				var commentsSoFar = _v0.a;
				var itemsSoFar = _v0.b;
				return _Utils_Tuple2(
					A2($stil4m$elm_syntax$Rope$prependTo, pResult.gI, commentsSoFar),
					A2($elm$core$List$cons, pResult.a, itemsSoFar));
			}),
		function (_v1) {
			var commentsSoFar = _v1.a;
			var itemsSoFar = _v1.b;
			return {
				gI: commentsSoFar,
				a: $elm$core$List$reverse(itemsSoFar)
			};
		});
};
var $stil4m$elm_syntax$ParserWithComments$manyWithoutReverse = function (p) {
	return A4(
		$stil4m$elm_syntax$ParserFast$loopWhileSucceeds,
		p,
		_Utils_Tuple2($stil4m$elm_syntax$Rope$empty, _List_Nil),
		F2(
			function (pResult, _v0) {
				var commentsSoFar = _v0.a;
				var itemsSoFar = _v0.b;
				return _Utils_Tuple2(
					A2($stil4m$elm_syntax$Rope$prependTo, pResult.gI, commentsSoFar),
					A2($elm$core$List$cons, pResult.a, itemsSoFar));
			}),
		function (_v1) {
			var commentsSoFar = _v1.a;
			var itemsSoFar = _v1.b;
			return {gI: commentsSoFar, a: itemsSoFar};
		});
};
var $stil4m$elm_syntax$ParserFast$map = F2(
	function (func, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (!_v1.$) {
				var a = _v1.a;
				var s1 = _v1.b;
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					func(a),
					s1);
			} else {
				var committed = _v1.a;
				var x = _v1.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$map3 = F4(
	function (func, _v0, _v1, _v2) {
		var parseA = _v0;
		var parseB = _v1;
		var parseC = _v2;
		return function (s0) {
			var _v3 = parseA(s0);
			if (_v3.$ === 1) {
				var committed = _v3.a;
				var x = _v3.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var a = _v3.a;
				var s1 = _v3.b;
				var _v4 = parseB(s1);
				if (_v4.$ === 1) {
					var x = _v4.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v4.a;
					var s2 = _v4.b;
					var _v5 = parseC(s2);
					if (_v5.$ === 1) {
						var x = _v5.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var c = _v5.a;
						var s3 = _v5.b;
						return A2(
							$stil4m$elm_syntax$ParserFast$Good,
							A3(func, a, b, c),
							s3);
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$map3WithStartLocation = F4(
	function (func, _v0, _v1, _v2) {
		var parseA = _v0;
		var parseB = _v1;
		var parseC = _v2;
		return function (s0) {
			var _v3 = parseA(s0);
			if (_v3.$ === 1) {
				var committed = _v3.a;
				var x = _v3.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var a = _v3.a;
				var s1 = _v3.b;
				var _v4 = parseB(s1);
				if (_v4.$ === 1) {
					var x = _v4.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v4.a;
					var s2 = _v4.b;
					var _v5 = parseC(s2);
					if (_v5.$ === 1) {
						var x = _v5.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var c = _v5.a;
						var s3 = _v5.b;
						return A2(
							$stil4m$elm_syntax$ParserFast$Good,
							A4(
								func,
								{a6: s0.da, bp: s0.bp},
								a,
								b,
								c),
							s3);
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$map4 = F5(
	function (func, _v0, _v1, _v2, _v3) {
		var parseA = _v0;
		var parseB = _v1;
		var parseC = _v2;
		var parseD = _v3;
		return function (s0) {
			var _v4 = parseA(s0);
			if (_v4.$ === 1) {
				var committed = _v4.a;
				var x = _v4.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var a = _v4.a;
				var s1 = _v4.b;
				var _v5 = parseB(s1);
				if (_v5.$ === 1) {
					var x = _v5.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v5.a;
					var s2 = _v5.b;
					var _v6 = parseC(s2);
					if (_v6.$ === 1) {
						var x = _v6.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var c = _v6.a;
						var s3 = _v6.b;
						var _v7 = parseD(s3);
						if (_v7.$ === 1) {
							var x = _v7.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var d = _v7.a;
							var s4 = _v7.b;
							return A2(
								$stil4m$elm_syntax$ParserFast$Good,
								A4(func, a, b, c, d),
								s4);
						}
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$map4OrSucceed = F6(
	function (func, _v0, _v1, _v2, _v3, fallback) {
		var parseA = _v0;
		var parseB = _v1;
		var parseC = _v2;
		var parseD = _v3;
		return function (s0) {
			var _v4 = parseA(s0);
			if (_v4.$ === 1) {
				var c1 = _v4.a;
				var x = _v4.b;
				return c1 ? A2($stil4m$elm_syntax$ParserFast$Bad, true, x) : A2($stil4m$elm_syntax$ParserFast$Good, fallback, s0);
			} else {
				var a = _v4.a;
				var s1 = _v4.b;
				var _v5 = parseB(s1);
				if (_v5.$ === 1) {
					var x = _v5.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v5.a;
					var s2 = _v5.b;
					var _v6 = parseC(s2);
					if (_v6.$ === 1) {
						var x = _v6.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var c = _v6.a;
						var s3 = _v6.b;
						var _v7 = parseD(s3);
						if (_v7.$ === 1) {
							var x = _v7.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var d = _v7.a;
							var s4 = _v7.b;
							return A2(
								$stil4m$elm_syntax$ParserFast$Good,
								A4(func, a, b, c, d),
								s4);
						}
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$map4WithRange = F5(
	function (func, _v0, _v1, _v2, _v3) {
		var parseA = _v0;
		var parseB = _v1;
		var parseC = _v2;
		var parseD = _v3;
		return function (s0) {
			var _v4 = parseA(s0);
			if (_v4.$ === 1) {
				var committed = _v4.a;
				var x = _v4.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var a = _v4.a;
				var s1 = _v4.b;
				var _v5 = parseB(s1);
				if (_v5.$ === 1) {
					var x = _v5.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v5.a;
					var s2 = _v5.b;
					var _v6 = parseC(s2);
					if (_v6.$ === 1) {
						var x = _v6.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var c = _v6.a;
						var s3 = _v6.b;
						var _v7 = parseD(s3);
						if (_v7.$ === 1) {
							var x = _v7.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var d = _v7.a;
							var s4 = _v7.b;
							return A2(
								$stil4m$elm_syntax$ParserFast$Good,
								A5(
									func,
									{
										b9: {a6: s4.da, bp: s4.bp},
										cB: {a6: s0.da, bp: s0.bp}
									},
									a,
									b,
									c,
									d),
								s4);
						}
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$map5 = F6(
	function (func, _v0, _v1, _v2, _v3, _v4) {
		var parseA = _v0;
		var parseB = _v1;
		var parseC = _v2;
		var parseD = _v3;
		var parseE = _v4;
		return function (s0) {
			var _v5 = parseA(s0);
			if (_v5.$ === 1) {
				var committed = _v5.a;
				var x = _v5.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var a = _v5.a;
				var s1 = _v5.b;
				var _v6 = parseB(s1);
				if (_v6.$ === 1) {
					var x = _v6.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v6.a;
					var s2 = _v6.b;
					var _v7 = parseC(s2);
					if (_v7.$ === 1) {
						var x = _v7.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var c = _v7.a;
						var s3 = _v7.b;
						var _v8 = parseD(s3);
						if (_v8.$ === 1) {
							var x = _v8.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var d = _v8.a;
							var s4 = _v8.b;
							var _v9 = parseE(s4);
							if (_v9.$ === 1) {
								var x = _v9.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var e = _v9.a;
								var s5 = _v9.b;
								return A2(
									$stil4m$elm_syntax$ParserFast$Good,
									A5(func, a, b, c, d, e),
									s5);
							}
						}
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$map5WithRange = F6(
	function (func, _v0, _v1, _v2, _v3, _v4) {
		var parseA = _v0;
		var parseB = _v1;
		var parseC = _v2;
		var parseD = _v3;
		var parseE = _v4;
		return function (s0) {
			var _v5 = parseA(s0);
			if (_v5.$ === 1) {
				var committed = _v5.a;
				var x = _v5.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var a = _v5.a;
				var s1 = _v5.b;
				var _v6 = parseB(s1);
				if (_v6.$ === 1) {
					var x = _v6.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v6.a;
					var s2 = _v6.b;
					var _v7 = parseC(s2);
					if (_v7.$ === 1) {
						var x = _v7.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var c = _v7.a;
						var s3 = _v7.b;
						var _v8 = parseD(s3);
						if (_v8.$ === 1) {
							var x = _v8.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var d = _v8.a;
							var s4 = _v8.b;
							var _v9 = parseE(s4);
							if (_v9.$ === 1) {
								var x = _v9.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var e = _v9.a;
								var s5 = _v9.b;
								return A2(
									$stil4m$elm_syntax$ParserFast$Good,
									A6(
										func,
										{
											b9: {a6: s5.da, bp: s5.bp},
											cB: {a6: s0.da, bp: s0.bp}
										},
										a,
										b,
										c,
										d,
										e),
									s5);
							}
						}
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$map5WithStartLocation = F6(
	function (func, _v0, _v1, _v2, _v3, _v4) {
		var parseA = _v0;
		var parseB = _v1;
		var parseC = _v2;
		var parseD = _v3;
		var parseE = _v4;
		return function (s0) {
			var _v5 = parseA(s0);
			if (_v5.$ === 1) {
				var committed = _v5.a;
				var x = _v5.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var a = _v5.a;
				var s1 = _v5.b;
				var _v6 = parseB(s1);
				if (_v6.$ === 1) {
					var x = _v6.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v6.a;
					var s2 = _v6.b;
					var _v7 = parseC(s2);
					if (_v7.$ === 1) {
						var x = _v7.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var c = _v7.a;
						var s3 = _v7.b;
						var _v8 = parseD(s3);
						if (_v8.$ === 1) {
							var x = _v8.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var d = _v8.a;
							var s4 = _v8.b;
							var _v9 = parseE(s4);
							if (_v9.$ === 1) {
								var x = _v9.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var e = _v9.a;
								var s5 = _v9.b;
								return A2(
									$stil4m$elm_syntax$ParserFast$Good,
									A6(
										func,
										{a6: s0.da, bp: s0.bp},
										a,
										b,
										c,
										d,
										e),
									s5);
							}
						}
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$map6WithStartLocation = F7(
	function (func, _v0, _v1, _v2, _v3, _v4, _v5) {
		var parseA = _v0;
		var parseB = _v1;
		var parseC = _v2;
		var parseD = _v3;
		var parseE = _v4;
		var parseF = _v5;
		return function (s0) {
			var _v6 = parseA(s0);
			if (_v6.$ === 1) {
				var committed = _v6.a;
				var x = _v6.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var a = _v6.a;
				var s1 = _v6.b;
				var _v7 = parseB(s1);
				if (_v7.$ === 1) {
					var x = _v7.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v7.a;
					var s2 = _v7.b;
					var _v8 = parseC(s2);
					if (_v8.$ === 1) {
						var x = _v8.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var c = _v8.a;
						var s3 = _v8.b;
						var _v9 = parseD(s3);
						if (_v9.$ === 1) {
							var x = _v9.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var d = _v9.a;
							var s4 = _v9.b;
							var _v10 = parseE(s4);
							if (_v10.$ === 1) {
								var x = _v10.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var e = _v10.a;
								var s5 = _v10.b;
								var _v11 = parseF(s5);
								if (_v11.$ === 1) {
									var x = _v11.b;
									return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
								} else {
									var f = _v11.a;
									var s6 = _v11.b;
									return A2(
										$stil4m$elm_syntax$ParserFast$Good,
										A7(
											func,
											{a6: s0.da, bp: s0.bp},
											a,
											b,
											c,
											d,
											e,
											f),
										s6);
								}
							}
						}
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$map8WithStartLocation = F9(
	function (func, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
		var parseA = _v0;
		var parseB = _v1;
		var parseC = _v2;
		var parseD = _v3;
		var parseE = _v4;
		var parseF = _v5;
		var parseG = _v6;
		var parseH = _v7;
		return function (s0) {
			var _v8 = parseA(s0);
			if (_v8.$ === 1) {
				var committed = _v8.a;
				var x = _v8.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var a = _v8.a;
				var s1 = _v8.b;
				var _v9 = parseB(s1);
				if (_v9.$ === 1) {
					var x = _v9.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v9.a;
					var s2 = _v9.b;
					var _v10 = parseC(s2);
					if (_v10.$ === 1) {
						var x = _v10.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var c = _v10.a;
						var s3 = _v10.b;
						var _v11 = parseD(s3);
						if (_v11.$ === 1) {
							var x = _v11.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var d = _v11.a;
							var s4 = _v11.b;
							var _v12 = parseE(s4);
							if (_v12.$ === 1) {
								var x = _v12.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var e = _v12.a;
								var s5 = _v12.b;
								var _v13 = parseF(s5);
								if (_v13.$ === 1) {
									var x = _v13.b;
									return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
								} else {
									var f = _v13.a;
									var s6 = _v13.b;
									var _v14 = parseG(s6);
									if (_v14.$ === 1) {
										var x = _v14.b;
										return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
									} else {
										var g = _v14.a;
										var s7 = _v14.b;
										var _v15 = parseH(s7);
										if (_v15.$ === 1) {
											var x = _v15.b;
											return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
										} else {
											var h = _v15.a;
											var s8 = _v15.b;
											return A2(
												$stil4m$elm_syntax$ParserFast$Good,
												A9(
													func,
													{a6: s0.da, bp: s0.bp},
													a,
													b,
													c,
													d,
													e,
													f,
													g,
													h),
												s8);
										}
									}
								}
							}
						}
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$validateEndColumnIndentation = F3(
	function (isOkay, problemOnIsNotOkay, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (!_v1.$) {
				var good = _v1;
				var s1 = good.b;
				return A2(isOkay, s1.da, s1.o) ? good : A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					true,
					A3($stil4m$elm_syntax$ParserFast$ExpectingCustom, s1.bp, s1.da, problemOnIsNotOkay));
			} else {
				var bad = _v1;
				return bad;
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Layout$endsPositivelyIndented = function (parser) {
	return A3(
		$stil4m$elm_syntax$ParserFast$validateEndColumnIndentation,
		F2(
			function (column, indent) {
				return _Utils_cmp(column, indent) > 0;
			}),
		'must be positively indented',
		parser);
};
var $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout = $stil4m$elm_syntax$Elm$Parser$Layout$endsPositivelyIndented($stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmpty);
var $stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides = function (x) {
	return A4(
		$stil4m$elm_syntax$ParserFast$map3,
		F3(
			function (before, v, after) {
				return {
					gI: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						after,
						A2($stil4m$elm_syntax$Rope$prependTo, v.gI, before)),
					a: v.a
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		x,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout);
};
var $stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccess = A4(
	$stil4m$elm_syntax$ParserFast$loopWhileSucceeds,
	A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '.', $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode),
	_List_Nil,
	$elm$core$List$cons,
	$elm$core$List$reverse);
var $stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccessMap = function (fieldsToRes) {
	return A4(
		$stil4m$elm_syntax$ParserFast$loopWhileSucceeds,
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '.', $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode),
		_List_Nil,
		$elm$core$List$cons,
		function (reversed) {
			return fieldsToRes(
				$elm$core$List$reverse(reversed));
		});
};
var $stil4m$elm_syntax$Elm$Parser$Expression$negationWhitespaceProblem = $stil4m$elm_syntax$ParserFast$problem('if a negation sign is not preceded by whitespace, it\'s considered subtraction');
var $stil4m$elm_syntax$Elm$Parser$Tokens$equal = A2($stil4m$elm_syntax$ParserFast$symbol, '=', 0);
var $stil4m$elm_syntax$Elm$Syntax$Pattern$AsPattern = F2(
	function (a, b) {
		return {$: 13, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern = function (a) {
	return {$: 10, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern = F2(
	function (a, b) {
		return {$: 12, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern = function (a) {
	return {$: 14, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithAs = function (a) {
	return {$: 1, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithCons = function (a) {
	return {$: 2, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithNothing = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern = function (a) {
	return {$: 7, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern = F2(
	function (a, b) {
		return {$: 9, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$UnitPattern = {$: 1};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern = {$: 0};
var $stil4m$elm_syntax$ParserFast$symbolWithRange = F2(
	function (str, startAndEndLocationToRes) {
		var strLength = $elm$core$String$length(str);
		return function (s) {
			var newOffset = s.e + strLength;
			if (_Utils_eq(
				A3($elm$core$String$slice, s.e, newOffset, s.d),
				str + '')) {
				var newCol = s.da + strLength;
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					startAndEndLocationToRes(
						{
							b9: {a6: newCol, bp: s.bp},
							cB: {a6: s.da, bp: s.bp}
						}),
					{da: newCol, o: s.o, e: newOffset, bp: s.bp, d: s.d});
			} else {
				return A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A3($stil4m$elm_syntax$ParserFast$ExpectingSymbol, s.bp, s.da, str));
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Patterns$allPattern = A2(
	$stil4m$elm_syntax$ParserFast$symbolWithRange,
	'_',
	function (range) {
		return {
			gI: $stil4m$elm_syntax$Rope$empty,
			a: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, $stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern)
		};
	});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$CharPattern = function (a) {
	return {$: 2, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$charPattern = $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteralMapWithRange(
	F2(
		function (range, _char) {
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Pattern$CharPattern(_char))
			};
		}));
var $stil4m$elm_syntax$Elm$Syntax$Pattern$HexPattern = function (a) {
	return {$: 5, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$IntPattern = function (a) {
	return {$: 4, a: a};
};
var $stil4m$elm_syntax$ParserFast$ExpectingNumber = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $stil4m$elm_syntax$ParserFast$Decimal = 0;
var $stil4m$elm_syntax$ParserFast$Hexadecimal = 1;
var $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s = F3(
	function (soFar, offset, src) {
		convert0OrMore0To9s:
		while (true) {
			var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
			switch (_v0) {
				case '0':
					var $temp$soFar = soFar * 10,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '1':
					var $temp$soFar = (soFar * 10) + 1,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '2':
					var $temp$soFar = (soFar * 10) + 2,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '3':
					var $temp$soFar = (soFar * 10) + 3,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '4':
					var $temp$soFar = (soFar * 10) + 4,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '5':
					var $temp$soFar = (soFar * 10) + 5,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '6':
					var $temp$soFar = (soFar * 10) + 6,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '7':
					var $temp$soFar = (soFar * 10) + 7,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '8':
					var $temp$soFar = (soFar * 10) + 8,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '9':
					var $temp$soFar = (soFar * 10) + 9,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				default:
					return {fx: soFar, e: offset};
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal = F3(
	function (soFar, offset, src) {
		convert0OrMoreHexadecimal:
		while (true) {
			var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
			switch (_v0) {
				case '0':
					var $temp$soFar = soFar * 16,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '1':
					var $temp$soFar = (soFar * 16) + 1,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '2':
					var $temp$soFar = (soFar * 16) + 2,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '3':
					var $temp$soFar = (soFar * 16) + 3,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '4':
					var $temp$soFar = (soFar * 16) + 4,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '5':
					var $temp$soFar = (soFar * 16) + 5,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '6':
					var $temp$soFar = (soFar * 16) + 6,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '7':
					var $temp$soFar = (soFar * 16) + 7,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '8':
					var $temp$soFar = (soFar * 16) + 8,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '9':
					var $temp$soFar = (soFar * 16) + 9,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'a':
					var $temp$soFar = (soFar * 16) + 10,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'A':
					var $temp$soFar = (soFar * 16) + 10,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'b':
					var $temp$soFar = (soFar * 16) + 11,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'B':
					var $temp$soFar = (soFar * 16) + 11,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'c':
					var $temp$soFar = (soFar * 16) + 12,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'C':
					var $temp$soFar = (soFar * 16) + 12,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'd':
					var $temp$soFar = (soFar * 16) + 13,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'D':
					var $temp$soFar = (soFar * 16) + 13,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'e':
					var $temp$soFar = (soFar * 16) + 14,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'E':
					var $temp$soFar = (soFar * 16) + 14,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'f':
					var $temp$soFar = (soFar * 16) + 15,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'F':
					var $temp$soFar = (soFar * 16) + 15,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				default:
					return {fx: soFar, e: offset};
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$convert1OrMoreHexadecimal = F2(
	function (offset, src) {
		var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
		switch (_v0) {
			case '0':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 0, offset + 1, src);
			case '1':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 1, offset + 1, src);
			case '2':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 2, offset + 1, src);
			case '3':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 3, offset + 1, src);
			case '4':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 4, offset + 1, src);
			case '5':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 5, offset + 1, src);
			case '6':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 6, offset + 1, src);
			case '7':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 7, offset + 1, src);
			case '8':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 8, offset + 1, src);
			case '9':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 9, offset + 1, src);
			case 'a':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 10, offset + 1, src);
			case 'A':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 10, offset + 1, src);
			case 'b':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 11, offset + 1, src);
			case 'B':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 11, offset + 1, src);
			case 'c':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 12, offset + 1, src);
			case 'C':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 12, offset + 1, src);
			case 'd':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 13, offset + 1, src);
			case 'D':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 13, offset + 1, src);
			case 'e':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 14, offset + 1, src);
			case 'E':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 14, offset + 1, src);
			case 'f':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 15, offset + 1, src);
			case 'F':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 15, offset + 1, src);
			default:
				return {fx: 0, e: -1};
		}
	});
var $stil4m$elm_syntax$ParserFast$errorAsBaseOffsetAndInt = {
	X: 0,
	s: {fx: 0, e: -1}
};
var $stil4m$elm_syntax$ParserFast$convertIntegerDecimalOrHexadecimal = F2(
	function (offset, src) {
		var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
		switch (_v0) {
			case '0':
				var _v1 = A3($elm$core$String$slice, offset + 1, offset + 2, src);
				if (_v1 === 'x') {
					var hex = A2($stil4m$elm_syntax$ParserFast$convert1OrMoreHexadecimal, offset + 2, src);
					return {
						X: 1,
						s: {fx: hex.fx, e: hex.e}
					};
				} else {
					return {
						X: 0,
						s: {fx: 0, e: offset + 1}
					};
				}
			case '1':
				return {
					X: 0,
					s: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 1, offset + 1, src)
				};
			case '2':
				return {
					X: 0,
					s: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 2, offset + 1, src)
				};
			case '3':
				return {
					X: 0,
					s: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 3, offset + 1, src)
				};
			case '4':
				return {
					X: 0,
					s: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 4, offset + 1, src)
				};
			case '5':
				return {
					X: 0,
					s: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 5, offset + 1, src)
				};
			case '6':
				return {
					X: 0,
					s: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 6, offset + 1, src)
				};
			case '7':
				return {
					X: 0,
					s: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 7, offset + 1, src)
				};
			case '8':
				return {
					X: 0,
					s: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 8, offset + 1, src)
				};
			case '9':
				return {
					X: 0,
					s: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 9, offset + 1, src)
				};
			default:
				return $stil4m$elm_syntax$ParserFast$errorAsBaseOffsetAndInt;
		}
	});
var $stil4m$elm_syntax$ParserFast$integerDecimalOrHexadecimalMapWithRange = F2(
	function (rangeAndIntDecimalToRes, rangeAndIntHexadecimalToRes) {
		return function (s0) {
			var s1 = A2($stil4m$elm_syntax$ParserFast$convertIntegerDecimalOrHexadecimal, s0.e, s0.d);
			if (_Utils_eq(s1.s.e, -1)) {
				return A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A2($stil4m$elm_syntax$ParserFast$ExpectingNumber, s0.bp, s0.da));
			} else {
				var newColumn = s0.da + (s1.s.e - s0.e);
				var range = {
					b9: {a6: newColumn, bp: s0.bp},
					cB: {a6: s0.da, bp: s0.bp}
				};
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					function () {
						var _v0 = s1.X;
						if (!_v0) {
							return A2(rangeAndIntDecimalToRes, range, s1.s.fx);
						} else {
							return A2(rangeAndIntHexadecimalToRes, range, s1.s.fx);
						}
					}(),
					{da: newColumn, o: s0.o, e: s1.s.e, bp: s0.bp, d: s0.d});
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Patterns$numberPart = A2(
	$stil4m$elm_syntax$ParserFast$integerDecimalOrHexadecimalMapWithRange,
	F2(
		function (range, n) {
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Pattern$IntPattern(n))
			};
		}),
	F2(
		function (range, n) {
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Pattern$HexPattern(n))
			};
		}));
var $stil4m$elm_syntax$ParserFast$oneOf2OrSucceed = F3(
	function (_v0, _v1, thirdRes) {
		var attemptFirst = _v0;
		var attemptSecond = _v1;
		return function (s) {
			var _v2 = attemptFirst(s);
			if (!_v2.$) {
				var firstGood = _v2;
				return firstGood;
			} else {
				var firstBad = _v2;
				var firstCommitted = firstBad.a;
				if (firstCommitted) {
					return firstBad;
				} else {
					var _v3 = attemptSecond(s);
					if (!_v3.$) {
						var secondGood = _v3;
						return secondGood;
					} else {
						var secondBad = _v3;
						var secondCommitted = secondBad.a;
						return secondCommitted ? secondBad : A2($stil4m$elm_syntax$ParserFast$Good, thirdRes, s);
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$oneOf9 = F9(
	function (_v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8) {
		var attempt0 = _v0;
		var attempt1 = _v1;
		var attempt2 = _v2;
		var attempt3 = _v3;
		var attempt4 = _v4;
		var attempt5 = _v5;
		var attempt6 = _v6;
		var attempt7 = _v7;
		var attempt8 = _v8;
		return function (s) {
			var _v9 = attempt0(s);
			if (!_v9.$) {
				var good = _v9;
				return good;
			} else {
				var bad0 = _v9;
				var committed0 = bad0.a;
				var x0 = bad0.b;
				if (committed0) {
					return bad0;
				} else {
					var _v10 = attempt1(s);
					if (!_v10.$) {
						var good = _v10;
						return good;
					} else {
						var bad1 = _v10;
						var committed1 = bad1.a;
						var x1 = bad1.b;
						if (committed1) {
							return bad1;
						} else {
							var _v11 = attempt2(s);
							if (!_v11.$) {
								var good = _v11;
								return good;
							} else {
								var bad2 = _v11;
								var committed2 = bad2.a;
								var x2 = bad2.b;
								if (committed2) {
									return bad2;
								} else {
									var _v12 = attempt3(s);
									if (!_v12.$) {
										var good = _v12;
										return good;
									} else {
										var bad3 = _v12;
										var committed3 = bad3.a;
										var x3 = bad3.b;
										if (committed3) {
											return bad3;
										} else {
											var _v13 = attempt4(s);
											if (!_v13.$) {
												var good = _v13;
												return good;
											} else {
												var bad4 = _v13;
												var committed4 = bad4.a;
												var x4 = bad4.b;
												if (committed4) {
													return bad4;
												} else {
													var _v14 = attempt5(s);
													if (!_v14.$) {
														var good = _v14;
														return good;
													} else {
														var bad5 = _v14;
														var committed5 = bad5.a;
														var x5 = bad5.b;
														if (committed5) {
															return bad5;
														} else {
															var _v15 = attempt6(s);
															if (!_v15.$) {
																var good = _v15;
																return good;
															} else {
																var bad6 = _v15;
																var committed6 = bad6.a;
																var x6 = bad6.b;
																if (committed6) {
																	return bad6;
																} else {
																	var _v16 = attempt7(s);
																	if (!_v16.$) {
																		var good = _v16;
																		return good;
																	} else {
																		var bad7 = _v16;
																		var committed7 = bad7.a;
																		var x7 = bad7.b;
																		if (committed7) {
																			return bad7;
																		} else {
																			var _v17 = attempt8(s);
																			if (!_v17.$) {
																				var good = _v17;
																				return good;
																			} else {
																				var bad8 = _v17;
																				var committed8 = bad8.a;
																				var x8 = bad8.b;
																				return committed8 ? bad8 : A2(
																					$stil4m$elm_syntax$ParserFast$Bad,
																					false,
																					A3(
																						$stil4m$elm_syntax$ParserFast$ExpectingOneOf,
																						x0,
																						x1,
																						_List_fromArray(
																							[x2, x3, x4, x5, x6, x7, x8])));
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Patterns$patternListEmpty = $stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern(_List_Nil);
var $stil4m$elm_syntax$Elm$Parser$Layout$problemPositivelyIndented = $stil4m$elm_syntax$ParserFast$problem('must be positively indented');
var $stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy = function (nextParser) {
	return $stil4m$elm_syntax$ParserFast$columnIndentAndThen(
		F2(
			function (column, indent) {
				return (_Utils_cmp(column, indent) > 0) ? nextParser : $stil4m$elm_syntax$Elm$Parser$Layout$problemPositivelyIndented;
			}));
};
var $stil4m$elm_syntax$ParserFast$ifFollowedByWhileWithoutLinebreak = F2(
	function (firstIsOkay, afterFirstIsOkay) {
		return function (s) {
			var firstOffset = A3($stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak, firstIsOkay, s.e, s.d);
			if (_Utils_eq(firstOffset, -1)) {
				return A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A2($stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate, s.bp, s.da));
			} else {
				var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp, afterFirstIsOkay, firstOffset, s.bp, s.da + 1, s.d, s.o);
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					A3($elm$core$String$slice, s.e, s1.e, s.d),
					s1);
			}
		};
	});
var $stil4m$elm_syntax$Char$Extra$unicodeIsUpperFast = function (c) {
	var code = $elm$core$Char$toCode(c);
	return $stil4m$elm_syntax$Char$Extra$charCodeIsUpper(code) || function () {
		var cString = $elm$core$String$fromChar(c);
		return (_Utils_eq(
			$elm$core$String$toUpper(cString),
			cString + '') && (!_Utils_eq(
			$elm$core$String$toLower(cString),
			cString + ''))) ? ((code <= 8543) || (((8560 <= code) && (code <= 9397)) || ((9424 <= code) && (code <= 983040)))) : ((code < 120015) ? ((code < 8509) ? (((978 <= code) && (code <= 980)) || ((code === 8450) || ((code === 8455) || (((8459 <= code) && (code <= 8461)) || (((8464 <= code) && (code <= 8466)) || ((code === 8469) || (((8473 <= code) && (code <= 8477)) || ((code === 8484) || ((code === 8488) || (((8490 <= code) && (code <= 8493)) || ((8496 <= code) && (code <= 8499)))))))))))) : (((8510 <= code) && (code <= 8511)) || ((code === 8517) || (((119808 <= code) && (code <= 119833)) || (((119860 <= code) && (code <= 119885)) || (((119912 <= code) && (code <= 119937)) || ((code === 119964) || (((119966 <= code) && (code <= 119967)) || ((code === 119970) || (((119973 <= code) && (code <= 119974)) || (((119977 <= code) && (code <= 119980)) || ((119982 <= code) && (code <= 119989))))))))))))) : ((code < 120223) ? (((120016 <= code) && (code <= 120041)) || (((120068 <= code) && (code <= 120069)) || (((120071 <= code) && (code <= 120074)) || (((120077 <= code) && (code <= 120084)) || (((120086 <= code) && (code <= 120092)) || (((120120 <= code) && (code <= 120121)) || (((120123 <= code) && (code <= 120126)) || (((120128 <= code) && (code <= 120132)) || ((code === 120134) || (((120138 <= code) && (code <= 120144)) || ((120172 <= code) && (code <= 120197)))))))))))) : (((120224 <= code) && (code <= 120249)) || (((120276 <= code) && (code <= 120301)) || (((120328 <= code) && (code <= 120353)) || (((120380 <= code) && (code <= 120405)) || (((120432 <= code) && (code <= 120457)) || (((120488 <= code) && (code <= 120512)) || (((120546 <= code) && (code <= 120570)) || (((120604 <= code) && (code <= 120628)) || (((120662 <= code) && (code <= 120686)) || (((120720 <= code) && (code <= 120744)) || (code === 120778)))))))))))));
	}();
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$typeName = A2($stil4m$elm_syntax$ParserFast$ifFollowedByWhileWithoutLinebreak, $stil4m$elm_syntax$Char$Extra$unicodeIsUpperFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast);
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeDotTypeNamesTuple() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map2OrSucceed,
		F2(
			function (startName, afterStartName) {
				if (afterStartName.$ === 1) {
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(_List_Nil, startName));
				} else {
					var _v1 = afterStartName.a;
					var qualificationAfter = _v1.a;
					var unqualified = _v1.b;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A2($elm$core$List$cons, startName, qualificationAfter),
							unqualified));
				}
			}),
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '.', $stil4m$elm_syntax$Elm$Parser$Tokens$typeName),
		$stil4m$elm_syntax$ParserFast$lazy(
			function (_v2) {
				return $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeDotTypeNamesTuple();
			}),
		$elm$core$Maybe$Nothing);
}
var $stil4m$elm_syntax$Elm$Parser$Patterns$maybeDotTypeNamesTuple = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeDotTypeNamesTuple();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeDotTypeNamesTuple = function () {
	return $stil4m$elm_syntax$Elm$Parser$Patterns$maybeDotTypeNamesTuple;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedNameRefNode = A3(
	$stil4m$elm_syntax$ParserFast$map2WithRange,
	F3(
		function (range, firstName, after) {
			return A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				range,
				function () {
					if (after.$ === 1) {
						return {dE: _List_Nil, bV: firstName};
					} else {
						var _v1 = after.a;
						var qualificationAfter = _v1.a;
						var unqualified = _v1.b;
						return {
							dE: A2($elm$core$List$cons, firstName, qualificationAfter),
							bV: unqualified
						};
					}
				}());
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeName,
	$stil4m$elm_syntax$Elm$Parser$Patterns$maybeDotTypeNamesTuple);
var $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPatternWithoutConsumeArgs = A3(
	$stil4m$elm_syntax$ParserFast$map2WithRange,
	F3(
		function (range, firstName, after) {
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					A2(
						$stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern,
						function () {
							if (after.$ === 1) {
								return {dE: _List_Nil, bV: firstName};
							} else {
								var _v1 = after.a;
								var qualificationAfter = _v1.a;
								var unqualified = _v1.b;
								return {
									dE: A2($elm$core$List$cons, firstName, qualificationAfter),
									bV: unqualified
								};
							}
						}(),
						_List_Nil))
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeName,
	$stil4m$elm_syntax$Elm$Parser$Patterns$maybeDotTypeNamesTuple);
var $stil4m$elm_syntax$Elm$Syntax$Pattern$RecordPattern = function (a) {
	return {$: 8, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$recordPattern = A3(
	$stil4m$elm_syntax$ParserFast$map2WithRange,
	F3(
		function (range, commentsBeforeElements, elements) {
			return {
				gI: A2($stil4m$elm_syntax$Rope$prependTo, elements.gI, commentsBeforeElements),
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Pattern$RecordPattern(elements.a))
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '{', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	A2(
		$stil4m$elm_syntax$ParserFast$oneOf2,
		A2(
			$stil4m$elm_syntax$ParserFast$followedBySymbol,
			'}',
			A4(
				$stil4m$elm_syntax$ParserFast$map3,
				F3(
					function (head, commentsAfterHead, tail) {
						return {
							gI: A2($stil4m$elm_syntax$Rope$prependTo, tail.gI, commentsAfterHead),
							a: A2($elm$core$List$cons, head, tail.a)
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				$stil4m$elm_syntax$ParserWithComments$many(
					A2(
						$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
						',',
						A4(
							$stil4m$elm_syntax$ParserFast$map3,
							F3(
								function (beforeName, name, afterName) {
									return {
										gI: A2($stil4m$elm_syntax$Rope$prependTo, afterName, beforeName),
										a: name
									};
								}),
							$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
							$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
							$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))))),
		A2(
			$stil4m$elm_syntax$ParserFast$symbol,
			'}',
			{gI: $stil4m$elm_syntax$Rope$empty, a: _List_Nil})));
var $stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern = function (a) {
	return {$: 3, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$stringPattern = $stil4m$elm_syntax$Elm$Parser$Tokens$singleOrTripleQuotedStringLiteralMapWithRange(
	F2(
		function (range, string) {
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern(string))
			};
		}));
var $stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern = function (a) {
	return {$: 11, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange = function (rangeAndNameToResult) {
	return A4($stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak, rangeAndNameToResult, $stil4m$elm_syntax$Char$Extra$unicodeIsLowerFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast, $stil4m$elm_syntax$Elm$Parser$Tokens$isNotReserved);
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$varPattern = $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange(
	F2(
		function (range, _var) {
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern(_var))
			};
		}));
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePatternTryToCompose() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map3,
		F3(
			function (x, commentsAfterLeft, maybeComposedWithResult) {
				return {
					gI: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						maybeComposedWithResult.gI,
						A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterLeft, x.gI)),
					a: function () {
						var _v7 = maybeComposedWithResult.a;
						switch (_v7.$) {
							case 0:
								return x.a;
							case 1:
								var anotherName = _v7.a;
								return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Pattern$AsPattern, x.a, anotherName);
							default:
								var y = _v7.a;
								return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern, x.a, y);
						}
					}()
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern(),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeComposedWith());
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern() {
	return A9(
		$stil4m$elm_syntax$ParserFast$oneOf9,
		$stil4m$elm_syntax$Elm$Parser$Patterns$varPattern,
		$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternWithConsumeArgs(),
		$stil4m$elm_syntax$Elm$Parser$Patterns$allPattern,
		$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern(),
		$stil4m$elm_syntax$Elm$Parser$Patterns$recordPattern,
		$stil4m$elm_syntax$Elm$Parser$Patterns$stringPattern,
		$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern(),
		$stil4m$elm_syntax$Elm$Parser$Patterns$numberPart,
		$stil4m$elm_syntax$Elm$Parser$Patterns$charPattern);
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternWithConsumeArgs() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map3,
		F3(
			function (_v4, afterStartName, argsReverse) {
				var nameRange = _v4.a;
				var name = _v4.b;
				var range = function () {
					var _v5 = argsReverse.a;
					if (!_v5.b) {
						return nameRange;
					} else {
						var _v6 = _v5.a;
						var lastArgRange = _v6.a;
						return {b9: lastArgRange.b9, cB: nameRange.cB};
					}
				}();
				return {
					gI: A2($stil4m$elm_syntax$Rope$prependTo, argsReverse.gI, afterStartName),
					a: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						range,
						A2(
							$stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern,
							name,
							$elm$core$List$reverse(argsReverse.a)))
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedNameRefNode,
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		$stil4m$elm_syntax$ParserWithComments$manyWithoutReverse(
			$stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy(
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (arg, commentsAfterArg) {
							return {
								gI: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterArg, arg.gI),
								a: arg.a
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$patternNotDirectlyComposing(),
					$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout))));
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$patternNotDirectlyComposing() {
	return A9(
		$stil4m$elm_syntax$ParserFast$oneOf9,
		$stil4m$elm_syntax$Elm$Parser$Patterns$varPattern,
		$stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPatternWithoutConsumeArgs,
		$stil4m$elm_syntax$Elm$Parser$Patterns$allPattern,
		$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern(),
		$stil4m$elm_syntax$Elm$Parser$Patterns$recordPattern,
		$stil4m$elm_syntax$Elm$Parser$Patterns$stringPattern,
		$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern(),
		$stil4m$elm_syntax$Elm$Parser$Patterns$numberPart,
		$stil4m$elm_syntax$Elm$Parser$Patterns$charPattern);
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern() {
	return A3(
		$stil4m$elm_syntax$ParserFast$map2WithRange,
		F3(
			function (range, commentsBeforeElements, maybeElements) {
				if (maybeElements.$ === 1) {
					return {
						gI: commentsBeforeElements,
						a: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, $stil4m$elm_syntax$Elm$Parser$Patterns$patternListEmpty)
					};
				} else {
					var elements = maybeElements.a;
					return {
						gI: A2($stil4m$elm_syntax$Rope$prependTo, elements.gI, commentsBeforeElements),
						a: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							range,
							$stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern(elements.a))
					};
				}
			}),
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '[', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		A2(
			$stil4m$elm_syntax$ParserFast$oneOf2,
			A2($stil4m$elm_syntax$ParserFast$symbol, ']', $elm$core$Maybe$Nothing),
			A2(
				$stil4m$elm_syntax$ParserFast$followedBySymbol,
				']',
				A4(
					$stil4m$elm_syntax$ParserFast$map3,
					F3(
						function (head, commentsAfterHead, tail) {
							return $elm$core$Maybe$Just(
								{
									gI: A2(
										$stil4m$elm_syntax$Rope$prependTo,
										commentsAfterHead,
										A2($stil4m$elm_syntax$Rope$prependTo, tail.gI, head.gI)),
									a: A2($elm$core$List$cons, head.a, tail.a)
								});
						}),
					$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern(),
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					$stil4m$elm_syntax$ParserWithComments$many(
						A2(
							$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
							',',
							$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
								$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern())))))));
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeComposedWith() {
	return A3(
		$stil4m$elm_syntax$ParserFast$oneOf2OrSucceed,
		A2(
			$stil4m$elm_syntax$ParserFast$keywordFollowedBy,
			'as',
			A3(
				$stil4m$elm_syntax$ParserFast$map2,
				F2(
					function (commentsAfterAs, name) {
						return {
							gI: commentsAfterAs,
							a: $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithAs(name)
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode)),
		A2(
			$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
			'::',
			A3(
				$stil4m$elm_syntax$ParserFast$map2,
				F2(
					function (commentsAfterCons, patternResult) {
						return {
							gI: A2($stil4m$elm_syntax$Rope$prependTo, patternResult.gI, commentsAfterCons),
							a: $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithCons(patternResult.a)
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern())),
		{
			gI: $stil4m$elm_syntax$Rope$empty,
			a: $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithNothing(0)
		});
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern() {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'(',
		A3(
			$stil4m$elm_syntax$ParserFast$map2WithRange,
			F3(
				function (range, commentsBeforeHead, contentResult) {
					return {
						gI: A2($stil4m$elm_syntax$Rope$prependTo, contentResult.gI, commentsBeforeHead),
						a: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{
								b9: range.b9,
								cB: {a6: range.cB.a6 - 1, bp: range.cB.bp}
							},
							contentResult.a)
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A2(
				$stil4m$elm_syntax$ParserFast$oneOf2,
				A2(
					$stil4m$elm_syntax$ParserFast$symbol,
					')',
					{gI: $stil4m$elm_syntax$Rope$empty, a: $stil4m$elm_syntax$Elm$Syntax$Pattern$UnitPattern}),
				A4(
					$stil4m$elm_syntax$ParserFast$map3,
					F3(
						function (headResult, commentsAfterHead, tailResult) {
							return {
								gI: A2(
									$stil4m$elm_syntax$Rope$prependTo,
									tailResult.gI,
									A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterHead, headResult.gI)),
								a: function () {
									var _v1 = tailResult.a;
									if (_v1.$ === 1) {
										return $stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern(headResult.a);
									} else {
										var secondAndMaybeThirdPart = _v1.a;
										var _v2 = secondAndMaybeThirdPart.fG;
										if (_v2.$ === 1) {
											return $stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern(
												_List_fromArray(
													[headResult.a, secondAndMaybeThirdPart.eI]));
										} else {
											var thirdPart = _v2.a;
											return $stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern(
												_List_fromArray(
													[headResult.a, secondAndMaybeThirdPart.eI, thirdPart]));
										}
									}
								}()
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern(),
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					A2(
						$stil4m$elm_syntax$ParserFast$oneOf2,
						A2(
							$stil4m$elm_syntax$ParserFast$symbol,
							')',
							{gI: $stil4m$elm_syntax$Rope$empty, a: $elm$core$Maybe$Nothing}),
						A2(
							$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
							',',
							A5(
								$stil4m$elm_syntax$ParserFast$map4,
								F4(
									function (commentsBefore, secondPart, commentsAfter, maybeThirdPart) {
										return {
											gI: A2(
												$stil4m$elm_syntax$Rope$prependTo,
												maybeThirdPart.gI,
												A2(
													$stil4m$elm_syntax$Rope$prependTo,
													commentsAfter,
													A2($stil4m$elm_syntax$Rope$prependTo, secondPart.gI, commentsBefore))),
											a: $elm$core$Maybe$Just(
												{fG: maybeThirdPart.a, eI: secondPart.a})
										};
									}),
								$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
								$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern(),
								$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
								A2(
									$stil4m$elm_syntax$ParserFast$oneOf2,
									A2(
										$stil4m$elm_syntax$ParserFast$symbol,
										')',
										{gI: $stil4m$elm_syntax$Rope$empty, a: $elm$core$Maybe$Nothing}),
									A2(
										$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
										',',
										A2(
											$stil4m$elm_syntax$ParserFast$followedBySymbol,
											')',
											A4(
												$stil4m$elm_syntax$ParserFast$map3,
												F3(
													function (commentsBefore, thirdPart, commentsAfter) {
														return {
															gI: A2(
																$stil4m$elm_syntax$Rope$prependTo,
																commentsAfter,
																A2($stil4m$elm_syntax$Rope$prependTo, thirdPart.gI, commentsBefore)),
															a: $elm$core$Maybe$Just(thirdPart.a)
														};
													}),
												$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
												$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern(),
												$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)))))))))));
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern() {
	return $stil4m$elm_syntax$ParserFast$lazy(
		function (_v0) {
			return $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePatternTryToCompose();
		});
}
var $stil4m$elm_syntax$Elm$Parser$Patterns$composablePatternTryToCompose = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePatternTryToCompose();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePatternTryToCompose = function () {
	return $stil4m$elm_syntax$Elm$Parser$Patterns$composablePatternTryToCompose;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$composablePattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern = function () {
	return $stil4m$elm_syntax$Elm$Parser$Patterns$composablePattern;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPatternWithConsumeArgs = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternWithConsumeArgs();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternWithConsumeArgs = function () {
	return $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPatternWithConsumeArgs;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$patternNotDirectlyComposing();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$patternNotDirectlyComposing = function () {
	return $stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$listPattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern = function () {
	return $stil4m$elm_syntax$Elm$Parser$Patterns$listPattern;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$maybeComposedWith = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeComposedWith();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeComposedWith = function () {
	return $stil4m$elm_syntax$Elm$Parser$Patterns$maybeComposedWith;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$parensPattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern = function () {
	return $stil4m$elm_syntax$Elm$Parser$Patterns$parensPattern;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$pattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern = function () {
	return $stil4m$elm_syntax$Elm$Parser$Patterns$pattern;
};
var $stil4m$elm_syntax$ParserWithComments$until = F2(
	function (end, element) {
		return A5(
			$stil4m$elm_syntax$ParserFast$loopUntil,
			end,
			element,
			_Utils_Tuple2($stil4m$elm_syntax$Rope$empty, _List_Nil),
			F2(
				function (pResult, _v0) {
					var commentsSoFar = _v0.a;
					var itemsSoFar = _v0.b;
					return _Utils_Tuple2(
						A2($stil4m$elm_syntax$Rope$prependTo, pResult.gI, commentsSoFar),
						A2($elm$core$List$cons, pResult.a, itemsSoFar));
				}),
			function (_v1) {
				var commentsSoFar = _v1.a;
				var itemsSoFar = _v1.b;
				return {
					gI: commentsSoFar,
					a: $elm$core$List$reverse(itemsSoFar)
				};
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$parameterPatternsEqual = A2(
	$stil4m$elm_syntax$ParserWithComments$until,
	$stil4m$elm_syntax$Elm$Parser$Tokens$equal,
	A3(
		$stil4m$elm_syntax$ParserFast$map2,
		F2(
			function (patternResult, commentsAfterPattern) {
				return {
					gI: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterPattern, patternResult.gI),
					a: patternResult.a
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout));
var $stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy = F2(
	function (extraIndent, nextParser) {
		return $stil4m$elm_syntax$ParserFast$columnIndentAndThen(
			F2(
				function (column, indent) {
					return (_Utils_cmp(column, indent + extraIndent) > 0) ? nextParser : $stil4m$elm_syntax$Elm$Parser$Layout$problemPositivelyIndented;
				}));
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$problemCannotMixNonAssociativeInfixOperators = $stil4m$elm_syntax$ParserFast$problem('cannot mix non-associative infix operators without parenthesis');
var $stil4m$elm_syntax$Elm$Parser$Expression$rangeMoveStartLeftByOneColumn = function (range) {
	return {
		b9: range.b9,
		cB: {a6: range.cB.a6 - 1, bp: range.cB.bp}
	};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccessFunction = function (a) {
	return {$: 21, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Expression$recordAccessFunctionExpression = A2(
	$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
	'.',
	$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange(
		F2(
			function (range, field) {
				return {
					gI: $stil4m$elm_syntax$Rope$empty,
					a: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						$stil4m$elm_syntax$Elm$Parser$Expression$rangeMoveStartLeftByOneColumn(range),
						$stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccessFunction('.' + field))
				};
			})));
var $stil4m$elm_syntax$Elm$Syntax$Expression$Floatable = function (a) {
	return {$: 9, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Hex = function (a) {
	return {$: 8, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Integer = function (a) {
	return {$: 7, a: a};
};
var $stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9 = F2(
	function (offset, src) {
		skip0OrMoreDigits0To9:
		while (true) {
			var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
			switch (_v0) {
				case '0':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '1':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '2':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '3':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '4':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '5':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '6':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '7':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '8':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '9':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				default:
					return offset;
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9 = F2(
	function (offset, src) {
		var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
		switch (_v0) {
			case '0':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '1':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '2':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '3':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '4':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '5':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '6':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '7':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '8':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '9':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			default:
				return -1;
		}
	});
var $stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark = F2(
	function (offset, src) {
		var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
		switch (_v0) {
			case '+':
				return A2($stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9, offset + 1, src);
			case '-':
				return A2($stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9, offset + 1, src);
			default:
				return A2($stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9, offset, src);
		}
	});
var $stil4m$elm_syntax$ParserFast$skipFloatAfterIntegerDecimal = F2(
	function (offset, src) {
		var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
		switch (_v0) {
			case '.':
				var offsetAfterDigits = A2($stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9, offset + 1, src);
				if (_Utils_eq(offsetAfterDigits, -1)) {
					return -1;
				} else {
					var _v1 = A3($elm$core$String$slice, offsetAfterDigits, offsetAfterDigits + 1, src);
					switch (_v1) {
						case 'e':
							return A2($stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark, offsetAfterDigits + 1, src);
						case 'E':
							return A2($stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark, offsetAfterDigits + 1, src);
						default:
							return offsetAfterDigits;
					}
				}
			case 'e':
				return A2($stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark, offset + 1, src);
			case 'E':
				return A2($stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark, offset + 1, src);
			default:
				return -1;
		}
	});
var $elm$core$String$toFloat = _String_toFloat;
var $stil4m$elm_syntax$ParserFast$floatOrIntegerDecimalOrHexadecimalMapWithRange = F3(
	function (rangeAndFloatToRes, rangeAndIntDecimalToRes, rangeAndIntHexadecimalToRes) {
		return function (s0) {
			var s1 = A2($stil4m$elm_syntax$ParserFast$convertIntegerDecimalOrHexadecimal, s0.e, s0.d);
			if (_Utils_eq(s1.s.e, -1)) {
				return A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A2($stil4m$elm_syntax$ParserFast$ExpectingNumber, s0.bp, s0.da));
			} else {
				var offsetAfterFloat = A2($stil4m$elm_syntax$ParserFast$skipFloatAfterIntegerDecimal, s1.s.e, s0.d);
				if (_Utils_eq(offsetAfterFloat, -1)) {
					var newColumn = s0.da + (s1.s.e - s0.e);
					var range = {
						b9: {a6: newColumn, bp: s0.bp},
						cB: {a6: s0.da, bp: s0.bp}
					};
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						function () {
							var _v0 = s1.X;
							if (!_v0) {
								return A2(rangeAndIntDecimalToRes, range, s1.s.fx);
							} else {
								return A2(rangeAndIntHexadecimalToRes, range, s1.s.fx);
							}
						}(),
						{da: newColumn, o: s0.o, e: s1.s.e, bp: s0.bp, d: s0.d});
				} else {
					var _v1 = $elm$core$String$toFloat(
						A3($elm$core$String$slice, s0.e, offsetAfterFloat, s0.d));
					if (!_v1.$) {
						var _float = _v1.a;
						var newColumn = s0.da + (offsetAfterFloat - s0.e);
						return A2(
							$stil4m$elm_syntax$ParserFast$Good,
							A2(
								rangeAndFloatToRes,
								{
									b9: {a6: newColumn, bp: s0.bp},
									cB: {a6: s0.da, bp: s0.bp}
								},
								_float),
							{da: newColumn, o: s0.o, e: offsetAfterFloat, bp: s0.bp, d: s0.d});
					} else {
						return A2(
							$stil4m$elm_syntax$ParserFast$Bad,
							false,
							A2($stil4m$elm_syntax$ParserFast$ExpectingNumber, s0.bp, s0.da));
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$numberExpression = A3(
	$stil4m$elm_syntax$ParserFast$floatOrIntegerDecimalOrHexadecimalMapWithRange,
	F2(
		function (range, n) {
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Expression$Floatable(n))
			};
		}),
	F2(
		function (range, n) {
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Expression$Integer(n))
			};
		}),
	F2(
		function (range, n) {
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Expression$Hex(n))
			};
		}));
var $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateWithoutLinebreak = F3(
	function (firstIsOkay, afterFirstIsOkay, resultIsOkay) {
		return function (s) {
			var firstOffset = A3($stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak, firstIsOkay, s.e, s.d);
			if (_Utils_eq(firstOffset, -1)) {
				return A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A2($stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate, s.bp, s.da));
			} else {
				var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp, afterFirstIsOkay, firstOffset, s.bp, s.da + 1, s.d, s.o);
				var name = A3($elm$core$String$slice, s.e, s1.e, s.d);
				return resultIsOkay(name) ? A2($stil4m$elm_syntax$ParserFast$Good, name, s1) : A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A2($stil4m$elm_syntax$ParserFast$ExpectingStringSatisfyingPredicate, s.bp, s.da + 1));
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Tokens$functionName = A3($stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateWithoutLinebreak, $stil4m$elm_syntax$Char$Extra$unicodeIsLowerFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast, $stil4m$elm_syntax$Elm$Parser$Tokens$isNotReserved);
var $stil4m$elm_syntax$ParserFast$oneOf2Map = F4(
	function (firstToChoice, _v0, secondToChoice, _v1) {
		var attemptFirst = _v0;
		var attemptSecond = _v1;
		return function (s) {
			var _v2 = attemptFirst(s);
			if (!_v2.$) {
				var first = _v2.a;
				var s1 = _v2.b;
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					firstToChoice(first),
					s1);
			} else {
				var firstCommitted = _v2.a;
				var firstX = _v2.b;
				if (firstCommitted) {
					return A2($stil4m$elm_syntax$ParserFast$Bad, firstCommitted, firstX);
				} else {
					var _v3 = attemptSecond(s);
					if (!_v3.$) {
						var second = _v3.a;
						var s1 = _v3.b;
						return A2(
							$stil4m$elm_syntax$ParserFast$Good,
							secondToChoice(second),
							s1);
					} else {
						var secondCommitted = _v3.a;
						var secondX = _v3.b;
						return secondCommitted ? A2($stil4m$elm_syntax$ParserFast$Bad, secondCommitted, secondX) : A2(
							$stil4m$elm_syntax$ParserFast$Bad,
							false,
							A3($stil4m$elm_syntax$ParserFast$ExpectingOneOf, firstX, secondX, _List_Nil));
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$orSucceed = F2(
	function (_v0, secondRes) {
		var attemptFirst = _v0;
		return function (s) {
			var _v1 = attemptFirst(s);
			if (!_v1.$) {
				var firstGood = _v1;
				return firstGood;
			} else {
				var firstBad = _v1;
				var firstCommitted = firstBad.a;
				return firstCommitted ? firstBad : A2($stil4m$elm_syntax$ParserFast$Good, secondRes, s);
			}
		};
	});
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$maybeDotReferenceExpressionTuple() {
	return A2(
		$stil4m$elm_syntax$ParserFast$orSucceed,
		A2(
			$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
			'.',
			A4(
				$stil4m$elm_syntax$ParserFast$oneOf2Map,
				$elm$core$Maybe$Just,
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (firstName, after) {
							if (after.$ === 1) {
								return _Utils_Tuple3(_List_Nil, firstName, _List_Nil);
							} else {
								var _v1 = after.a;
								var qualificationAfter = _v1.a;
								var unqualified = _v1.b;
								var recordAccess = _v1.c;
								return _Utils_Tuple3(
									A2($elm$core$List$cons, firstName, qualificationAfter),
									unqualified,
									recordAccess);
							}
						}),
					$stil4m$elm_syntax$Elm$Parser$Tokens$typeName,
					$stil4m$elm_syntax$ParserFast$lazy(
						function (_v2) {
							return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$maybeDotReferenceExpressionTuple();
						})),
				$elm$core$Basics$identity,
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (name, recordAccesses) {
							return $elm$core$Maybe$Just(
								_Utils_Tuple3(_List_Nil, name, recordAccesses));
						}),
					$stil4m$elm_syntax$Elm$Parser$Tokens$functionName,
					$stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccess))),
		$elm$core$Maybe$Nothing);
}
var $stil4m$elm_syntax$Elm$Parser$Expression$maybeDotReferenceExpressionTuple = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$maybeDotReferenceExpressionTuple();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$maybeDotReferenceExpressionTuple = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$maybeDotReferenceExpressionTuple;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$qualifiedOrVariantOrRecordConstructorReferenceExpressionFollowedByRecordAccess = A3(
	$stil4m$elm_syntax$ParserFast$map2WithRange,
	F3(
		function (range, firstName, after) {
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: function () {
					if (after.$ === 1) {
						return A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							range,
							A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, _List_Nil, firstName));
					} else {
						var _v1 = after.a;
						var qualificationAfter = _v1.a;
						var unqualified = _v1.b;
						var recordAccesses = _v1.c;
						if (!recordAccesses.b) {
							return A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								range,
								A2(
									$stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue,
									A2($elm$core$List$cons, firstName, qualificationAfter),
									unqualified));
						} else {
							var _v3 = recordAccesses.a;
							var firstRecordAccessRange = _v3.a;
							var referenceNode = A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{
									b9: {a6: firstRecordAccessRange.cB.a6 - 1, bp: firstRecordAccessRange.cB.bp},
									cB: range.cB
								},
								A2(
									$stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue,
									A2($elm$core$List$cons, firstName, qualificationAfter),
									unqualified));
							return A3(
								$elm$core$List$foldl,
								F2(
									function (fieldNode, leftNode) {
										var fieldRange = fieldNode.a;
										var leftRange = leftNode.a;
										return A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											{b9: fieldRange.b9, cB: leftRange.cB},
											A2($stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess, leftNode, fieldNode));
									}),
								referenceNode,
								recordAccesses);
						}
					}
				}()
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeName,
	$stil4m$elm_syntax$Elm$Parser$Expression$maybeDotReferenceExpressionTuple);
var $stil4m$elm_syntax$Elm$Parser$Expression$unqualifiedFunctionReferenceExpressionFollowedByRecordAccess = A3(
	$stil4m$elm_syntax$ParserFast$map2,
	F2(
		function (leftestResult, recordAccesses) {
			if (!recordAccesses.b) {
				return leftestResult;
			} else {
				return {
					gI: leftestResult.gI,
					a: A3(
						$elm$core$List$foldl,
						F2(
							function (fieldNode, leftNode) {
								var fieldRange = fieldNode.a;
								var leftRange = leftNode.a;
								return A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									{b9: fieldRange.b9, cB: leftRange.cB},
									A2($stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess, leftNode, fieldNode));
							}),
						leftestResult.a,
						recordAccesses)
				};
			}
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange(
		F2(
			function (range, unqualified) {
				return {
					gI: $stil4m$elm_syntax$Rope$empty,
					a: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						range,
						A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, _List_Nil, unqualified))
				};
			})),
	$stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccess);
var $stil4m$elm_syntax$Elm$Parser$Expression$referenceOrNumberExpression = A3($stil4m$elm_syntax$ParserFast$oneOf3, $stil4m$elm_syntax$Elm$Parser$Expression$qualifiedOrVariantOrRecordConstructorReferenceExpressionFollowedByRecordAccess, $stil4m$elm_syntax$Elm$Parser$Expression$unqualifiedFunctionReferenceExpressionFollowedByRecordAccess, $stil4m$elm_syntax$Elm$Parser$Expression$numberExpression);
var $stil4m$elm_syntax$ParserFast$symbolBacktrackableFollowedBy = F2(
	function (str, _v0) {
		var parseNext = _v0;
		var strLength = $elm$core$String$length(str);
		return function (s) {
			var newOffset = s.e + strLength;
			return _Utils_eq(
				A3($elm$core$String$slice, s.e, newOffset, s.d),
				str + '') ? parseNext(
				{da: s.da + strLength, o: s.o, e: newOffset, bp: s.bp, d: s.d}) : A2(
				$stil4m$elm_syntax$ParserFast$Bad,
				false,
				A3($stil4m$elm_syntax$ParserFast$ExpectingSymbol, s.bp, s.da, str));
		};
	});
var $stil4m$elm_syntax$ParserFast$symbolWithEndLocation = F2(
	function (str, endLocationToRes) {
		var strLength = $elm$core$String$length(str);
		return function (s) {
			var newOffset = s.e + strLength;
			if (_Utils_eq(
				A3($elm$core$String$slice, s.e, newOffset, s.d),
				str + '')) {
				var newCol = s.da + strLength;
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					endLocationToRes(
						{a6: newCol, bp: s.bp}),
					{da: newCol, o: s.o, e: newOffset, bp: s.bp, d: s.d});
			} else {
				return A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A3($stil4m$elm_syntax$ParserFast$ExpectingSymbol, s.bp, s.da, str));
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$temporaryErrPrecedenceTooHigh = $elm$core$Result$Err('infix operator precedence too high');
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$FieldsAfterName = function (a) {
	return {$: 1, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation = F2(
	function (a, b) {
		return {$: 6, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord = F2(
	function (a, b) {
		return {$: 5, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record = function (a) {
	return {$: 4, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$RecordExtensionExpressionAfterName = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled = function (a) {
	return {$: 3, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit = {$: 2};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$genericTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange(
	F2(
		function (range, _var) {
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(_var))
			};
		}));
var $stil4m$elm_syntax$ParserFast$map3WithRange = F4(
	function (func, _v0, _v1, _v2) {
		var parseA = _v0;
		var parseB = _v1;
		var parseC = _v2;
		return function (s0) {
			var _v3 = parseA(s0);
			if (_v3.$ === 1) {
				var committed = _v3.a;
				var x = _v3.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var a = _v3.a;
				var s1 = _v3.b;
				var _v4 = parseB(s1);
				if (_v4.$ === 1) {
					var x = _v4.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v4.a;
					var s2 = _v4.b;
					var _v5 = parseC(s2);
					if (_v5.$ === 1) {
						var x = _v5.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var c = _v5.a;
						var s3 = _v5.b;
						return A2(
							$stil4m$elm_syntax$ParserFast$Good,
							A4(
								func,
								{
									b9: {a6: s3.da, bp: s3.bp},
									cB: {a6: s0.da, bp: s0.bp}
								},
								a,
								b,
								c),
							s3);
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$map6WithRange = F7(
	function (func, _v0, _v1, _v2, _v3, _v4, _v5) {
		var parseA = _v0;
		var parseB = _v1;
		var parseC = _v2;
		var parseD = _v3;
		var parseE = _v4;
		var parseF = _v5;
		return function (s0) {
			var _v6 = parseA(s0);
			if (_v6.$ === 1) {
				var committed = _v6.a;
				var x = _v6.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var a = _v6.a;
				var s1 = _v6.b;
				var _v7 = parseB(s1);
				if (_v7.$ === 1) {
					var x = _v7.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v7.a;
					var s2 = _v7.b;
					var _v8 = parseC(s2);
					if (_v8.$ === 1) {
						var x = _v8.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var c = _v8.a;
						var s3 = _v8.b;
						var _v9 = parseD(s3);
						if (_v9.$ === 1) {
							var x = _v9.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var d = _v9.a;
							var s4 = _v9.b;
							var _v10 = parseE(s4);
							if (_v10.$ === 1) {
								var x = _v10.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var e = _v10.a;
								var s5 = _v10.b;
								var _v11 = parseF(s5);
								if (_v11.$ === 1) {
									var x = _v11.b;
									return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
								} else {
									var f = _v11.a;
									var s6 = _v11.b;
									return A2(
										$stil4m$elm_syntax$ParserFast$Good,
										A7(
											func,
											{
												b9: {a6: s6.da, bp: s6.bp},
												cB: {a6: s0.da, bp: s0.bp}
											},
											a,
											b,
											c,
											d,
											e,
											f),
										s6);
								}
							}
						}
					}
				}
			}
		};
	});
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$maybeDotTypeNamesTuple() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map2OrSucceed,
		F2(
			function (firstName, afterFirstName) {
				if (afterFirstName.$ === 1) {
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(_List_Nil, firstName));
				} else {
					var _v1 = afterFirstName.a;
					var qualificationAfter = _v1.a;
					var unqualified = _v1.b;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A2($elm$core$List$cons, firstName, qualificationAfter),
							unqualified));
				}
			}),
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '.', $stil4m$elm_syntax$Elm$Parser$Tokens$typeName),
		$stil4m$elm_syntax$ParserFast$lazy(
			function (_v2) {
				return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$maybeDotTypeNamesTuple();
			}),
		$elm$core$Maybe$Nothing);
}
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$maybeDotTypeNamesTuple = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$maybeDotTypeNamesTuple();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$maybeDotTypeNamesTuple = function () {
	return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$maybeDotTypeNamesTuple;
};
var $stil4m$elm_syntax$ParserFast$oneOf4 = F4(
	function (_v0, _v1, _v2, _v3) {
		var attemptFirst = _v0;
		var attemptSecond = _v1;
		var attemptThird = _v2;
		var attemptFourth = _v3;
		return function (s) {
			var _v4 = attemptFirst(s);
			if (!_v4.$) {
				var firstGood = _v4;
				return firstGood;
			} else {
				var firstBad = _v4;
				var firstCommitted = firstBad.a;
				var firstX = firstBad.b;
				if (firstCommitted) {
					return firstBad;
				} else {
					var _v5 = attemptSecond(s);
					if (!_v5.$) {
						var secondGood = _v5;
						return secondGood;
					} else {
						var secondBad = _v5;
						var secondCommitted = secondBad.a;
						var secondX = secondBad.b;
						if (secondCommitted) {
							return secondBad;
						} else {
							var _v6 = attemptThird(s);
							if (!_v6.$) {
								var thirdGood = _v6;
								return thirdGood;
							} else {
								var thirdBad = _v6;
								var thirdCommitted = thirdBad.a;
								var thirdX = thirdBad.b;
								if (thirdCommitted) {
									return thirdBad;
								} else {
									var _v7 = attemptFourth(s);
									if (!_v7.$) {
										var fourthGood = _v7;
										return fourthGood;
									} else {
										var fourthBad = _v7;
										var fourthCommitted = fourthBad.a;
										var fourthX = fourthBad.b;
										return fourthCommitted ? fourthBad : A2(
											$stil4m$elm_syntax$ParserFast$Bad,
											false,
											A3(
												$stil4m$elm_syntax$ParserFast$ExpectingOneOf,
												firstX,
												secondX,
												_List_fromArray(
													[thirdX, fourthX])));
									}
								}
							}
						}
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationRecordEmpty = $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(_List_Nil);
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotationWithoutArguments = A3(
	$stil4m$elm_syntax$ParserFast$map2WithRange,
	F3(
		function (range, startName, afterStartName) {
			var name = function () {
				if (afterStartName.$ === 1) {
					return _Utils_Tuple2(_List_Nil, startName);
				} else {
					var _v1 = afterStartName.a;
					var qualificationAfterStartName = _v1.a;
					var unqualified = _v1.b;
					return _Utils_Tuple2(
						A2($elm$core$List$cons, startName, qualificationAfterStartName),
						unqualified);
				}
			}();
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					A2(
						$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed,
						A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, name),
						_List_Nil))
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeName,
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$maybeDotTypeNamesTuple);
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnIncludingTypedWithArguments() {
	return A4(
		$stil4m$elm_syntax$ParserFast$oneOf4,
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation(),
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typedTypeAnnotationWithArgumentsOptimisticLayout(),
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$genericTypeAnnotation,
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation());
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typedTypeAnnotationWithArgumentsOptimisticLayout() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map3,
		F3(
			function (nameNode, commentsAfterName, argsReverse) {
				var nameRange = nameNode.a;
				var range = function () {
					var _v8 = argsReverse.a;
					if (!_v8.b) {
						return nameRange;
					} else {
						var _v9 = _v8.a;
						var lastArgRange = _v9.a;
						return {b9: lastArgRange.b9, cB: nameRange.cB};
					}
				}();
				return {
					gI: A2($stil4m$elm_syntax$Rope$prependTo, argsReverse.gI, commentsAfterName),
					a: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						range,
						A2(
							$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed,
							nameNode,
							$elm$core$List$reverse(argsReverse.a)))
				};
			}),
		A3(
			$stil4m$elm_syntax$ParserFast$map2WithRange,
			F3(
				function (range, startName, afterStartName) {
					var name = function () {
						if (afterStartName.$ === 1) {
							return _Utils_Tuple2(_List_Nil, startName);
						} else {
							var _v11 = afterStartName.a;
							var qualificationAfterStartName = _v11.a;
							var unqualified = _v11.b;
							return _Utils_Tuple2(
								A2($elm$core$List$cons, startName, qualificationAfterStartName),
								unqualified);
						}
					}();
					return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, name);
				}),
			$stil4m$elm_syntax$Elm$Parser$Tokens$typeName,
			$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$maybeDotTypeNamesTuple),
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		$stil4m$elm_syntax$ParserWithComments$manyWithoutReverse(
			$stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy(
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (typeAnnotationResult, commentsAfter) {
							return {
								gI: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, typeAnnotationResult.gI),
								a: typeAnnotationResult.a
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnExcludingTypedWithArguments(),
					$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout))));
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnExcludingTypedWithArguments() {
	return A4(
		$stil4m$elm_syntax$ParserFast$oneOf4,
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation(),
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotationWithoutArguments,
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$genericTypeAnnotation,
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation());
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation() {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'(',
		A2(
			$stil4m$elm_syntax$ParserFast$oneOf2,
			A2(
				$stil4m$elm_syntax$ParserFast$symbolWithEndLocation,
				')',
				function (end) {
					return {
						gI: $stil4m$elm_syntax$Rope$empty,
						a: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{
								b9: end,
								cB: {a6: end.a6 - 2, bp: end.bp}
							},
							$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit)
					};
				}),
			A5(
				$stil4m$elm_syntax$ParserFast$map4WithRange,
				F5(
					function (rangeAfterOpeningParens, commentsBeforeFirstPart, firstPart, commentsAfterFirstPart, lastToSecondPart) {
						return {
							gI: A2(
								$stil4m$elm_syntax$Rope$prependTo,
								lastToSecondPart.gI,
								A2(
									$stil4m$elm_syntax$Rope$prependTo,
									commentsAfterFirstPart,
									A2($stil4m$elm_syntax$Rope$prependTo, firstPart.gI, commentsBeforeFirstPart))),
							a: A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{
									b9: rangeAfterOpeningParens.b9,
									cB: {a6: rangeAfterOpeningParens.cB.a6 - 1, bp: rangeAfterOpeningParens.cB.bp}
								},
								function () {
									var _v5 = lastToSecondPart.a;
									if (_v5.$ === 1) {
										var _v6 = firstPart.a;
										var firstPartType = _v6.b;
										return firstPartType;
									} else {
										var firstAndMaybeThirdPart = _v5.a;
										var _v7 = firstAndMaybeThirdPart.fG;
										if (_v7.$ === 1) {
											return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled(
												_List_fromArray(
													[firstPart.a, firstAndMaybeThirdPart.eI]));
										} else {
											var thirdPart = _v7.a;
											return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled(
												_List_fromArray(
													[firstPart.a, firstAndMaybeThirdPart.eI, thirdPart]));
										}
									}
								}())
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				A2(
					$stil4m$elm_syntax$ParserFast$oneOf2,
					A2(
						$stil4m$elm_syntax$ParserFast$symbol,
						')',
						{gI: $stil4m$elm_syntax$Rope$empty, a: $elm$core$Maybe$Nothing}),
					A2(
						$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
						',',
						A5(
							$stil4m$elm_syntax$ParserFast$map4,
							F4(
								function (commentsBefore, secondPartResult, commentsAfter, maybeThirdPartResult) {
									return {
										gI: A2(
											$stil4m$elm_syntax$Rope$prependTo,
											commentsAfter,
											A2($stil4m$elm_syntax$Rope$prependTo, secondPartResult.gI, commentsBefore)),
										a: $elm$core$Maybe$Just(
											{fG: maybeThirdPartResult.a, eI: secondPartResult.a})
									};
								}),
							$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
							$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
							$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
							A2(
								$stil4m$elm_syntax$ParserFast$oneOf2,
								A2(
									$stil4m$elm_syntax$ParserFast$symbol,
									')',
									{gI: $stil4m$elm_syntax$Rope$empty, a: $elm$core$Maybe$Nothing}),
								A2(
									$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
									',',
									A2(
										$stil4m$elm_syntax$ParserFast$followedBySymbol,
										')',
										A4(
											$stil4m$elm_syntax$ParserFast$map3,
											F3(
												function (commentsBefore, thirdPartResult, commentsAfter) {
													return {
														gI: A2(
															$stil4m$elm_syntax$Rope$prependTo,
															commentsAfter,
															A2($stil4m$elm_syntax$Rope$prependTo, thirdPartResult.gI, commentsBefore)),
														a: $elm$core$Maybe$Just(thirdPartResult.a)
													};
												}),
											$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
											$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
											$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))))))))));
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation() {
	return A3(
		$stil4m$elm_syntax$ParserFast$map2WithRange,
		F3(
			function (range, commentsBefore, afterCurly) {
				return {
					gI: A2($stil4m$elm_syntax$Rope$prependTo, afterCurly.gI, commentsBefore),
					a: function () {
						var _v3 = afterCurly.a;
						if (_v3.$ === 1) {
							return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationRecordEmpty);
						} else {
							var afterCurlyResult = _v3.a;
							return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, afterCurlyResult);
						}
					}()
				};
			}),
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '{', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		A2(
			$stil4m$elm_syntax$ParserFast$oneOf2,
			A2(
				$stil4m$elm_syntax$ParserFast$followedBySymbol,
				'}',
				A4(
					$stil4m$elm_syntax$ParserFast$map3,
					F3(
						function (firstNameNode, commentsAfterFirstName, afterFirstName) {
							return {
								gI: A2($stil4m$elm_syntax$Rope$prependTo, afterFirstName.gI, commentsAfterFirstName),
								a: $elm$core$Maybe$Just(
									function () {
										var _v4 = afterFirstName.a;
										if (!_v4.$) {
											var fields = _v4.a;
											return A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord, firstNameNode, fields);
										} else {
											var fieldsAfterName = _v4.a;
											return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(
												A2(
													$elm$core$List$cons,
													A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $elm$core$Tuple$pair, firstNameNode, fieldsAfterName.fl),
													fieldsAfterName.ge));
										}
									}())
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					A2(
						$stil4m$elm_syntax$ParserFast$oneOf2,
						A2(
							$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
							'|',
							A4(
								$stil4m$elm_syntax$ParserFast$map3WithRange,
								F4(
									function (range, commentsBefore, head, tail) {
										return {
											gI: A2(
												$stil4m$elm_syntax$Rope$prependTo,
												tail.gI,
												A2($stil4m$elm_syntax$Rope$prependTo, head.gI, commentsBefore)),
											a: $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$RecordExtensionExpressionAfterName(
												A2(
													$stil4m$elm_syntax$Elm$Syntax$Node$Node,
													range,
													A2($elm$core$List$cons, head.a, tail.a)))
										};
									}),
								$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
								$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition(),
								$stil4m$elm_syntax$ParserWithComments$many(
									A2(
										$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
										',',
										A3(
											$stil4m$elm_syntax$ParserFast$map2,
											F2(
												function (commentsBefore, field) {
													return {
														gI: A2($stil4m$elm_syntax$Rope$prependTo, field.gI, commentsBefore),
														a: field.a
													};
												}),
											$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
											$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition()))))),
						A2(
							$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
							':',
							A5(
								$stil4m$elm_syntax$ParserFast$map4,
								F4(
									function (commentsBeforeFirstFieldValue, firstFieldValue, commentsAfterFirstFieldValue, tailFields) {
										return {
											gI: A2(
												$stil4m$elm_syntax$Rope$prependTo,
												tailFields.gI,
												A2(
													$stil4m$elm_syntax$Rope$prependTo,
													commentsAfterFirstFieldValue,
													A2($stil4m$elm_syntax$Rope$prependTo, firstFieldValue.gI, commentsBeforeFirstFieldValue))),
											a: $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$FieldsAfterName(
												{fl: firstFieldValue.a, ge: tailFields.a})
										};
									}),
								$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
								$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
								$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
								A2(
									$stil4m$elm_syntax$ParserFast$orSucceed,
									A2(
										$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
										',',
										$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation()),
									{gI: $stil4m$elm_syntax$Rope$empty, a: _List_Nil})))))),
			A2(
				$stil4m$elm_syntax$ParserFast$symbol,
				'}',
				{gI: $stil4m$elm_syntax$Rope$empty, a: $elm$core$Maybe$Nothing})));
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map3,
		F3(
			function (commentsBefore, head, tail) {
				return {
					gI: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						tail.gI,
						A2($stil4m$elm_syntax$Rope$prependTo, head.gI, commentsBefore)),
					a: A2($elm$core$List$cons, head.a, tail.a)
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition(),
		$stil4m$elm_syntax$ParserWithComments$many(
			A2(
				$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
				',',
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (commentsBefore, field) {
							return {
								gI: A2($stil4m$elm_syntax$Rope$prependTo, field.gI, commentsBefore),
								a: field.a
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition()))));
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition() {
	return A7(
		$stil4m$elm_syntax$ParserFast$map6WithRange,
		F7(
			function (range, commentsBeforeFunctionName, name, commentsAfterFunctionName, commentsAfterColon, value, commentsAfterValue) {
				return {
					gI: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterValue,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							value.gI,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								commentsAfterColon,
								A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterFunctionName, commentsBeforeFunctionName)))),
					a: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						range,
						_Utils_Tuple2(name, value.a))
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, ':', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout);
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map3,
		F3(
			function (inType, commentsAfterIn, maybeOut) {
				return {
					gI: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						maybeOut.gI,
						A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterIn, inType.gI)),
					a: function () {
						var _v0 = maybeOut.a;
						if (_v0.$ === 1) {
							return inType.a;
						} else {
							var out = _v0.a;
							return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation, inType.a, out);
						}
					}()
				};
			}),
		$stil4m$elm_syntax$ParserFast$lazy(
			function (_v1) {
				return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnIncludingTypedWithArguments();
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		A4(
			$stil4m$elm_syntax$ParserFast$map2OrSucceed,
			F2(
				function (commentsAfterArrow, typeAnnotationResult) {
					return {
						gI: A2($stil4m$elm_syntax$Rope$prependTo, typeAnnotationResult.gI, commentsAfterArrow),
						a: $elm$core$Maybe$Just(typeAnnotationResult.a)
					};
				}),
			A2(
				$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
				'->',
				A2($stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy, 2, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)),
			$stil4m$elm_syntax$ParserFast$lazy(
				function (_v2) {
					return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation();
				}),
			{gI: $stil4m$elm_syntax$Rope$empty, a: $elm$core$Maybe$Nothing}));
}
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFnIncludingTypedWithArguments = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnIncludingTypedWithArguments();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnIncludingTypedWithArguments = function () {
	return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFnIncludingTypedWithArguments;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotationWithArgumentsOptimisticLayout = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typedTypeAnnotationWithArgumentsOptimisticLayout();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typedTypeAnnotationWithArgumentsOptimisticLayout = function () {
	return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotationWithArgumentsOptimisticLayout;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFnExcludingTypedWithArguments = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnExcludingTypedWithArguments();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnExcludingTypedWithArguments = function () {
	return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFnExcludingTypedWithArguments;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$parensTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation = function () {
	return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$parensTypeAnnotation;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation = function () {
	return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordTypeAnnotation;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldsTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation = function () {
	return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldsTypeAnnotation;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldDefinition = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition = function () {
	return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldDefinition;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation = function () {
	return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation;
};
var $stil4m$elm_syntax$ParserFast$validate = F3(
	function (isOkay, problemOnNotOkay, _v0) {
		var parseA = _v0;
		return function (s0) {
			var _v1 = parseA(s0);
			if (_v1.$ === 1) {
				var committed = _v1.a;
				var x = _v1.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var good = _v1;
				var a = good.a;
				var s1 = good.b;
				return isOkay(a) ? good : A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					true,
					A3($stil4m$elm_syntax$ParserFast$ExpectingCustom, s1.bp, s1.da, problemOnNotOkay));
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ToResultAndThen = F3(
	function (whileCharIsOkay, consumedStringToIntermediateOrErr, intermediateToFollowupParser) {
		return function (s0) {
			var s1Offset = A3($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakAnd2PartUtf16Help, whileCharIsOkay, s0.e, s0.d);
			var whileContent = A3($elm$core$String$slice, s0.e, s1Offset, s0.d);
			var _v0 = consumedStringToIntermediateOrErr(whileContent);
			if (_v0.$ === 1) {
				var problemMessage = _v0.a;
				return A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A3($stil4m$elm_syntax$ParserFast$ExpectingCustom, s0.bp, s0.da, problemMessage));
			} else {
				var intermediate = _v0.a;
				var s1Column = s0.da + (s1Offset - s0.e);
				var _v1 = intermediateToFollowupParser(intermediate);
				var parseFollowup = _v1;
				return $stil4m$elm_syntax$ParserFast$pStepCommit(
					parseFollowup(
						{da: s1Column, o: s0.o, e: s1Offset, bp: s0.bp, d: s0.d}));
			}
		};
	});
var $stil4m$elm_syntax$ParserFast$changeIndent = F2(
	function (newIndent, s) {
		return {da: s.da, o: newIndent, e: s.e, bp: s.bp, d: s.d};
	});
var $stil4m$elm_syntax$ParserFast$withIndentSetToColumn = function (_v0) {
	var parse = _v0;
	return function (s0) {
		var _v1 = parse(
			A2($stil4m$elm_syntax$ParserFast$changeIndent, s0.da, s0));
		if (!_v1.$) {
			var a = _v1.a;
			var s1 = _v1.b;
			return A2(
				$stil4m$elm_syntax$ParserFast$Good,
				a,
				A2($stil4m$elm_syntax$ParserFast$changeIndent, s0.o, s1));
		} else {
			var bad = _v1;
			return bad;
		}
	};
};
var $stil4m$elm_syntax$ParserFast$withIndentSetToColumnMinus = F2(
	function (columnToMoveIndentationBaseBackBy, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(
				A2($stil4m$elm_syntax$ParserFast$changeIndent, s0.da - columnToMoveIndentationBaseBackBy, s0));
			if (!_v1.$) {
				var a = _v1.a;
				var s1 = _v1.b;
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					a,
					A2($stil4m$elm_syntax$ParserFast$changeIndent, s0.o, s1));
			} else {
				var bad = _v1;
				return bad;
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout = F2(
	function (toResult, afterCommitting) {
		return A4(
			$stil4m$elm_syntax$ParserFast$loopWhileSucceedsOntoResultFromParser,
			$stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy(
				A2($stil4m$elm_syntax$Elm$Parser$Expression$infixOperatorAndThen, toResult, afterCommitting)),
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpressionMaybeAppliedOptimisticLayout(),
			F2(
				function (extensionRightResult, leftNodeWithComments) {
					return {
						gI: A2($stil4m$elm_syntax$Rope$prependTo, extensionRightResult.gI, leftNodeWithComments.gI),
						a: A2($stil4m$elm_syntax$Elm$Parser$Expression$applyExtensionRight, extensionRightResult.a, leftNodeWithComments.a)
					};
				}),
			$elm$core$Basics$identity);
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$infixLeft = F2(
	function (leftPrecedence, symbol) {
		return {
			bc: A3(
				$stil4m$elm_syntax$ParserFast$map2,
				F2(
					function (commentsBeforeFirst, first) {
						return {
							gI: A2($stil4m$elm_syntax$Rope$prependTo, first.gI, commentsBeforeFirst),
							a: {gP: 0, dm: first.a, bs: symbol}
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				A2(
					$stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout,
					function (info) {
						return (_Utils_cmp(info.bj, leftPrecedence) > 0) ? $elm$core$Result$Ok(info) : $stil4m$elm_syntax$Elm$Parser$Expression$temporaryErrPrecedenceTooHigh;
					},
					function ($) {
						return $.bc;
					})),
			bj: leftPrecedence,
			bs: symbol
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative = F2(
	function (leftPrecedence, symbol) {
		return {
			bc: A3(
				$stil4m$elm_syntax$ParserFast$map2,
				F2(
					function (commentsBefore, right) {
						return {
							gI: A2($stil4m$elm_syntax$Rope$prependTo, right.gI, commentsBefore),
							a: {gP: 2, dm: right.a, bs: symbol}
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				A2(
					$stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout,
					function (info) {
						return (_Utils_cmp(info.bj, leftPrecedence) > -1) ? $elm$core$Result$Ok(info) : $stil4m$elm_syntax$Elm$Parser$Expression$temporaryErrPrecedenceTooHigh;
					},
					function (info) {
						return _Utils_eq(info.bj, leftPrecedence) ? $stil4m$elm_syntax$Elm$Parser$Expression$problemCannotMixNonAssociativeInfixOperators : info.bc;
					})),
			bj: leftPrecedence,
			bs: symbol
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$infixOperatorAndThen = F2(
	function (toResult, afterCommitting) {
		return A3(
			$stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ToResultAndThen,
			$stil4m$elm_syntax$Elm$Parser$Tokens$isOperatorSymbolChar,
			function (operator) {
				switch (operator) {
					case '|>':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApR());
					case '++':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5append());
					case '<|':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApL());
					case '>>':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeR());
					case '==':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Eq());
					case '*':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Mul());
					case '::':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Cons());
					case '+':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Add());
					case '-':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Sub());
					case '|.':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Ignore());
					case '&&':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence3And());
					case '|=':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Keep());
					case '<<':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeL());
					case '/=':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Neq());
					case '//':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Idiv());
					case '/':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Fdiv());
					case '</>':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Slash());
					case '||':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence2Or());
					case '<=':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Le());
					case '>=':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Ge());
					case '>':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Gt());
					case '<?>':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8QuestionMark());
					case '<':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Lt());
					case '^':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8Pow());
					default:
						return $stil4m$elm_syntax$Elm$Parser$Expression$errUnknownInfixOperator;
				}
			},
			afterCommitting);
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$infixRight = F2(
	function (leftPrecedence, symbol) {
		return {
			bc: A3(
				$stil4m$elm_syntax$ParserFast$map2,
				F2(
					function (commentsBeforeFirst, first) {
						return {
							gI: A2($stil4m$elm_syntax$Rope$prependTo, first.gI, commentsBeforeFirst),
							a: {gP: 1, dm: first.a, bs: symbol}
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				A2(
					$stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout,
					function (info) {
						return (_Utils_cmp(info.bj, leftPrecedence) > -1) ? $elm$core$Result$Ok(info) : $stil4m$elm_syntax$Elm$Parser$Expression$temporaryErrPrecedenceTooHigh;
					},
					function ($) {
						return $.bc;
					})),
			bj: leftPrecedence,
			bs: symbol
		};
	});
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letOrUnqualifiedReferenceExpression() {
	return A2(
		$stil4m$elm_syntax$ParserFast$oneOf2,
		$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letExpression(),
		$stil4m$elm_syntax$Elm$Parser$Expression$unqualifiedFunctionReferenceExpressionFollowedByRecordAccess);
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letExpression() {
	return A2(
		$stil4m$elm_syntax$ParserFast$keywordFollowedBy,
		'let',
		A4(
			$stil4m$elm_syntax$ParserFast$map3WithStartLocation,
			F4(
				function (start, declarations, commentsAfterIn, expressionResult) {
					var _v38 = expressionResult.a;
					var expressionRange = _v38.a;
					return {
						gI: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							expressionResult.gI,
							A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterIn, declarations.gI)),
						a: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{
								b9: expressionRange.b9,
								cB: {a6: start.a6 - 3, bp: start.bp}
							},
							$stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression(
								{e4: declarations.e4, dm: expressionResult.a}))
					};
				}),
			A2(
				$stil4m$elm_syntax$ParserFast$withIndentSetToColumnMinus,
				3,
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (commentsAfterLet, declarations) {
							return {
								gI: A2($stil4m$elm_syntax$Rope$prependTo, declarations.gI, commentsAfterLet),
								e4: declarations.a
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					$stil4m$elm_syntax$ParserFast$withIndentSetToColumn(
						$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDeclarationsIn()))),
			A2($stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy, 2, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDeclarationsIn() {
	return $stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy(
		A4(
			$stil4m$elm_syntax$ParserFast$map3,
			F3(
				function (headLetResult, commentsAfter, tailLetResult) {
					return {
						gI: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							tailLetResult.gI,
							A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, headLetResult.gI)),
						a: A2($elm$core$List$cons, headLetResult.a, tailLetResult.a)
					};
				}),
			A2(
				$stil4m$elm_syntax$ParserFast$oneOf2,
				$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letFunction(),
				$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDestructuringDeclaration()),
			$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
			A2(
				$stil4m$elm_syntax$ParserWithComments$until,
				$stil4m$elm_syntax$Elm$Parser$Tokens$inToken,
				$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$blockElement())));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$blockElement() {
	return $stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy(
		A3(
			$stil4m$elm_syntax$ParserFast$map2,
			F2(
				function (letDeclarationResult, commentsAfter) {
					return {
						gI: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, letDeclarationResult.gI),
						a: letDeclarationResult.a
					};
				}),
			A2(
				$stil4m$elm_syntax$ParserFast$oneOf2,
				$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letFunction(),
				$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDestructuringDeclaration()),
			$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseOrUnqualifiedReferenceExpression() {
	return A2(
		$stil4m$elm_syntax$ParserFast$oneOf2,
		$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseExpression(),
		$stil4m$elm_syntax$Elm$Parser$Expression$unqualifiedFunctionReferenceExpressionFollowedByRecordAccess);
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseExpression() {
	return A2(
		$stil4m$elm_syntax$ParserFast$keywordFollowedBy,
		'case',
		A6(
			$stil4m$elm_syntax$ParserFast$map5WithStartLocation,
			F6(
				function (start, commentsAfterCase, casedExpressionResult, commentsBeforeOf, commentsAfterOf, casesResult) {
					var _v32 = casesResult.a;
					var firstCase = _v32.a;
					var lastToSecondCase = _v32.b;
					return {
						gI: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							casesResult.gI,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								commentsAfterOf,
								A2(
									$stil4m$elm_syntax$Rope$prependTo,
									commentsBeforeOf,
									A2($stil4m$elm_syntax$Rope$prependTo, casedExpressionResult.gI, commentsAfterCase)))),
						a: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{
								b9: function () {
									if (lastToSecondCase.b) {
										var _v34 = lastToSecondCase.a;
										var _v35 = _v34.b;
										var lastCaseExpressionRange = _v35.a;
										return lastCaseExpressionRange.b9;
									} else {
										var _v36 = firstCase;
										var _v37 = _v36.b;
										var firstCaseExpressionRange = _v37.a;
										return firstCaseExpressionRange.b9;
									}
								}(),
								cB: {a6: start.a6 - 4, bp: start.bp}
							},
							$stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression(
								{
									gE: A2(
										$elm$core$List$cons,
										firstCase,
										$elm$core$List$reverse(lastToSecondCase)),
									dm: casedExpressionResult.a
								}))
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'of', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
			$stil4m$elm_syntax$ParserFast$withIndentSetToColumn(
				$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatements())));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatements() {
	return A6(
		$stil4m$elm_syntax$ParserFast$map5,
		F5(
			function (firstCasePatternResult, commentsAfterFirstCasePattern, commentsAfterFirstCaseArrowRight, firstCaseExpressionResult, lastToSecondCase) {
				return {
					gI: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						lastToSecondCase.gI,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							firstCaseExpressionResult.gI,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								commentsAfterFirstCaseArrowRight,
								A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterFirstCasePattern, firstCasePatternResult.gI)))),
					a: _Utils_Tuple2(
						_Utils_Tuple2(firstCasePatternResult.a, firstCaseExpressionResult.a),
						lastToSecondCase.a)
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Patterns$pattern,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '->', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
		$stil4m$elm_syntax$ParserWithComments$manyWithoutReverse(
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatement()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatement() {
	return $stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy(
		A5(
			$stil4m$elm_syntax$ParserFast$map4,
			F4(
				function (pattern, commentsBeforeArrowRight, commentsAfterArrowRight, expr) {
					return {
						gI: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							expr.gI,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								commentsAfterArrowRight,
								A2($stil4m$elm_syntax$Rope$prependTo, commentsBeforeArrowRight, pattern.gI))),
						a: _Utils_Tuple2(pattern.a, expr.a)
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Patterns$pattern,
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '->', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionIfNecessaryFollowedByRecordAccess() {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'(',
		A3(
			$stil4m$elm_syntax$ParserFast$oneOf3,
			A2(
				$stil4m$elm_syntax$ParserFast$symbolWithEndLocation,
				')',
				function (end) {
					return {
						gI: $stil4m$elm_syntax$Rope$empty,
						a: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{
								b9: end,
								cB: {a6: end.a6 - 2, bp: end.bp}
							},
							$stil4m$elm_syntax$Elm$Syntax$Expression$UnitExpr)
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Expression$allowedPrefixOperatorFollowedByClosingParensOneOf,
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionInnerAfterOpeningParens()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionInnerAfterOpeningParens() {
	return A5(
		$stil4m$elm_syntax$ParserFast$map4WithRange,
		F5(
			function (rangeAfterOpeningParens, commentsBeforeFirstPart, firstPart, commentsAfterFirstPart, tailParts) {
				return {
					gI: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						tailParts.gI,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							commentsAfterFirstPart,
							A2($stil4m$elm_syntax$Rope$prependTo, firstPart.gI, commentsBeforeFirstPart))),
					a: function () {
						var _v27 = tailParts.a;
						if (!_v27.$) {
							var recordAccesses = _v27.a;
							if (!recordAccesses.b) {
								return A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									{
										b9: rangeAfterOpeningParens.b9,
										cB: {a6: rangeAfterOpeningParens.cB.a6 - 1, bp: rangeAfterOpeningParens.cB.bp}
									},
									$stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression(firstPart.a));
							} else {
								var _v29 = recordAccesses.a;
								var firstRecordAccessRange = _v29.a;
								var range = {
									b9: {a6: firstRecordAccessRange.cB.a6 - 1, bp: firstRecordAccessRange.cB.bp},
									cB: {a6: rangeAfterOpeningParens.cB.a6 - 1, bp: rangeAfterOpeningParens.cB.bp}
								};
								var parenthesizedNode = A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									range,
									$stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression(firstPart.a));
								return A3(
									$elm$core$List$foldl,
									F2(
										function (fieldNode, leftNode) {
											var fieldRange = fieldNode.a;
											var leftRange = leftNode.a;
											return A2(
												$stil4m$elm_syntax$Elm$Syntax$Node$Node,
												{b9: fieldRange.b9, cB: leftRange.cB},
												A2($stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess, leftNode, fieldNode));
										}),
									parenthesizedNode,
									recordAccesses);
							}
						} else {
							var _v30 = _v27.a;
							var secondPart = _v30.a;
							var maybeThirdPart = _v30.b;
							return A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{
									b9: rangeAfterOpeningParens.b9,
									cB: {a6: rangeAfterOpeningParens.cB.a6 - 1, bp: rangeAfterOpeningParens.cB.bp}
								},
								function () {
									if (maybeThirdPart.$ === 1) {
										return $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression(
											_List_fromArray(
												[firstPart.a, secondPart]));
									} else {
										var thirdPart = maybeThirdPart.a;
										return $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression(
											_List_fromArray(
												[firstPart.a, secondPart, thirdPart]));
									}
								}());
						}
					}()
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		A2(
			$stil4m$elm_syntax$ParserFast$oneOf2,
			A2(
				$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
				')',
				$stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccessMap(
					function (recordAccesses) {
						return {
							gI: $stil4m$elm_syntax$Rope$empty,
							a: $stil4m$elm_syntax$Elm$Parser$Expression$TupledParenthesizedFollowedByRecordAccesses(recordAccesses)
						};
					})),
			A2(
				$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
				',',
				A5(
					$stil4m$elm_syntax$ParserFast$map4,
					F4(
						function (commentsBefore, partResult, commentsAfter, maybeThirdPart) {
							return {
								gI: A2(
									$stil4m$elm_syntax$Rope$prependTo,
									maybeThirdPart.gI,
									A2(
										$stil4m$elm_syntax$Rope$prependTo,
										commentsAfter,
										A2($stil4m$elm_syntax$Rope$prependTo, partResult.gI, commentsBefore))),
								a: $stil4m$elm_syntax$Elm$Parser$Expression$TupledTwoOrThree(
									_Utils_Tuple2(partResult.a, maybeThirdPart.a))
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					A2(
						$stil4m$elm_syntax$ParserFast$oneOf2,
						A2(
							$stil4m$elm_syntax$ParserFast$symbol,
							')',
							{gI: $stil4m$elm_syntax$Rope$empty, a: $elm$core$Maybe$Nothing}),
						A2(
							$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
							',',
							A2(
								$stil4m$elm_syntax$ParserFast$followedBySymbol,
								')',
								A4(
									$stil4m$elm_syntax$ParserFast$map3,
									F3(
										function (commentsBefore, partResult, commentsAfter) {
											return {
												gI: A2(
													$stil4m$elm_syntax$Rope$prependTo,
													commentsAfter,
													A2($stil4m$elm_syntax$Rope$prependTo, partResult.gI, commentsBefore)),
												a: $elm$core$Maybe$Just(partResult.a)
											};
										}),
									$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
									$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
									$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))))))));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordExpressionFollowedByRecordAccess() {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'{',
		A3(
			$stil4m$elm_syntax$ParserFast$map2,
			F2(
				function (leftestResult, recordAccesses) {
					if (!recordAccesses.b) {
						return leftestResult;
					} else {
						return {
							gI: leftestResult.gI,
							a: A3(
								$elm$core$List$foldl,
								F2(
									function (fieldNode, leftNode) {
										var fieldRange = fieldNode.a;
										var leftRange = leftNode.a;
										return A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											{b9: fieldRange.b9, cB: leftRange.cB},
											A2($stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess, leftNode, fieldNode));
									}),
								leftestResult.a,
								recordAccesses)
						};
					}
				}),
			A3(
				$stil4m$elm_syntax$ParserFast$map2WithRange,
				F3(
					function (range, commentsBefore, afterCurly) {
						return {
							gI: A2($stil4m$elm_syntax$Rope$prependTo, afterCurly.gI, commentsBefore),
							a: A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								$stil4m$elm_syntax$Elm$Parser$Expression$rangeMoveStartLeftByOneColumn(range),
								afterCurly.a)
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordContentsCurlyEnd()),
			$stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccess));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordContentsCurlyEnd() {
	return A2(
		$stil4m$elm_syntax$ParserFast$oneOf2,
		A6(
			$stil4m$elm_syntax$ParserFast$map5,
			F5(
				function (nameNode, commentsAfterFunctionName, afterNameBeforeFields, tailFields, commentsBeforeClosingCurly) {
					return {
						gI: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							commentsBeforeClosingCurly,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								tailFields.gI,
								A2($stil4m$elm_syntax$Rope$prependTo, afterNameBeforeFields.gI, commentsAfterFunctionName))),
						a: function () {
							var _v25 = afterNameBeforeFields.a;
							if (!_v25.$) {
								var firstField = _v25.a;
								return A2(
									$stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression,
									nameNode,
									A2($elm$core$List$cons, firstField, tailFields.a));
							} else {
								var firstFieldValue = _v25.a;
								return $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr(
									A2(
										$elm$core$List$cons,
										A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $elm$core$Tuple$pair, nameNode, firstFieldValue),
										tailFields.a));
							}
						}()
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A2(
				$stil4m$elm_syntax$ParserFast$oneOf2,
				A2(
					$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
					'|',
					A3(
						$stil4m$elm_syntax$ParserFast$map2,
						F2(
							function (commentsBefore, setterResult) {
								return {
									gI: A2($stil4m$elm_syntax$Rope$prependTo, setterResult.gI, commentsBefore),
									a: $stil4m$elm_syntax$Elm$Parser$Expression$RecordUpdateFirstSetter(setterResult.a)
								};
							}),
						$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
						$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordSetterNodeWithLayout())),
				A2(
					$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
					'=',
					A4(
						$stil4m$elm_syntax$ParserFast$map3,
						F3(
							function (commentsBefore, expressionResult, commentsAfter) {
								return {
									gI: A2(
										$stil4m$elm_syntax$Rope$prependTo,
										commentsAfter,
										A2($stil4m$elm_syntax$Rope$prependTo, expressionResult.gI, commentsBefore)),
									a: $stil4m$elm_syntax$Elm$Parser$Expression$FieldsFirstValue(expressionResult.a)
								};
							}),
						$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
						$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
						$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))),
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordFields(),
			A2($stil4m$elm_syntax$ParserFast$followedBySymbol, '}', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)),
		A2(
			$stil4m$elm_syntax$ParserFast$symbol,
			'}',
			{
				gI: $stil4m$elm_syntax$Rope$empty,
				a: $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr(_List_Nil)
			}));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordFields() {
	return $stil4m$elm_syntax$ParserWithComments$many(
		A2(
			$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
			',',
			A3(
				$stil4m$elm_syntax$ParserFast$map2,
				F2(
					function (commentsBefore, setterResult) {
						return {
							gI: A2($stil4m$elm_syntax$Rope$prependTo, setterResult.gI, commentsBefore),
							a: setterResult.a
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordSetterNodeWithLayout())));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordSetterNodeWithLayout() {
	return A6(
		$stil4m$elm_syntax$ParserFast$map5WithRange,
		F6(
			function (range, name, commentsAfterFunctionName, commentsAfterEquals, expressionResult, commentsAfterExpression) {
				return {
					gI: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterExpression,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							expressionResult.gI,
							A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterEquals, commentsAfterFunctionName))),
					a: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						range,
						_Utils_Tuple2(name, expressionResult.a))
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '=', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout);
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letFunction() {
	return A3(
		$stil4m$elm_syntax$ParserFast$validate,
		function (result) {
			var _v18 = result.a;
			var letDeclaration = _v18.b;
			if (letDeclaration.$ === 1) {
				return true;
			} else {
				var letFunctionDeclaration = letDeclaration.a;
				var _v20 = letFunctionDeclaration.hJ;
				if (_v20.$ === 1) {
					return true;
				} else {
					var _v21 = _v20.a;
					var signature = _v21.b;
					var _v22 = signature.bV;
					var signatureName = _v22.b;
					var _v23 = letFunctionDeclaration.gM;
					var implementation = _v23.b;
					var _v24 = implementation.bV;
					var implementationName = _v24.b;
					return _Utils_eq(implementationName, signatureName + '');
				}
			}
		},
		'Expected to find the same name for declaration and signature',
		A7(
			$stil4m$elm_syntax$ParserFast$map6WithStartLocation,
			F7(
				function (startNameStart, startNameNode, commentsAfterStartName, maybeSignature, _arguments, commentsAfterEqual, expressionResult) {
					var allComments = A2(
						$stil4m$elm_syntax$Rope$prependTo,
						expressionResult.gI,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							commentsAfterEqual,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								_arguments.gI,
								function () {
									if (maybeSignature.$ === 1) {
										return commentsAfterStartName;
									} else {
										var signature = maybeSignature.a;
										return A2($stil4m$elm_syntax$Rope$prependTo, signature.gI, commentsAfterStartName);
									}
								}())));
					if (maybeSignature.$ === 1) {
						var _v14 = expressionResult.a;
						var expressionRange = _v14.a;
						return {
							gI: allComments,
							a: A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{b9: expressionRange.b9, cB: startNameStart},
								$stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction(
									{
										gM: A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											{b9: expressionRange.b9, cB: startNameStart},
											{eY: _arguments.a, dm: expressionResult.a, bV: startNameNode}),
										ed: $elm$core$Maybe$Nothing,
										hJ: $elm$core$Maybe$Nothing
									}))
						};
					} else {
						var signature = maybeSignature.a;
						var _v15 = signature.cn;
						var implementationNameRange = _v15.a;
						var _v16 = expressionResult.a;
						var expressionRange = _v16.a;
						return {
							gI: allComments,
							a: A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{b9: expressionRange.b9, cB: startNameStart},
								$stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction(
									{
										gM: A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											{b9: expressionRange.b9, cB: implementationNameRange.cB},
											{eY: _arguments.a, dm: expressionResult.a, bV: signature.cn}),
										ed: $elm$core$Maybe$Nothing,
										hJ: $elm$core$Maybe$Just(
											A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Signature$Signature, startNameNode, signature.gk))
									}))
						};
					}
				}),
			$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A6(
				$stil4m$elm_syntax$ParserFast$map4OrSucceed,
				F4(
					function (commentsBeforeTypeAnnotation, typeAnnotationResult, implementationName, afterImplementationName) {
						return $elm$core$Maybe$Just(
							{
								gI: A2(
									$stil4m$elm_syntax$Rope$prependTo,
									afterImplementationName,
									A2(
										$stil4m$elm_syntax$Rope$prependTo,
										implementationName.gI,
										A2($stil4m$elm_syntax$Rope$prependTo, typeAnnotationResult.gI, commentsBeforeTypeAnnotation))),
								cn: implementationName.a,
								gk: typeAnnotationResult.a
							});
					}),
				A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, ':', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
				$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation,
				$stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedBy($stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				$elm$core$Maybe$Nothing),
			$stil4m$elm_syntax$Elm$Parser$Expression$parameterPatternsEqual,
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDestructuringDeclaration() {
	return A5(
		$stil4m$elm_syntax$ParserFast$map4,
		F4(
			function (pattern, commentsAfterPattern, commentsAfterEquals, expressionResult) {
				var _v11 = pattern.a;
				var start = _v11.a.cB;
				var _v12 = expressionResult.a;
				var end = _v12.a.b9;
				return {
					gI: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						expressionResult.gI,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							commentsAfterEquals,
							A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterPattern, pattern.gI))),
					a: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						{b9: end, cB: start},
						A2($stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring, pattern.a, expressionResult.a))
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '=', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression());
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$lambdaExpression() {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'\\',
		A7(
			$stil4m$elm_syntax$ParserFast$map6WithStartLocation,
			F7(
				function (start, commentsAfterBackslash, firstArg, commentsAfterFirstArg, secondUpArgs, commentsAfterArrow, expressionResult) {
					var _v10 = expressionResult.a;
					var expressionRange = _v10.a;
					return {
						gI: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							expressionResult.gI,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								commentsAfterArrow,
								A2(
									$stil4m$elm_syntax$Rope$prependTo,
									secondUpArgs.gI,
									A2(
										$stil4m$elm_syntax$Rope$prependTo,
										commentsAfterFirstArg,
										A2($stil4m$elm_syntax$Rope$prependTo, firstArg.gI, commentsAfterBackslash))))),
						a: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{
								b9: expressionRange.b9,
								cB: {a6: start.a6 - 1, bp: start.bp}
							},
							$stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression(
								{
									gt: A2($elm$core$List$cons, firstArg.a, secondUpArgs.a),
									dm: expressionResult.a
								}))
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			$stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing,
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A2(
				$stil4m$elm_syntax$ParserWithComments$until,
				A2($stil4m$elm_syntax$ParserFast$symbol, '->', 0),
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (patternResult, commentsAfter) {
							return {
								gI: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, patternResult.gI),
								a: patternResult.a
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing,
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifOrUnqualifiedReferenceExpression() {
	return A2(
		$stil4m$elm_syntax$ParserFast$oneOf2,
		$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifBlockExpression(),
		$stil4m$elm_syntax$Elm$Parser$Expression$unqualifiedFunctionReferenceExpressionFollowedByRecordAccess);
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifBlockExpression() {
	return A2(
		$stil4m$elm_syntax$ParserFast$keywordFollowedBy,
		'if',
		A9(
			$stil4m$elm_syntax$ParserFast$map8WithStartLocation,
			F9(
				function (start, commentsAfterIf, condition, commentsBeforeThen, commentsAfterThen, ifTrue, commentsBeforeElse, commentsAfterElse, ifFalse) {
					var _v9 = ifFalse.a;
					var ifFalseRange = _v9.a;
					return {
						gI: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							ifFalse.gI,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								commentsAfterElse,
								A2(
									$stil4m$elm_syntax$Rope$prependTo,
									commentsBeforeElse,
									A2(
										$stil4m$elm_syntax$Rope$prependTo,
										ifTrue.gI,
										A2(
											$stil4m$elm_syntax$Rope$prependTo,
											commentsAfterThen,
											A2(
												$stil4m$elm_syntax$Rope$prependTo,
												commentsBeforeThen,
												A2($stil4m$elm_syntax$Rope$prependTo, condition.gI, commentsAfterIf))))))),
						a: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{
								b9: ifFalseRange.b9,
								cB: {a6: start.a6 - 2, bp: start.bp}
							},
							A3($stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock, condition.a, ifTrue.a, ifFalse.a))
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'then', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'else', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$listOrGlslExpression() {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'[',
		$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expressionAfterOpeningSquareBracket());
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expressionAfterOpeningSquareBracket() {
	return A2(
		$stil4m$elm_syntax$ParserFast$oneOf2,
		$stil4m$elm_syntax$Elm$Parser$Expression$glslExpressionAfterOpeningSquareBracket,
		A3(
			$stil4m$elm_syntax$ParserFast$map2WithRange,
			F3(
				function (range, commentsBefore, elements) {
					return {
						gI: A2($stil4m$elm_syntax$Rope$prependTo, elements.gI, commentsBefore),
						a: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{
								b9: range.b9,
								cB: {a6: range.cB.a6 - 1, bp: range.cB.bp}
							},
							elements.a)
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A2(
				$stil4m$elm_syntax$ParserFast$oneOf2,
				A2(
					$stil4m$elm_syntax$ParserFast$symbol,
					']',
					{
						gI: $stil4m$elm_syntax$Rope$empty,
						a: $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr(_List_Nil)
					}),
				A2(
					$stil4m$elm_syntax$ParserFast$followedBySymbol,
					']',
					A4(
						$stil4m$elm_syntax$ParserFast$map3,
						F3(
							function (head, commentsAfterHead, tail) {
								return {
									gI: A2(
										$stil4m$elm_syntax$Rope$prependTo,
										tail.gI,
										A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterHead, head.gI)),
									a: $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr(
										A2($elm$core$List$cons, head.a, tail.a))
								};
							}),
						$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
						$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
						$stil4m$elm_syntax$ParserWithComments$many(
							A2(
								$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
								',',
								$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
									$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()))))))));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression() {
	return A2(
		$stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout,
		$elm$core$Result$Ok,
		function ($) {
			return $.bc;
		});
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeL() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 9, '<<');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8QuestionMark() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 8, '<?>');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Mul() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 7, '*');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Idiv() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 7, '//');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Fdiv() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 7, '/');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Sub() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 6, '-');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Ignore() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 6, '|.');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Add() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 6, '+');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Keep() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 5, '|=');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApR() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 1, '|>');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Neq() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative, 4, '/=');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Lt() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative, 4, '<');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Le() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative, 4, '<=');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Gt() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative, 4, '>');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Ge() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative, 4, '>=');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Eq() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative, 4, '==');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeR() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight, 9, '>>');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8Pow() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight, 8, '^');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Slash() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight, 7, '</>');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5append() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight, 5, '++');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Cons() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight, 5, '::');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence3And() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight, 3, '&&');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence2Or() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight, 2, '||');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApL() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight, 1, '<|');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus() {
	return A2(
		$stil4m$elm_syntax$ParserFast$map,
		function (subExpressionResult) {
			var _v6 = subExpressionResult.a;
			var subExpressionRange = _v6.a;
			return {
				gI: subExpressionResult.gI,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					{
						b9: subExpressionRange.b9,
						cB: {a6: subExpressionRange.cB.a6 - 1, bp: subExpressionRange.cB.bp}
					},
					$stil4m$elm_syntax$Elm$Syntax$Expression$Negation(subExpressionResult.a))
			};
		},
		$stil4m$elm_syntax$ParserFast$lazy(
			function (_v7) {
				return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression();
			}));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationOperation() {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolBacktrackableFollowedBy,
		'-',
		$stil4m$elm_syntax$ParserFast$offsetSourceAndThen(
			F2(
				function (offset, source) {
					var _v5 = A3($elm$core$String$slice, offset - 2, offset - 1, source);
					switch (_v5) {
						case ' ':
							return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
						case '(':
							return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
						case ')':
							return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
						case '}':
							return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
						case ',':
							return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
						case '':
							return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
						default:
							return $stil4m$elm_syntax$Elm$Parser$Expression$negationWhitespaceProblem;
					}
				})));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression() {
	return $stil4m$elm_syntax$ParserFast$offsetSourceAndThen(
		F2(
			function (offset, source) {
				var _v4 = A3($elm$core$String$slice, offset, offset + 1, source);
				switch (_v4) {
					case '\"':
						return $stil4m$elm_syntax$Elm$Parser$Expression$literalExpression;
					case '(':
						return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionIfNecessaryFollowedByRecordAccess();
					case '[':
						return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$listOrGlslExpression();
					case '{':
						return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordExpressionFollowedByRecordAccess();
					case 'c':
						return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseOrUnqualifiedReferenceExpression();
					case '\\':
						return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$lambdaExpression();
					case 'l':
						return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letOrUnqualifiedReferenceExpression();
					case 'i':
						return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifOrUnqualifiedReferenceExpression();
					case '.':
						return $stil4m$elm_syntax$Elm$Parser$Expression$recordAccessFunctionExpression;
					case '-':
						return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationOperation();
					case '\'':
						return $stil4m$elm_syntax$Elm$Parser$Expression$charLiteralExpression;
					default:
						return $stil4m$elm_syntax$Elm$Parser$Expression$referenceOrNumberExpression;
				}
			}));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpressionMaybeAppliedOptimisticLayout() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map3,
		F3(
			function (leftExpressionResult, commentsBeforeExtension, maybeArgsReverse) {
				return {
					gI: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						maybeArgsReverse.gI,
						A2($stil4m$elm_syntax$Rope$prependTo, commentsBeforeExtension, leftExpressionResult.gI)),
					a: function () {
						var _v0 = maybeArgsReverse.a;
						if (!_v0.b) {
							return leftExpressionResult.a;
						} else {
							var argsReverse = _v0;
							var _v1 = argsReverse.a;
							var lastArgRange = _v1.a;
							var leftNode = leftExpressionResult.a;
							var leftRange = leftNode.a;
							return A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{b9: lastArgRange.b9, cB: leftRange.cB},
								$stil4m$elm_syntax$Elm$Syntax$Expression$Application(
									A2(
										$elm$core$List$cons,
										leftNode,
										$elm$core$List$reverse(argsReverse))));
						}
					}()
				};
			}),
		$stil4m$elm_syntax$ParserFast$lazy(
			function (_v2) {
				return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression();
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		$stil4m$elm_syntax$ParserWithComments$manyWithoutReverse(
			A3(
				$stil4m$elm_syntax$ParserFast$map2,
				F2(
					function (arg, commentsAfter) {
						return {
							gI: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, arg.gI),
							a: arg.a
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy(
					$stil4m$elm_syntax$ParserFast$lazy(
						function (_v3) {
							return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression();
						})),
				$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout)));
}
var $stil4m$elm_syntax$Elm$Parser$Expression$letOrUnqualifiedReferenceExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letOrUnqualifiedReferenceExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letOrUnqualifiedReferenceExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$letOrUnqualifiedReferenceExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$letExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$letExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$letDeclarationsIn = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDeclarationsIn();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDeclarationsIn = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$letDeclarationsIn;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$blockElement = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$blockElement();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$blockElement = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$blockElement;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$caseOrUnqualifiedReferenceExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseOrUnqualifiedReferenceExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseOrUnqualifiedReferenceExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$caseOrUnqualifiedReferenceExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$caseExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$caseExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$caseStatements = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatements();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatements = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$caseStatements;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$caseStatement = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatement();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatement = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$caseStatement;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$tupledExpressionIfNecessaryFollowedByRecordAccess = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionIfNecessaryFollowedByRecordAccess();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionIfNecessaryFollowedByRecordAccess = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$tupledExpressionIfNecessaryFollowedByRecordAccess;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$tupledExpressionInnerAfterOpeningParens = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionInnerAfterOpeningParens();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionInnerAfterOpeningParens = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$tupledExpressionInnerAfterOpeningParens;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$recordExpressionFollowedByRecordAccess = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordExpressionFollowedByRecordAccess();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordExpressionFollowedByRecordAccess = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$recordExpressionFollowedByRecordAccess;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$recordContentsCurlyEnd = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordContentsCurlyEnd();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordContentsCurlyEnd = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$recordContentsCurlyEnd;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$recordFields = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordFields();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordFields = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$recordFields;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$recordSetterNodeWithLayout = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordSetterNodeWithLayout();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordSetterNodeWithLayout = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$recordSetterNodeWithLayout;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$letFunction = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letFunction();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letFunction = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$letFunction;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$letDestructuringDeclaration = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDestructuringDeclaration();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDestructuringDeclaration = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$letDestructuringDeclaration;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$lambdaExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$lambdaExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$lambdaExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$lambdaExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$ifOrUnqualifiedReferenceExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifOrUnqualifiedReferenceExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifOrUnqualifiedReferenceExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$ifOrUnqualifiedReferenceExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$ifBlockExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifBlockExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifBlockExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$ifBlockExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$listOrGlslExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$listOrGlslExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$listOrGlslExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$listOrGlslExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$expressionAfterOpeningSquareBracket = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expressionAfterOpeningSquareBracket();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expressionAfterOpeningSquareBracket = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$expressionAfterOpeningSquareBracket;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$expression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$expression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence9ComposeL = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeL();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeL = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence9ComposeL;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence8QuestionMark = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8QuestionMark();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8QuestionMark = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence8QuestionMark;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Mul = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Mul();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Mul = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Mul;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Idiv = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Idiv();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Idiv = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Idiv;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Fdiv = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Fdiv();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Fdiv = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Fdiv;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Sub = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Sub();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Sub = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Sub;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Ignore = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Ignore();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Ignore = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Ignore;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Add = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Add();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Add = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Add;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence5Keep = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Keep();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Keep = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence5Keep;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence1ApR = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApR();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApR = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence1ApR;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Neq = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Neq();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Neq = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Neq;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Lt = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Lt();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Lt = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Lt;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Le = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Le();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Le = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Le;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Gt = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Gt();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Gt = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Gt;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Ge = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Ge();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Ge = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Ge;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Eq = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Eq();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Eq = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Eq;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence9ComposeR = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeR();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeR = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence9ComposeR;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence8Pow = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8Pow();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8Pow = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence8Pow;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Slash = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Slash();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Slash = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Slash;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence5append = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5append();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5append = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence5append;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence5Cons = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Cons();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Cons = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence5Cons;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence3And = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence3And();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence3And = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence3And;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence2Or = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence2Or();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence2Or = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence2Or;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence1ApL = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApL();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApL = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$precedence1ApL;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$negationAfterMinus = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$negationAfterMinus;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$negationOperation = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationOperation();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationOperation = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$negationOperation;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$subExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$subExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$subExpressionMaybeAppliedOptimisticLayout = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpressionMaybeAppliedOptimisticLayout();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpressionMaybeAppliedOptimisticLayout = function () {
	return $stil4m$elm_syntax$Elm$Parser$Expression$subExpressionMaybeAppliedOptimisticLayout;
};
var $stil4m$elm_syntax$ParserFast$map6 = F7(
	function (func, _v0, _v1, _v2, _v3, _v4, _v5) {
		var parseA = _v0;
		var parseB = _v1;
		var parseC = _v2;
		var parseD = _v3;
		var parseE = _v4;
		var parseF = _v5;
		return function (s0) {
			var _v6 = parseA(s0);
			if (_v6.$ === 1) {
				var committed = _v6.a;
				var x = _v6.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var a = _v6.a;
				var s1 = _v6.b;
				var _v7 = parseB(s1);
				if (_v7.$ === 1) {
					var x = _v7.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v7.a;
					var s2 = _v7.b;
					var _v8 = parseC(s2);
					if (_v8.$ === 1) {
						var x = _v8.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var c = _v8.a;
						var s3 = _v8.b;
						var _v9 = parseD(s3);
						if (_v9.$ === 1) {
							var x = _v9.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var d = _v9.a;
							var s4 = _v9.b;
							var _v10 = parseE(s4);
							if (_v10.$ === 1) {
								var x = _v10.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var e = _v10.a;
								var s5 = _v10.b;
								var _v11 = parseF(s5);
								if (_v11.$ === 1) {
									var x = _v11.b;
									return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
								} else {
									var f = _v11.a;
									var s6 = _v11.b;
									return A2(
										$stil4m$elm_syntax$ParserFast$Good,
										A6(func, a, b, c, d, e, f),
										s6);
								}
							}
						}
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$parameterPatternsEqual = A2(
	$stil4m$elm_syntax$ParserWithComments$until,
	$stil4m$elm_syntax$Elm$Parser$Tokens$equal,
	A3(
		$stil4m$elm_syntax$ParserFast$map2,
		F2(
			function (patternResult, commentsAfterPattern) {
				return {
					gI: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterPattern, patternResult.gI),
					a: patternResult.a
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout));
var $stil4m$elm_syntax$Elm$Parser$Declarations$functionAfterDocumentation = A7(
	$stil4m$elm_syntax$ParserFast$map6,
	F6(
		function (startName, commentsAfterStartName, maybeSignature, _arguments, commentsAfterEqual, result) {
			return {
				gI: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					result.gI,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterEqual,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							_arguments.gI,
							function () {
								if (maybeSignature.$ === 1) {
									return commentsAfterStartName;
								} else {
									var signature = maybeSignature.a;
									return A2($stil4m$elm_syntax$Rope$prependTo, signature.gI, commentsAfterStartName);
								}
							}()))),
				a: $stil4m$elm_syntax$Elm$Parser$Declarations$FunctionDeclarationAfterDocumentation(
					{
						eY: _arguments.a,
						dm: result.a,
						hJ: A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.a;
							},
							maybeSignature),
						dW: startName
					})
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	A6(
		$stil4m$elm_syntax$ParserFast$map4OrSucceed,
		F4(
			function (commentsBeforeTypeAnnotation, typeAnnotationResult, implementationName, afterImplementationName) {
				return $elm$core$Maybe$Just(
					{
						gI: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							afterImplementationName,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								implementationName.gI,
								A2($stil4m$elm_syntax$Rope$prependTo, typeAnnotationResult.gI, commentsBeforeTypeAnnotation))),
						a: {cn: implementationName.a, gk: typeAnnotationResult.a}
					});
			}),
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, ':', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation,
		$stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedBy($stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		$elm$core$Maybe$Nothing),
	$stil4m$elm_syntax$Elm$Parser$Declarations$parameterPatternsEqual,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Expression$expression);
var $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedByWithComments = function (nextParser) {
	return A3(
		$stil4m$elm_syntax$ParserFast$map2,
		F2(
			function (commentsBefore, after) {
				return {
					gI: A2($stil4m$elm_syntax$Rope$prependTo, after.gI, commentsBefore),
					a: after.a
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		$stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy(nextParser));
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$PortDeclarationAfterDocumentation = function (a) {
	return {$: 3, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$portDeclarationAfterDocumentation = A6(
	$stil4m$elm_syntax$ParserFast$map5,
	F5(
		function (commentsAfterPort, name, commentsAfterName, commentsAfterColon, typeAnnotationResult) {
			var nameRange = name.a;
			return {
				gI: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					commentsAfterColon,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						typeAnnotationResult.gI,
						A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterName, commentsAfterPort))),
				a: $stil4m$elm_syntax$Elm$Parser$Declarations$PortDeclarationAfterDocumentation(
					{
						bV: name,
						f6: {a6: 1, bp: nameRange.cB.bp},
						gk: typeAnnotationResult.a
					})
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'port', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, ':', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation);
var $stil4m$elm_syntax$Elm$Syntax$Node$range = function (_v0) {
	var r = _v0.a;
	return r;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$TypeDeclarationAfterDocumentation = function (a) {
	return {$: 1, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$typeGenericListEquals = A2(
	$stil4m$elm_syntax$ParserWithComments$until,
	$stil4m$elm_syntax$Elm$Parser$Tokens$equal,
	A3(
		$stil4m$elm_syntax$ParserFast$map2,
		F2(
			function (name, commentsAfterName) {
				return {gI: commentsAfterName, a: name};
			}),
		$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout));
var $stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak = F3(
	function (rangeAndConsumedStringToRes, firstIsOkay, afterFirstIsOkay) {
		return function (s0) {
			var firstOffset = A3($stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak, firstIsOkay, s0.e, s0.d);
			if (_Utils_eq(firstOffset, -1)) {
				return A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A2($stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate, s0.bp, s0.da));
			} else {
				var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp, afterFirstIsOkay, firstOffset, s0.bp, s0.da + 1, s0.d, s0.o);
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					A2(
						rangeAndConsumedStringToRes,
						{
							b9: {a6: s1.da, bp: s1.bp},
							cB: {a6: s0.da, bp: s0.bp}
						},
						A3($elm$core$String$slice, s0.e, s1.e, s0.d)),
					s1);
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode = A3($stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak, $stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Char$Extra$unicodeIsUpperFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast);
var $stil4m$elm_syntax$Elm$Parser$Declarations$valueConstructorOptimisticLayout = A4(
	$stil4m$elm_syntax$ParserFast$map3,
	F3(
		function (name, commentsAfterName, argumentsReverse) {
			var nameRange = name.a;
			var fullRange = function () {
				var _v0 = argumentsReverse.a;
				if (_v0.b) {
					var _v1 = _v0.a;
					var lastArgRange = _v1.a;
					return {b9: lastArgRange.b9, cB: nameRange.cB};
				} else {
					return nameRange;
				}
			}();
			return {
				gI: A2($stil4m$elm_syntax$Rope$prependTo, argumentsReverse.gI, commentsAfterName),
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					fullRange,
					{
						eY: $elm$core$List$reverse(argumentsReverse.a),
						bV: name
					})
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
	$stil4m$elm_syntax$ParserWithComments$manyWithoutReverse(
		$stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy(
			A3(
				$stil4m$elm_syntax$ParserFast$map2,
				F2(
					function (typeAnnotationResult, commentsAfter) {
						return {
							gI: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, typeAnnotationResult.gI),
							a: typeAnnotationResult.a
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFnExcludingTypedWithArguments,
				$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout))));
var $stil4m$elm_syntax$Elm$Parser$Declarations$customTypeDefinitionAfterDocumentationAfterTypePrefix = A7(
	$stil4m$elm_syntax$ParserFast$map6,
	F6(
		function (name, commentsAfterName, parameters, commentsAfterEqual, headVariant, tailVariantsReverse) {
			return {
				gI: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					tailVariantsReverse.gI,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						headVariant.gI,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							commentsAfterEqual,
							A2($stil4m$elm_syntax$Rope$prependTo, parameters.gI, commentsAfterName)))),
				a: $stil4m$elm_syntax$Elm$Parser$Declarations$TypeDeclarationAfterDocumentation(
					{cm: headVariant.a, bV: name, bn: parameters.a, cC: tailVariantsReverse.a})
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Declarations$typeGenericListEquals,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Declarations$valueConstructorOptimisticLayout,
	$stil4m$elm_syntax$ParserWithComments$manyWithoutReverse(
		A2(
			$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
			'|',
			A2(
				$stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy,
				1,
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (commentsBeforePipe, variantResult) {
							return {
								gI: A2($stil4m$elm_syntax$Rope$prependTo, variantResult.gI, commentsBeforePipe),
								a: variantResult.a
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					$stil4m$elm_syntax$Elm$Parser$Declarations$valueConstructorOptimisticLayout)))));
var $stil4m$elm_syntax$Elm$Parser$Declarations$TypeAliasDeclarationAfterDocumentation = function (a) {
	return {$: 2, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$typeAliasDefinitionAfterDocumentationAfterTypePrefix = A7(
	$stil4m$elm_syntax$ParserFast$map6,
	F6(
		function (commentsAfterAlias, name, commentsAfterName, parameters, commentsAfterEquals, typeAnnotationResult) {
			return {
				gI: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					typeAnnotationResult.gI,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterEquals,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							parameters.gI,
							A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterName, commentsAfterAlias)))),
				a: $stil4m$elm_syntax$Elm$Parser$Declarations$TypeAliasDeclarationAfterDocumentation(
					{bV: name, bn: parameters.a, gk: typeAnnotationResult.a})
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'alias', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Declarations$typeGenericListEquals,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation);
var $stil4m$elm_syntax$Elm$Parser$Declarations$typeOrTypeAliasDefinitionAfterDocumentation = A3(
	$stil4m$elm_syntax$ParserFast$map2,
	F2(
		function (commentsAfterType, declarationAfterDocumentation) {
			return {
				gI: A2($stil4m$elm_syntax$Rope$prependTo, declarationAfterDocumentation.gI, commentsAfterType),
				a: declarationAfterDocumentation.a
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'type', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	A2($stil4m$elm_syntax$ParserFast$oneOf2, $stil4m$elm_syntax$Elm$Parser$Declarations$typeAliasDefinitionAfterDocumentationAfterTypePrefix, $stil4m$elm_syntax$Elm$Parser$Declarations$customTypeDefinitionAfterDocumentationAfterTypePrefix));
var $stil4m$elm_syntax$Elm$Parser$Declarations$declarationWithDocumentation = A3(
	$stil4m$elm_syntax$ParserFast$validate,
	function (result) {
		var _v11 = result.a;
		var decl = _v11.b;
		if (!decl.$) {
			var letFunctionDeclaration = decl.a;
			var _v13 = letFunctionDeclaration.hJ;
			if (_v13.$ === 1) {
				return true;
			} else {
				var _v14 = _v13.a;
				var signature = _v14.b;
				var _v15 = signature.bV;
				var signatureName = _v15.b;
				var _v16 = letFunctionDeclaration.gM;
				var implementation = _v16.b;
				var _v17 = implementation.bV;
				var implementationName = _v17.b;
				return _Utils_eq(implementationName, signatureName + '');
			}
		} else {
			return true;
		}
	},
	'Expected to find the same name for declaration and signature',
	A3(
		$stil4m$elm_syntax$ParserFast$map2,
		F2(
			function (documentation, afterDocumentation) {
				var start = $stil4m$elm_syntax$Elm$Syntax$Node$range(documentation).cB;
				var _v0 = afterDocumentation.a;
				switch (_v0.$) {
					case 0:
						var functionDeclarationAfterDocumentation = _v0.a;
						var _v1 = functionDeclarationAfterDocumentation.hJ;
						if (!_v1.$) {
							var signature = _v1.a;
							var _v2 = signature.cn;
							var implementationNameRange = _v2.a;
							var _v3 = functionDeclarationAfterDocumentation.dm;
							var expressionRange = _v3.a;
							return {
								gI: afterDocumentation.gI,
								a: A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									{b9: expressionRange.b9, cB: start},
									$stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration(
										{
											gM: A2(
												$stil4m$elm_syntax$Elm$Syntax$Node$Node,
												{b9: expressionRange.b9, cB: implementationNameRange.cB},
												{eY: functionDeclarationAfterDocumentation.eY, dm: functionDeclarationAfterDocumentation.dm, bV: signature.cn}),
											ed: $elm$core$Maybe$Just(documentation),
											hJ: $elm$core$Maybe$Just(
												A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Signature$Signature, functionDeclarationAfterDocumentation.dW, signature.gk))
										}))
							};
						} else {
							var _v4 = functionDeclarationAfterDocumentation.dW;
							var startNameRange = _v4.a;
							var _v5 = functionDeclarationAfterDocumentation.dm;
							var expressionRange = _v5.a;
							return {
								gI: afterDocumentation.gI,
								a: A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									{b9: expressionRange.b9, cB: start},
									$stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration(
										{
											gM: A2(
												$stil4m$elm_syntax$Elm$Syntax$Node$Node,
												{b9: expressionRange.b9, cB: startNameRange.cB},
												{eY: functionDeclarationAfterDocumentation.eY, dm: functionDeclarationAfterDocumentation.dm, bV: functionDeclarationAfterDocumentation.dW}),
											ed: $elm$core$Maybe$Just(documentation),
											hJ: $elm$core$Maybe$Nothing
										}))
							};
						}
					case 1:
						var typeDeclarationAfterDocumentation = _v0.a;
						var end = function () {
							var _v6 = typeDeclarationAfterDocumentation.cC;
							if (_v6.b) {
								var _v7 = _v6.a;
								var range = _v7.a;
								return range.b9;
							} else {
								var _v8 = typeDeclarationAfterDocumentation.cm;
								var headVariantRange = _v8.a;
								return headVariantRange.b9;
							}
						}();
						return {
							gI: afterDocumentation.gI,
							a: A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{b9: end, cB: start},
								$stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration(
									{
										gK: A2(
											$elm$core$List$cons,
											typeDeclarationAfterDocumentation.cm,
											$elm$core$List$reverse(typeDeclarationAfterDocumentation.cC)),
										ed: $elm$core$Maybe$Just(documentation),
										fo: typeDeclarationAfterDocumentation.bn,
										bV: typeDeclarationAfterDocumentation.bV
									}))
						};
					case 2:
						var typeAliasDeclarationAfterDocumentation = _v0.a;
						var _v9 = typeAliasDeclarationAfterDocumentation.gk;
						var typeAnnotationRange = _v9.a;
						return {
							gI: afterDocumentation.gI,
							a: A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{b9: typeAnnotationRange.b9, cB: start},
								$stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration(
									{
										ed: $elm$core$Maybe$Just(documentation),
										fo: typeAliasDeclarationAfterDocumentation.bn,
										bV: typeAliasDeclarationAfterDocumentation.bV,
										gk: typeAliasDeclarationAfterDocumentation.gk
									}))
						};
					default:
						var portDeclarationAfterName = _v0.a;
						var _v10 = portDeclarationAfterName.gk;
						var typeAnnotationRange = _v10.a;
						return {
							gI: A2(
								$stil4m$elm_syntax$Rope$filledPrependTo,
								afterDocumentation.gI,
								$stil4m$elm_syntax$Rope$one(documentation)),
							a: A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{b9: typeAnnotationRange.b9, cB: portDeclarationAfterName.f6},
								$stil4m$elm_syntax$Elm$Syntax$Declaration$PortDeclaration(
									{bV: portDeclarationAfterName.bV, gk: portDeclarationAfterName.gk}))
						};
				}
			}),
		$stil4m$elm_syntax$Elm$Parser$Comments$declarationDocumentation,
		$stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedByWithComments(
			A3($stil4m$elm_syntax$ParserFast$oneOf3, $stil4m$elm_syntax$Elm$Parser$Declarations$functionAfterDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$typeOrTypeAliasDefinitionAfterDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$portDeclarationAfterDocumentation))));
var $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNotInfixNode = A4(
	$stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak,
	$stil4m$elm_syntax$Elm$Syntax$Node$Node,
	$stil4m$elm_syntax$Char$Extra$unicodeIsLowerFast,
	$stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast,
	function (name) {
		return (name !== 'infix') && $stil4m$elm_syntax$Elm$Parser$Tokens$isNotReserved(name);
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$functionDeclarationWithoutDocumentation = A3(
	$stil4m$elm_syntax$ParserFast$validate,
	function (result) {
		var _v5 = result.a;
		var decl = _v5.b;
		if (!decl.$) {
			var letFunctionDeclaration = decl.a;
			var _v7 = letFunctionDeclaration.hJ;
			if (_v7.$ === 1) {
				return true;
			} else {
				var _v8 = _v7.a;
				var signature = _v8.b;
				var _v9 = signature.bV;
				var signatureName = _v9.b;
				var _v10 = letFunctionDeclaration.gM;
				var implementation = _v10.b;
				var _v11 = implementation.bV;
				var implementationName = _v11.b;
				return _Utils_eq(implementationName, signatureName + '');
			}
		} else {
			return true;
		}
	},
	'Expected to find the same name for declaration and signature',
	A7(
		$stil4m$elm_syntax$ParserFast$map6WithStartLocation,
		F7(
			function (startNameStart, startNameNode, commentsAfterStartName, maybeSignature, _arguments, commentsAfterEqual, result) {
				var allComments = A2(
					$stil4m$elm_syntax$Rope$prependTo,
					result.gI,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterEqual,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							_arguments.gI,
							function () {
								if (maybeSignature.$ === 1) {
									return commentsAfterStartName;
								} else {
									var signature = maybeSignature.a;
									return A2($stil4m$elm_syntax$Rope$prependTo, signature.gI, commentsAfterStartName);
								}
							}())));
				if (maybeSignature.$ === 1) {
					var _v1 = result.a;
					var expressionRange = _v1.a;
					return {
						gI: allComments,
						a: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{b9: expressionRange.b9, cB: startNameStart},
							$stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration(
								{
									gM: A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$Node,
										{b9: expressionRange.b9, cB: startNameStart},
										{eY: _arguments.a, dm: result.a, bV: startNameNode}),
									ed: $elm$core$Maybe$Nothing,
									hJ: $elm$core$Maybe$Nothing
								}))
					};
				} else {
					var signature = maybeSignature.a;
					var _v2 = signature.cn;
					var implementationNameRange = _v2.a;
					var _v3 = result.a;
					var expressionRange = _v3.a;
					return {
						gI: allComments,
						a: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{b9: expressionRange.b9, cB: startNameStart},
							$stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration(
								{
									gM: A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$Node,
										{b9: expressionRange.b9, cB: implementationNameRange.cB},
										{eY: _arguments.a, dm: result.a, bV: signature.cn}),
									ed: $elm$core$Maybe$Nothing,
									hJ: $elm$core$Maybe$Just(
										A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Signature$Signature, startNameNode, signature.gk))
								}))
					};
				}
			}),
		$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNotInfixNode,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		A6(
			$stil4m$elm_syntax$ParserFast$map4OrSucceed,
			F4(
				function (commentsBeforeTypeAnnotation, typeAnnotationResult, implementationName, afterImplementationName) {
					return $elm$core$Maybe$Just(
						{
							gI: A2(
								$stil4m$elm_syntax$Rope$prependTo,
								afterImplementationName,
								A2(
									$stil4m$elm_syntax$Rope$prependTo,
									implementationName.gI,
									A2($stil4m$elm_syntax$Rope$prependTo, typeAnnotationResult.gI, commentsBeforeTypeAnnotation))),
							cn: implementationName.a,
							gk: typeAnnotationResult.a
						});
				}),
			A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, ':', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
			$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation,
			$stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedBy($stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			$elm$core$Maybe$Nothing),
		$stil4m$elm_syntax$Elm$Parser$Declarations$parameterPatternsEqual,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		$stil4m$elm_syntax$Elm$Parser$Expression$expression));
var $stil4m$elm_syntax$Elm$Syntax$Declaration$InfixDeclaration = function (a) {
	return {$: 4, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$infixDirection = A3(
	$stil4m$elm_syntax$ParserFast$oneOf3,
	A2(
		$stil4m$elm_syntax$ParserFast$mapWithRange,
		$stil4m$elm_syntax$Elm$Syntax$Node$Node,
		A2($stil4m$elm_syntax$ParserFast$keyword, 'right', 1)),
	A2(
		$stil4m$elm_syntax$ParserFast$mapWithRange,
		$stil4m$elm_syntax$Elm$Syntax$Node$Node,
		A2($stil4m$elm_syntax$ParserFast$keyword, 'left', 0)),
	A2(
		$stil4m$elm_syntax$ParserFast$mapWithRange,
		$stil4m$elm_syntax$Elm$Syntax$Node$Node,
		A2($stil4m$elm_syntax$ParserFast$keyword, 'non', 2)));
var $stil4m$elm_syntax$ParserFast$errorAsOffsetAndInt = {fx: 0, e: -1};
var $stil4m$elm_syntax$ParserFast$convertIntegerDecimal = F2(
	function (offset, src) {
		var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
		switch (_v0) {
			case '0':
				return {fx: 0, e: offset + 1};
			case '1':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 1, offset + 1, src);
			case '2':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 2, offset + 1, src);
			case '3':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 3, offset + 1, src);
			case '4':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 4, offset + 1, src);
			case '5':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 5, offset + 1, src);
			case '6':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 6, offset + 1, src);
			case '7':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 7, offset + 1, src);
			case '8':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 8, offset + 1, src);
			case '9':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 9, offset + 1, src);
			default:
				return $stil4m$elm_syntax$ParserFast$errorAsOffsetAndInt;
		}
	});
var $stil4m$elm_syntax$ParserFast$integerDecimalMapWithRange = function (rangeAndIntToRes) {
	return function (s0) {
		var s1 = A2($stil4m$elm_syntax$ParserFast$convertIntegerDecimal, s0.e, s0.d);
		if (_Utils_eq(s1.e, -1)) {
			return A2(
				$stil4m$elm_syntax$ParserFast$Bad,
				false,
				A2($stil4m$elm_syntax$ParserFast$ExpectingNumber, s0.bp, s0.da));
		} else {
			var newColumn = s0.da + (s1.e - s0.e);
			return A2(
				$stil4m$elm_syntax$ParserFast$Good,
				A2(
					rangeAndIntToRes,
					{
						b9: {a6: newColumn, bp: s0.bp},
						cB: {a6: s0.da, bp: s0.bp}
					},
					s1.fx),
				{da: newColumn, o: s0.o, e: s1.e, bp: s0.bp, d: s0.d});
		}
	};
};
var $stil4m$elm_syntax$ParserFast$map9WithRange = function (func) {
	return function (_v0) {
		return function (_v1) {
			return function (_v2) {
				return function (_v3) {
					return function (_v4) {
						return function (_v5) {
							return function (_v6) {
								return function (_v7) {
									return function (_v8) {
										var parseA = _v0;
										var parseB = _v1;
										var parseC = _v2;
										var parseD = _v3;
										var parseE = _v4;
										var parseF = _v5;
										var parseG = _v6;
										var parseH = _v7;
										var parseI = _v8;
										return function (s0) {
											var _v9 = parseA(s0);
											if (_v9.$ === 1) {
												var committed = _v9.a;
												var x = _v9.b;
												return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
											} else {
												var a = _v9.a;
												var s1 = _v9.b;
												var _v10 = parseB(s1);
												if (_v10.$ === 1) {
													var x = _v10.b;
													return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
												} else {
													var b = _v10.a;
													var s2 = _v10.b;
													var _v11 = parseC(s2);
													if (_v11.$ === 1) {
														var x = _v11.b;
														return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
													} else {
														var c = _v11.a;
														var s3 = _v11.b;
														var _v12 = parseD(s3);
														if (_v12.$ === 1) {
															var x = _v12.b;
															return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
														} else {
															var d = _v12.a;
															var s4 = _v12.b;
															var _v13 = parseE(s4);
															if (_v13.$ === 1) {
																var x = _v13.b;
																return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
															} else {
																var e = _v13.a;
																var s5 = _v13.b;
																var _v14 = parseF(s5);
																if (_v14.$ === 1) {
																	var x = _v14.b;
																	return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
																} else {
																	var f = _v14.a;
																	var s6 = _v14.b;
																	var _v15 = parseG(s6);
																	if (_v15.$ === 1) {
																		var x = _v15.b;
																		return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
																	} else {
																		var g = _v15.a;
																		var s7 = _v15.b;
																		var _v16 = parseH(s7);
																		if (_v16.$ === 1) {
																			var x = _v16.b;
																			return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
																		} else {
																			var h = _v16.a;
																			var s8 = _v16.b;
																			var _v17 = parseI(s8);
																			if (_v17.$ === 1) {
																				var x = _v17.b;
																				return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
																			} else {
																				var i = _v17.a;
																				var s9 = _v17.b;
																				return A2(
																					$stil4m$elm_syntax$ParserFast$Good,
																					func(
																						{
																							b9: {a6: s9.da, bp: s9.bp},
																							cB: {a6: s0.da, bp: s0.bp}
																						})(a)(b)(c)(d)(e)(f)(g)(h)(i),
																					s9);
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$infixDeclaration = $stil4m$elm_syntax$ParserFast$map9WithRange(
	function (range) {
		return function (commentsAfterInfix) {
			return function (direction) {
				return function (commentsAfterDirection) {
					return function (precedence) {
						return function (commentsAfterPrecedence) {
							return function (operator) {
								return function (commentsAfterOperator) {
									return function (commentsAfterEqual) {
										return function (fn) {
											return {
												gI: A2(
													$stil4m$elm_syntax$Rope$prependTo,
													commentsAfterEqual,
													A2(
														$stil4m$elm_syntax$Rope$prependTo,
														commentsAfterOperator,
														A2(
															$stil4m$elm_syntax$Rope$prependTo,
															commentsAfterPrecedence,
															A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterDirection, commentsAfterInfix)))),
												a: A2(
													$stil4m$elm_syntax$Elm$Syntax$Node$Node,
													range,
													$stil4m$elm_syntax$Elm$Syntax$Declaration$InfixDeclaration(
														{gP: direction, g2: fn, hu: operator, hz: precedence}))
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	})(
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'infix', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))($stil4m$elm_syntax$Elm$Parser$Declarations$infixDirection)($stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)(
	$stil4m$elm_syntax$ParserFast$integerDecimalMapWithRange($stil4m$elm_syntax$Elm$Syntax$Node$Node))($stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)(
	A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'(',
		A4(
			$stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol,
			F2(
				function (operatorRange, operator) {
					return A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						{
							b9: {a6: operatorRange.b9.a6 + 1, bp: operatorRange.b9.bp},
							cB: {a6: operatorRange.cB.a6 - 1, bp: operatorRange.cB.bp}
						},
						operator);
				}),
			$stil4m$elm_syntax$Elm$Parser$Tokens$isOperatorSymbolChar,
			$stil4m$elm_syntax$Elm$Parser$Tokens$isAllowedOperatorToken,
			')')))($stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)(
	A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '=', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))($stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode);
var $stil4m$elm_syntax$ParserFast$oneOf5 = F5(
	function (_v0, _v1, _v2, _v3, _v4) {
		var attemptFirst = _v0;
		var attemptSecond = _v1;
		var attemptThird = _v2;
		var attemptFourth = _v3;
		var attemptFifth = _v4;
		return function (s) {
			var _v5 = attemptFirst(s);
			if (!_v5.$) {
				var firstGood = _v5;
				return firstGood;
			} else {
				var firstBad = _v5;
				var firstCommitted = firstBad.a;
				var firstX = firstBad.b;
				if (firstCommitted) {
					return firstBad;
				} else {
					var _v6 = attemptSecond(s);
					if (!_v6.$) {
						var secondGood = _v6;
						return secondGood;
					} else {
						var secondBad = _v6;
						var secondCommitted = secondBad.a;
						var secondX = secondBad.b;
						if (secondCommitted) {
							return secondBad;
						} else {
							var _v7 = attemptThird(s);
							if (!_v7.$) {
								var thirdGood = _v7;
								return thirdGood;
							} else {
								var thirdBad = _v7;
								var thirdCommitted = thirdBad.a;
								var thirdX = thirdBad.b;
								if (thirdCommitted) {
									return thirdBad;
								} else {
									var _v8 = attemptFourth(s);
									if (!_v8.$) {
										var fourthGood = _v8;
										return fourthGood;
									} else {
										var fourthBad = _v8;
										var fourthCommitted = fourthBad.a;
										var fourthX = fourthBad.b;
										if (fourthCommitted) {
											return fourthBad;
										} else {
											var _v9 = attemptFifth(s);
											if (!_v9.$) {
												var fifthGood = _v9;
												return fifthGood;
											} else {
												var fifthBad = _v9;
												var fifthCommitted = fifthBad.a;
												var fifthX = fifthBad.b;
												return fifthCommitted ? fifthBad : A2(
													$stil4m$elm_syntax$ParserFast$Bad,
													false,
													A3(
														$stil4m$elm_syntax$ParserFast$ExpectingOneOf,
														firstX,
														secondX,
														_List_fromArray(
															[thirdX, fourthX, fifthX])));
											}
										}
									}
								}
							}
						}
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$portDeclarationWithoutDocumentation = A6(
	$stil4m$elm_syntax$ParserFast$map5,
	F5(
		function (commentsAfterPort, name, commentsAfterName, commentsAfterColon, typeAnnotationResult) {
			var nameRange = name.a;
			var _v0 = typeAnnotationResult.a;
			var end = _v0.a.b9;
			return {
				gI: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					typeAnnotationResult.gI,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterColon,
						A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterName, commentsAfterPort))),
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					{
						b9: end,
						cB: {a6: 1, bp: nameRange.cB.bp}
					},
					$stil4m$elm_syntax$Elm$Syntax$Declaration$PortDeclaration(
						{bV: name, gk: typeAnnotationResult.a}))
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'port', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, ':', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation);
var $stil4m$elm_syntax$Elm$Parser$Declarations$TypeDeclarationWithoutDocumentation = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$customTypeDefinitionWithoutDocumentationAfterTypePrefix = A7(
	$stil4m$elm_syntax$ParserFast$map6,
	F6(
		function (name, commentsAfterName, parameters, commentsAfterEqual, headVariant, tailVariantsReverse) {
			return {
				gI: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					tailVariantsReverse.gI,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						headVariant.gI,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							commentsAfterEqual,
							A2($stil4m$elm_syntax$Rope$prependTo, parameters.gI, commentsAfterName)))),
				a: $stil4m$elm_syntax$Elm$Parser$Declarations$TypeDeclarationWithoutDocumentation(
					{cm: headVariant.a, bV: name, bn: parameters.a, cC: tailVariantsReverse.a})
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Declarations$typeGenericListEquals,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Declarations$valueConstructorOptimisticLayout,
	$stil4m$elm_syntax$ParserWithComments$manyWithoutReverse(
		A2(
			$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
			'|',
			A2(
				$stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy,
				1,
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (commentsBeforePipe, variantResult) {
							return {
								gI: A2($stil4m$elm_syntax$Rope$prependTo, variantResult.gI, commentsBeforePipe),
								a: variantResult.a
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					$stil4m$elm_syntax$Elm$Parser$Declarations$valueConstructorOptimisticLayout)))));
var $stil4m$elm_syntax$ParserFast$map2WithStartLocation = F3(
	function (func, _v0, _v1) {
		var parseA = _v0;
		var parseB = _v1;
		return function (s0) {
			var _v2 = parseA(s0);
			if (_v2.$ === 1) {
				var committed = _v2.a;
				var x = _v2.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var a = _v2.a;
				var s1 = _v2.b;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var x = _v3.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v3.a;
					var s2 = _v3.b;
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						A3(
							func,
							{a6: s0.da, bp: s0.bp},
							a,
							b),
						s2);
				}
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$TypeAliasDeclarationWithoutDocumentation = function (a) {
	return {$: 1, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$typeAliasDefinitionWithoutDocumentationAfterTypePrefix = A7(
	$stil4m$elm_syntax$ParserFast$map6,
	F6(
		function (commentsAfterAlias, name, commentsAfterName, parameters, commentsAfterEqual, typeAnnotationResult) {
			return {
				gI: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					typeAnnotationResult.gI,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterEqual,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							parameters.gI,
							A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterName, commentsAfterAlias)))),
				a: $stil4m$elm_syntax$Elm$Parser$Declarations$TypeAliasDeclarationWithoutDocumentation(
					{bV: name, bn: parameters.a, gk: typeAnnotationResult.a})
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'alias', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Declarations$typeGenericListEquals,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation);
var $stil4m$elm_syntax$Elm$Parser$Declarations$typeOrTypeAliasDefinitionWithoutDocumentation = A3(
	$stil4m$elm_syntax$ParserFast$map2WithStartLocation,
	F3(
		function (start, commentsAfterType, afterStart) {
			var allComments = A2($stil4m$elm_syntax$Rope$prependTo, afterStart.gI, commentsAfterType);
			var _v0 = afterStart.a;
			if (!_v0.$) {
				var typeDeclarationAfterDocumentation = _v0.a;
				var end = function () {
					var _v1 = typeDeclarationAfterDocumentation.cC;
					if (_v1.b) {
						var _v2 = _v1.a;
						var range = _v2.a;
						return range.b9;
					} else {
						var _v3 = typeDeclarationAfterDocumentation.cm;
						var headVariantRange = _v3.a;
						return headVariantRange.b9;
					}
				}();
				return {
					gI: allComments,
					a: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						{b9: end, cB: start},
						$stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration(
							{
								gK: A2(
									$elm$core$List$cons,
									typeDeclarationAfterDocumentation.cm,
									$elm$core$List$reverse(typeDeclarationAfterDocumentation.cC)),
								ed: $elm$core$Maybe$Nothing,
								fo: typeDeclarationAfterDocumentation.bn,
								bV: typeDeclarationAfterDocumentation.bV
							}))
				};
			} else {
				var typeAliasDeclarationAfterDocumentation = _v0.a;
				var _v4 = typeAliasDeclarationAfterDocumentation.gk;
				var typeAnnotationRange = _v4.a;
				return {
					gI: allComments,
					a: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						{b9: typeAnnotationRange.b9, cB: start},
						$stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration(
							{ed: $elm$core$Maybe$Nothing, fo: typeAliasDeclarationAfterDocumentation.bn, bV: typeAliasDeclarationAfterDocumentation.bV, gk: typeAliasDeclarationAfterDocumentation.gk}))
				};
			}
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'type', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	A2($stil4m$elm_syntax$ParserFast$oneOf2, $stil4m$elm_syntax$Elm$Parser$Declarations$typeAliasDefinitionWithoutDocumentationAfterTypePrefix, $stil4m$elm_syntax$Elm$Parser$Declarations$customTypeDefinitionWithoutDocumentationAfterTypePrefix));
var $stil4m$elm_syntax$Elm$Parser$Declarations$declaration = A5($stil4m$elm_syntax$ParserFast$oneOf5, $stil4m$elm_syntax$Elm$Parser$Declarations$functionDeclarationWithoutDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$declarationWithDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$typeOrTypeAliasDefinitionWithoutDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$portDeclarationWithoutDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$infixDeclaration);
var $stil4m$elm_syntax$ParserFast$columnAndThen = function (callback) {
	return function (s) {
		var _v0 = callback(s.da);
		var parse = _v0;
		return parse(s);
	};
};
var $stil4m$elm_syntax$Elm$Parser$Layout$problemModuleLevelIndentation = $stil4m$elm_syntax$ParserFast$problem('must be on module-level indentation');
var $stil4m$elm_syntax$Elm$Parser$Layout$moduleLevelIndentationFollowedBy = function (nextParser) {
	return $stil4m$elm_syntax$ParserFast$columnAndThen(
		function (column) {
			return (column === 1) ? nextParser : $stil4m$elm_syntax$Elm$Parser$Layout$problemModuleLevelIndentation;
		});
};
var $stil4m$elm_syntax$Elm$Parser$File$fileDeclarations = $stil4m$elm_syntax$ParserWithComments$many(
	$stil4m$elm_syntax$Elm$Parser$Layout$moduleLevelIndentationFollowedBy(
		A3(
			$stil4m$elm_syntax$ParserFast$map2,
			F2(
				function (declarationParsed, commentsAfter) {
					return {
						gI: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, declarationParsed.gI),
						a: declarationParsed.a
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Declarations$declaration,
			$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout)));
var $stil4m$elm_syntax$Elm$Syntax$Exposing$All = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose = function (a) {
	return {$: 1, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Expose$functionExpose = $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange(
	F2(
		function (range, name) {
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose(name))
			};
		}));
var $stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose = function (a) {
	return {$: 0, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$parensEnd = A2($stil4m$elm_syntax$ParserFast$symbol, ')', 0);
var $stil4m$elm_syntax$Elm$Parser$Expose$infixExpose = A3(
	$stil4m$elm_syntax$ParserFast$map2WithRange,
	F3(
		function (range, infixName, _v0) {
			return {
				gI: $stil4m$elm_syntax$Rope$empty,
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose(infixName))
			};
		}),
	A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'(',
		A2(
			$stil4m$elm_syntax$ParserFast$ifFollowedByWhileWithoutLinebreak,
			function (c) {
				switch (c) {
					case ')':
						return false;
					case '\n':
						return false;
					case ' ':
						return false;
					default:
						return true;
				}
			},
			function (c) {
				switch (c) {
					case ')':
						return false;
					case '\n':
						return false;
					case ' ':
						return false;
					default:
						return true;
				}
			})),
	$stil4m$elm_syntax$Elm$Parser$Tokens$parensEnd);
var $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose = function (a) {
	return {$: 3, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose = function (a) {
	return {$: 2, a: a};
};
var $stil4m$elm_syntax$ParserFast$map2WithRangeOrSucceed = F4(
	function (func, _v0, _v1, fallback) {
		var parseA = _v0;
		var parseB = _v1;
		return function (s0) {
			var _v2 = parseA(s0);
			if (_v2.$ === 1) {
				var c1 = _v2.a;
				var x = _v2.b;
				return c1 ? A2($stil4m$elm_syntax$ParserFast$Bad, true, x) : A2($stil4m$elm_syntax$ParserFast$Good, fallback, s0);
			} else {
				var a = _v2.a;
				var s1 = _v2.b;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var x = _v3.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v3.a;
					var s2 = _v3.b;
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						A3(
							func,
							{
								b9: {a6: s2.da, bp: s2.bp},
								cB: {a6: s0.da, bp: s0.bp}
							},
							a,
							b),
						s2);
				}
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Expose$typeExpose = A4(
	$stil4m$elm_syntax$ParserFast$map3,
	F3(
		function (_v0, commentsBeforeMaybeOpen, maybeOpen) {
			var typeNameRange = _v0.a;
			var typeName = _v0.b;
			return {
				gI: A2($stil4m$elm_syntax$Rope$prependTo, maybeOpen.gI, commentsBeforeMaybeOpen),
				a: function () {
					var _v1 = maybeOpen.a;
					if (_v1.$ === 1) {
						return A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							typeNameRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose(typeName));
					} else {
						var openRange = _v1.a;
						return A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{b9: openRange.b9, cB: typeNameRange.cB},
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
								{bV: typeName, ht: maybeOpen.a}));
					}
				}()
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
	A4(
		$stil4m$elm_syntax$ParserFast$map2WithRangeOrSucceed,
		F3(
			function (range, left, right) {
				return {
					gI: A2($stil4m$elm_syntax$Rope$prependTo, right, left),
					a: $elm$core$Maybe$Just(range)
				};
			}),
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '(', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		A2(
			$stil4m$elm_syntax$ParserFast$followedBySymbol,
			')',
			A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '..', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)),
		{gI: $stil4m$elm_syntax$Rope$empty, a: $elm$core$Maybe$Nothing}));
var $stil4m$elm_syntax$Elm$Parser$Expose$exposable = A3($stil4m$elm_syntax$ParserFast$oneOf3, $stil4m$elm_syntax$Elm$Parser$Expose$functionExpose, $stil4m$elm_syntax$Elm$Parser$Expose$typeExpose, $stil4m$elm_syntax$Elm$Parser$Expose$infixExpose);
var $stil4m$elm_syntax$Elm$Parser$Expose$exposingListInner = A2(
	$stil4m$elm_syntax$ParserFast$oneOf2,
	A4(
		$stil4m$elm_syntax$ParserFast$map3,
		F3(
			function (headElement, commentsAfterHeadElement, tailElements) {
				return {
					gI: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						tailElements.gI,
						A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterHeadElement, headElement.gI)),
					a: $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
						A2($elm$core$List$cons, headElement.a, tailElements.a))
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Expose$exposable,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		$stil4m$elm_syntax$ParserWithComments$many(
			A2(
				$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
				',',
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides($stil4m$elm_syntax$Elm$Parser$Expose$exposable)))),
	A2(
		$stil4m$elm_syntax$ParserFast$mapWithRange,
		F2(
			function (range, commentsAfterDotDot) {
				return {
					gI: commentsAfterDotDot,
					a: $stil4m$elm_syntax$Elm$Syntax$Exposing$All(range)
				};
			}),
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '..', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)));
var $stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition = A4(
	$stil4m$elm_syntax$ParserFast$map3WithRange,
	F4(
		function (range, commentsAfterExposing, commentsBefore, exposingListInnerResult) {
			return {
				gI: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					exposingListInnerResult.gI,
					A2($stil4m$elm_syntax$Rope$prependTo, commentsBefore, commentsAfterExposing)),
				a: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, exposingListInnerResult.a)
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, 'exposing', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '(', $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout),
	A2($stil4m$elm_syntax$ParserFast$followedBySymbol, ')', $stil4m$elm_syntax$Elm$Parser$Expose$exposingListInner));
var $stil4m$elm_syntax$ParserFast$map3OrSucceed = F5(
	function (func, _v0, _v1, _v2, fallback) {
		var parseA = _v0;
		var parseB = _v1;
		var parseC = _v2;
		return function (s0) {
			var _v3 = parseA(s0);
			if (_v3.$ === 1) {
				var c1 = _v3.a;
				var x = _v3.b;
				return c1 ? A2($stil4m$elm_syntax$ParserFast$Bad, true, x) : A2($stil4m$elm_syntax$ParserFast$Good, fallback, s0);
			} else {
				var a = _v3.a;
				var s1 = _v3.b;
				var _v4 = parseB(s1);
				if (_v4.$ === 1) {
					var x = _v4.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v4.a;
					var s2 = _v4.b;
					var _v5 = parseC(s2);
					if (_v5.$ === 1) {
						var x = _v5.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var c = _v5.a;
						var s3 = _v5.b;
						return A2(
							$stil4m$elm_syntax$ParserFast$Good,
							A3(func, a, b, c),
							s3);
					}
				}
			}
		};
	});
function $stil4m$elm_syntax$Elm$Parser$Base$cyclic$moduleNameOrEmpty() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map2OrSucceed,
		F2(
			function (head, tail) {
				return A2($elm$core$List$cons, head, tail);
			}),
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '.', $stil4m$elm_syntax$Elm$Parser$Tokens$typeName),
		$stil4m$elm_syntax$ParserFast$lazy(
			function (_v0) {
				return $stil4m$elm_syntax$Elm$Parser$Base$cyclic$moduleNameOrEmpty();
			}),
		_List_Nil);
}
var $stil4m$elm_syntax$Elm$Parser$Base$moduleNameOrEmpty = $stil4m$elm_syntax$Elm$Parser$Base$cyclic$moduleNameOrEmpty();
$stil4m$elm_syntax$Elm$Parser$Base$cyclic$moduleNameOrEmpty = function () {
	return $stil4m$elm_syntax$Elm$Parser$Base$moduleNameOrEmpty;
};
var $stil4m$elm_syntax$Elm$Parser$Base$moduleName = A3(
	$stil4m$elm_syntax$ParserFast$map2WithRange,
	F3(
		function (range, head, tail) {
			return A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				range,
				A2($elm$core$List$cons, head, tail));
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeName,
	$stil4m$elm_syntax$Elm$Parser$Base$moduleNameOrEmpty);
var $stil4m$elm_syntax$Elm$Parser$Tokens$typeNameMapWithRange = function (rangeAndNameToRes) {
	return A3($stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak, rangeAndNameToRes, $stil4m$elm_syntax$Char$Extra$unicodeIsUpperFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast);
};
var $stil4m$elm_syntax$Elm$Parser$Imports$importDefinition = A6(
	$stil4m$elm_syntax$ParserFast$map5WithStartLocation,
	F6(
		function (start, commentsAfterImport, mod, commentsAfterModuleName, maybeModuleAlias, maybeExposingList) {
			var commentsBeforeAlias = A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterModuleName, commentsAfterImport);
			if (maybeModuleAlias.$ === 1) {
				if (maybeExposingList.$ === 1) {
					var _v2 = mod;
					var modRange = _v2.a;
					return {
						gI: commentsBeforeAlias,
						a: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{b9: modRange.b9, cB: start},
							{ef: $elm$core$Maybe$Nothing, hh: $elm$core$Maybe$Nothing, dE: mod})
					};
				} else {
					var exposingListValue = maybeExposingList.a;
					var _v3 = exposingListValue.a;
					var exposingRange = _v3.a;
					return {
						gI: A2($stil4m$elm_syntax$Rope$prependTo, exposingListValue.gI, commentsBeforeAlias),
						a: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{b9: exposingRange.b9, cB: start},
							{
								ef: $elm$core$Maybe$Just(exposingListValue.a),
								hh: $elm$core$Maybe$Nothing,
								dE: mod
							})
					};
				}
			} else {
				var moduleAliasResult = maybeModuleAlias.a;
				if (maybeExposingList.$ === 1) {
					var _v5 = moduleAliasResult.a;
					var aliasRange = _v5.a;
					return {
						gI: A2($stil4m$elm_syntax$Rope$prependTo, moduleAliasResult.gI, commentsBeforeAlias),
						a: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{b9: aliasRange.b9, cB: start},
							{
								ef: $elm$core$Maybe$Nothing,
								hh: $elm$core$Maybe$Just(moduleAliasResult.a),
								dE: mod
							})
					};
				} else {
					var exposingListValue = maybeExposingList.a;
					var _v6 = exposingListValue.a;
					var exposingRange = _v6.a;
					return {
						gI: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							exposingListValue.gI,
							A2($stil4m$elm_syntax$Rope$prependTo, moduleAliasResult.gI, commentsBeforeAlias)),
						a: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{b9: exposingRange.b9, cB: start},
							{
								ef: $elm$core$Maybe$Just(exposingListValue.a),
								hh: $elm$core$Maybe$Just(moduleAliasResult.a),
								dE: mod
							})
					};
				}
			}
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'import', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Base$moduleName,
	$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
	A5(
		$stil4m$elm_syntax$ParserFast$map3OrSucceed,
		F3(
			function (commentsBefore, moduleAliasNode, commentsAfter) {
				return $elm$core$Maybe$Just(
					{
						gI: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, commentsBefore),
						a: moduleAliasNode
					});
			}),
		A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'as', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		$stil4m$elm_syntax$Elm$Parser$Tokens$typeNameMapWithRange(
			F2(
				function (range, moduleAlias) {
					return A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						range,
						_List_fromArray(
							[moduleAlias]));
				})),
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		$elm$core$Maybe$Nothing),
	A4(
		$stil4m$elm_syntax$ParserFast$map2OrSucceed,
		F2(
			function (exposingResult, commentsAfter) {
				return $elm$core$Maybe$Just(
					{
						gI: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, exposingResult.gI),
						a: exposingResult.a
					});
			}),
		$stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition,
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		$elm$core$Maybe$Nothing));
var $stil4m$elm_syntax$Elm$Parser$Layout$endsTopIndented = function (parser) {
	return A3(
		$stil4m$elm_syntax$ParserFast$validateEndColumnIndentation,
		F2(
			function (column, indent) {
				return !(column - indent);
			}),
		'must be on top indentation',
		parser);
};
var $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict = $stil4m$elm_syntax$Elm$Parser$Layout$endsTopIndented($stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout);
var $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedByComments = function (nextParser) {
	return A3(
		$stil4m$elm_syntax$ParserFast$map2,
		F2(
			function (commentsBefore, afterComments) {
				return A2($stil4m$elm_syntax$Rope$prependTo, afterComments, commentsBefore);
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		$stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy(nextParser));
};
var $stil4m$elm_syntax$Elm$Syntax$Module$EffectModule = function (a) {
	return {$: 2, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClause = A5(
	$stil4m$elm_syntax$ParserFast$map4,
	F4(
		function (fnName, commentsAfterFnName, commentsAfterEqual, typeName_) {
			return {
				gI: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterEqual, commentsAfterFnName),
				a: _Utils_Tuple2(fnName, typeName_)
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$functionName,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '=', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode);
var $stil4m$elm_syntax$List$Extra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(x);
				} else {
					var $temp$predicate = predicate,
						$temp$list = xs;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $stil4m$elm_syntax$Elm$Parser$Modules$whereBlock = A2(
	$stil4m$elm_syntax$ParserFast$followedBySymbol,
	'}',
	A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'{',
		A5(
			$stil4m$elm_syntax$ParserFast$map4,
			F4(
				function (commentsBeforeHead, head, commentsAfterHead, tail) {
					var pairs = A2($elm$core$List$cons, head.a, tail.a);
					return {
						gI: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							tail.gI,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								commentsAfterHead,
								A2($stil4m$elm_syntax$Rope$prependTo, head.gI, commentsBeforeHead))),
						a: {
							gH: A2(
								$elm$core$Maybe$map,
								$elm$core$Tuple$second,
								A2(
									$stil4m$elm_syntax$List$Extra$find,
									function (_v0) {
										var fnName = _v0.a;
										return fnName === 'command';
									},
									pairs)),
							hO: A2(
								$elm$core$Maybe$map,
								$elm$core$Tuple$second,
								A2(
									$stil4m$elm_syntax$List$Extra$find,
									function (_v1) {
										var fnName = _v1.a;
										return fnName === 'subscription';
									},
									pairs))
						}
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			$stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClause,
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			$stil4m$elm_syntax$ParserWithComments$many(
				A2(
					$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
					',',
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides($stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClause))))));
var $stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClauses = A3(
	$stil4m$elm_syntax$ParserFast$map2,
	F2(
		function (commentsBefore, whereResult) {
			return {
				gI: A2($stil4m$elm_syntax$Rope$prependTo, whereResult.gI, commentsBefore),
				a: whereResult.a
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'where', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Modules$whereBlock);
var $stil4m$elm_syntax$ParserFast$map7WithRange = F8(
	function (func, _v0, _v1, _v2, _v3, _v4, _v5, _v6) {
		var parseA = _v0;
		var parseB = _v1;
		var parseC = _v2;
		var parseD = _v3;
		var parseE = _v4;
		var parseF = _v5;
		var parseG = _v6;
		return function (s0) {
			var _v7 = parseA(s0);
			if (_v7.$ === 1) {
				var committed = _v7.a;
				var x = _v7.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
			} else {
				var a = _v7.a;
				var s1 = _v7.b;
				var _v8 = parseB(s1);
				if (_v8.$ === 1) {
					var x = _v8.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
				} else {
					var b = _v8.a;
					var s2 = _v8.b;
					var _v9 = parseC(s2);
					if (_v9.$ === 1) {
						var x = _v9.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var c = _v9.a;
						var s3 = _v9.b;
						var _v10 = parseD(s3);
						if (_v10.$ === 1) {
							var x = _v10.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var d = _v10.a;
							var s4 = _v10.b;
							var _v11 = parseE(s4);
							if (_v11.$ === 1) {
								var x = _v11.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var e = _v11.a;
								var s5 = _v11.b;
								var _v12 = parseF(s5);
								if (_v12.$ === 1) {
									var x = _v12.b;
									return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
								} else {
									var f = _v12.a;
									var s6 = _v12.b;
									var _v13 = parseG(s6);
									if (_v13.$ === 1) {
										var x = _v13.b;
										return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
									} else {
										var g = _v13.a;
										var s7 = _v13.b;
										return A2(
											$stil4m$elm_syntax$ParserFast$Good,
											A8(
												func,
												{
													b9: {a6: s7.da, bp: s7.bp},
													cB: {a6: s0.da, bp: s0.bp}
												},
												a,
												b,
												c,
												d,
												e,
												f,
												g),
											s7);
									}
								}
							}
						}
					}
				}
			}
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Modules$effectModuleDefinition = A8(
	$stil4m$elm_syntax$ParserFast$map7WithRange,
	F8(
		function (range, commentsAfterEffect, commentsAfterModule, name, commentsAfterName, whereClauses, commentsAfterWhereClauses, exp) {
			return {
				gI: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					exp.gI,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterWhereClauses,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							whereClauses.gI,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								commentsAfterName,
								A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterModule, commentsAfterEffect))))),
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Module$EffectModule(
						{gH: whereClauses.a.gH, ef: exp.a, dE: name, hO: whereClauses.a.hO}))
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'effect', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'module', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Base$moduleName,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClauses,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition);
var $stil4m$elm_syntax$Elm$Parser$Modules$normalModuleDefinition = A5(
	$stil4m$elm_syntax$ParserFast$map4WithRange,
	F5(
		function (range, commentsAfterModule, moduleName, commentsAfterModuleName, exposingList) {
			return {
				gI: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					exposingList.gI,
					A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterModuleName, commentsAfterModule)),
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Module$NormalModule(
						{ef: exposingList.a, dE: moduleName}))
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'module', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Base$moduleName,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition);
var $stil4m$elm_syntax$Elm$Syntax$Module$PortModule = function (a) {
	return {$: 1, a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Modules$portModuleDefinition = A6(
	$stil4m$elm_syntax$ParserFast$map5WithRange,
	F6(
		function (range, commentsAfterPort, commentsAfterModule, moduleName, commentsAfterModuleName, exposingList) {
			return {
				gI: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					exposingList.gI,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterModuleName,
						A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterModule, commentsAfterPort))),
				a: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Module$PortModule(
						{ef: exposingList.a, dE: moduleName}))
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'port', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'module', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Base$moduleName,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition);
var $stil4m$elm_syntax$Elm$Parser$Modules$moduleDefinition = A3($stil4m$elm_syntax$ParserFast$oneOf3, $stil4m$elm_syntax$Elm$Parser$Modules$normalModuleDefinition, $stil4m$elm_syntax$Elm$Parser$Modules$portModuleDefinition, $stil4m$elm_syntax$Elm$Parser$Modules$effectModuleDefinition);
var $stil4m$elm_syntax$Elm$Parser$Comments$moduleDocumentation = $stil4m$elm_syntax$Elm$Parser$Comments$declarationDocumentation;
var $stil4m$elm_syntax$Rope$ropeLikelyFilledToListInto = F2(
	function (initialAcc, ropeLikelyFilled) {
		ropeLikelyFilledToListInto:
		while (true) {
			if (!ropeLikelyFilled.$) {
				var onlyElement = ropeLikelyFilled.a;
				return A2($elm$core$List$cons, onlyElement, initialAcc);
			} else {
				var left = ropeLikelyFilled.a;
				var right = ropeLikelyFilled.b;
				var $temp$initialAcc = A2($stil4m$elm_syntax$Rope$ropeLikelyFilledToListInto, initialAcc, right),
					$temp$ropeLikelyFilled = left;
				initialAcc = $temp$initialAcc;
				ropeLikelyFilled = $temp$ropeLikelyFilled;
				continue ropeLikelyFilledToListInto;
			}
		}
	});
var $stil4m$elm_syntax$Rope$toList = function (rope) {
	if (rope.$ === 1) {
		return _List_Nil;
	} else {
		var ropeLikelyFilled = rope.a;
		return A2($stil4m$elm_syntax$Rope$ropeLikelyFilledToListInto, _List_Nil, ropeLikelyFilled);
	}
};
var $stil4m$elm_syntax$Elm$Parser$File$file = A5(
	$stil4m$elm_syntax$ParserFast$map4,
	F4(
		function (moduleDefinition, moduleComments, imports, declarations) {
			return {
				gI: $stil4m$elm_syntax$Rope$toList(
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						declarations.gI,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							imports.gI,
							A2($stil4m$elm_syntax$Rope$prependTo, moduleComments, moduleDefinition.gI)))),
				e4: declarations.a,
				g4: imports.a,
				hi: moduleDefinition.a
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedByWithComments($stil4m$elm_syntax$Elm$Parser$Modules$moduleDefinition),
	$stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedByComments(
		A4(
			$stil4m$elm_syntax$ParserFast$map2OrSucceed,
			F2(
				function (moduleDocumentation, commentsAfter) {
					return A2(
						$stil4m$elm_syntax$Rope$filledPrependTo,
						commentsAfter,
						$stil4m$elm_syntax$Rope$one(moduleDocumentation));
				}),
			$stil4m$elm_syntax$Elm$Parser$Comments$moduleDocumentation,
			$stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict,
			$stil4m$elm_syntax$Rope$empty)),
	$stil4m$elm_syntax$ParserWithComments$many($stil4m$elm_syntax$Elm$Parser$Imports$importDefinition),
	$stil4m$elm_syntax$Elm$Parser$File$fileDeclarations);
var $elm$parser$Parser$ExpectingEnd = {$: 10};
var $elm$parser$Parser$ExpectingKeyword = function (a) {
	return {$: 9, a: a};
};
var $elm$parser$Parser$ExpectingNumber = {$: 6};
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 8, a: a};
};
var $elm$parser$Parser$UnexpectedChar = {$: 11};
var $stil4m$elm_syntax$ParserFast$ropeFilledToList = F2(
	function (problemToConvert, soFar) {
		switch (problemToConvert.$) {
			case 7:
				var firstTry = problemToConvert.a;
				var secondTry = problemToConvert.b;
				var thirdTryUp = problemToConvert.c;
				return A2(
					$stil4m$elm_syntax$ParserFast$ropeFilledToList,
					firstTry,
					A2(
						$stil4m$elm_syntax$ParserFast$ropeFilledToList,
						secondTry,
						A3($elm$core$List$foldr, $stil4m$elm_syntax$ParserFast$ropeFilledToList, soFar, thirdTryUp)));
			case 0:
				var row = problemToConvert.a;
				var col = problemToConvert.b;
				return A2(
					$elm$core$List$cons,
					{da: col, eF: $elm$parser$Parser$ExpectingNumber, bp: row},
					soFar);
			case 1:
				var row = problemToConvert.a;
				var col = problemToConvert.b;
				var symbolString = problemToConvert.c;
				return A2(
					$elm$core$List$cons,
					{
						da: col,
						eF: $elm$parser$Parser$ExpectingSymbol(symbolString),
						bp: row
					},
					soFar);
			case 2:
				var row = problemToConvert.a;
				var col = problemToConvert.b;
				return A2(
					$elm$core$List$cons,
					{
						da: col,
						eF: $elm$parser$Parser$Problem('expecting any char'),
						bp: row
					},
					soFar);
			case 3:
				var row = problemToConvert.a;
				var col = problemToConvert.b;
				var keywordString = problemToConvert.c;
				return A2(
					$elm$core$List$cons,
					{
						da: col,
						eF: $elm$parser$Parser$ExpectingKeyword(keywordString),
						bp: row
					},
					soFar);
			case 4:
				var row = problemToConvert.a;
				var col = problemToConvert.b;
				return A2(
					$elm$core$List$cons,
					{da: col, eF: $elm$parser$Parser$UnexpectedChar, bp: row},
					soFar);
			case 5:
				var row = problemToConvert.a;
				var col = problemToConvert.b;
				return A2(
					$elm$core$List$cons,
					{
						da: col,
						eF: $elm$parser$Parser$Problem('expected string to pass validation'),
						bp: row
					},
					soFar);
			default:
				var row = problemToConvert.a;
				var col = problemToConvert.b;
				var customMessage = problemToConvert.c;
				return A2(
					$elm$core$List$cons,
					{
						da: col,
						eF: $elm$parser$Parser$Problem(customMessage),
						bp: row
					},
					soFar);
		}
	});
var $stil4m$elm_syntax$ParserFast$run = F2(
	function (_v0, src) {
		var parse = _v0;
		var _v1 = parse(
			{da: 1, o: 1, e: 0, bp: 1, d: src});
		if (!_v1.$) {
			var value = _v1.a;
			var finalState = _v1.b;
			return (!(finalState.e - $elm$core$String$length(finalState.d))) ? $elm$core$Result$Ok(value) : $elm$core$Result$Err(
				_List_fromArray(
					[
						{da: finalState.da, eF: $elm$parser$Parser$ExpectingEnd, bp: finalState.bp}
					]));
		} else {
			var deadEnds = _v1.b;
			return $elm$core$Result$Err(
				A2($stil4m$elm_syntax$ParserFast$ropeFilledToList, deadEnds, _List_Nil));
		}
	});
var $stil4m$elm_syntax$Elm$Parser$parseToFile = function (input) {
	return A2($stil4m$elm_syntax$ParserFast$run, $stil4m$elm_syntax$Elm$Parser$File$file, input);
};
var $jfmengels$elm_review$Review$FileParser$parse = function (source) {
	var _v0 = $stil4m$elm_syntax$Elm$Parser$parseToFile(source);
	if (!_v0.$) {
		var file = _v0.a;
		return $elm$core$Result$Ok(file);
	} else {
		return $elm$core$Result$Err(0);
	}
};
var $jfmengels$elm_review$Review$Project$removeFileFromFilesThatFailedToParse = F2(
	function (path, _v0) {
		var project = _v0;
		return _Utils_update(
			project,
			{
				cr: A2(
					$elm$core$List$filter,
					function (file) {
						return !_Utils_eq(file.hw, path);
					},
					project.cr)
			});
	});
var $jfmengels$elm_review$Review$Project$removeFileFromProject = F2(
	function (path, _v0) {
		var project = _v0;
		return A2(
			$jfmengels$elm_review$Review$Project$removeFileFromFilesThatFailedToParse,
			path,
			_Utils_update(
				project,
				{
					av: A2($elm$core$Dict$remove, path, project.av)
				}));
	});
var $jfmengels$elm_review$Review$Project$Internal$sourceDirectories = function (_v0) {
	var project = _v0;
	return project.eP;
};
var $jfmengels$elm_review$Review$Project$addModule = F2(
	function (_v0, project) {
		var path = _v0.hw;
		var source = _v0.hK;
		var _v1 = $jfmengels$elm_review$Review$FileParser$parse(source);
		if (!_v1.$) {
			var ast = _v1.a;
			var osAgnosticPath = $jfmengels$elm_review$Path$makeOSAgnostic(path);
			return $jfmengels$elm_review$Review$Project$forceModuleGraphRecomputation(
				A2(
					$jfmengels$elm_review$Review$Project$removeFileFromFilesThatFailedToParse,
					path,
					A2(
						$jfmengels$elm_review$Review$Project$addModuleToProject,
						$jfmengels$elm_review$Review$Project$ProjectModule$create(
							{
								gv: ast,
								fy: A2(
									$elm$core$List$any,
									function (dir) {
										return A2(
											$elm$core$String$startsWith,
											$jfmengels$elm_review$Path$makeOSAgnostic(dir),
											osAgnosticPath);
									},
									$jfmengels$elm_review$Review$Project$Internal$sourceDirectories(project)),
								hw: path,
								hK: source
							}),
						project)));
		} else {
			return $jfmengels$elm_review$Review$Project$forceModuleGraphRecomputation(
				A2(
					$jfmengels$elm_review$Review$Project$addFileThatFailedToParse,
					{hw: path, hK: source},
					A2($jfmengels$elm_review$Review$Project$removeFileFromProject, path, project)));
		}
	});
var $jfmengels$elm_review$Review$Project$addParsedModule = F2(
	function (_v0, project) {
		var path = _v0.hw;
		var source = _v0.hK;
		var ast = _v0.gv;
		var osAgnosticPath = $jfmengels$elm_review$Path$makeOSAgnostic(path);
		return $jfmengels$elm_review$Review$Project$forceModuleGraphRecomputation(
			A2(
				$jfmengels$elm_review$Review$Project$addModuleToProject,
				$jfmengels$elm_review$Review$Project$ProjectModule$create(
					{
						gv: ast,
						fy: A2(
							$elm$core$List$any,
							function (dir) {
								return A2(
									$elm$core$String$startsWith,
									$jfmengels$elm_review$Path$makeOSAgnostic(dir),
									osAgnosticPath);
							},
							$jfmengels$elm_review$Review$Project$Internal$sourceDirectories(project)),
						hw: path,
						hK: source
					}),
				A2($jfmengels$elm_review$Review$Project$removeFileFromFilesThatFailedToParse, path, project)));
	});
var $jfmengels$elm_review$Review$Project$addReadme = F2(
	function (readme_, _v0) {
		var project = _v0;
		return _Utils_update(
			project,
			{
				bX: $elm$core$Maybe$Just(
					_Utils_Tuple2(
						readme_,
						$jfmengels$elm_review$Review$Cache$ContentHash$hash(readme_.db)))
			});
	});
var $jfmengels$elm_review$Review$Project$elmJson = function (_v0) {
	var project = _v0;
	return A2($elm$core$Maybe$map, $elm$core$Tuple$first, project.ba);
};
var $jfmengels$elm_review$Review$Project$readme = function (_v0) {
	var project = _v0;
	return A2($elm$core$Maybe$map, $elm$core$Tuple$first, project.bX);
};
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$project_metadata_utils$Elm$Project$Application = function (a) {
	return {$: 0, a: a};
};
var $elm$project_metadata_utils$Elm$Project$Package = function (a) {
	return {$: 1, a: a};
};
var $elm$project_metadata_utils$Elm$Project$ApplicationInfo = F6(
	function (elm, dirs, depsDirect, depsIndirect, testDepsDirect, testDepsIndirect) {
		return {e9: depsDirect, fa: depsIndirect, fd: dirs, df: elm, gg: testDepsDirect, gh: testDepsIndirect};
	});
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$project_metadata_utils$Elm$Version$Version = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $elm$project_metadata_utils$Elm$Version$checkNumbers = F3(
	function (major, minor, patch) {
		return ((major >= 0) && ((minor >= 0) && (patch >= 0))) ? $elm$core$Maybe$Just(
			A3($elm$project_metadata_utils$Elm$Version$Version, major, minor, patch)) : $elm$core$Maybe$Nothing;
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$project_metadata_utils$Elm$Version$fromString = function (string) {
	var _v0 = A2(
		$elm$core$List$map,
		$elm$core$String$toInt,
		A2($elm$core$String$split, '.', string));
	if ((((((_v0.b && (!_v0.a.$)) && _v0.b.b) && (!_v0.b.a.$)) && _v0.b.b.b) && (!_v0.b.b.a.$)) && (!_v0.b.b.b.b)) {
		var major = _v0.a.a;
		var _v1 = _v0.b;
		var minor = _v1.a.a;
		var _v2 = _v1.b;
		var patch = _v2.a.a;
		return A3($elm$project_metadata_utils$Elm$Version$checkNumbers, major, minor, patch);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$project_metadata_utils$Elm$Version$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$Version$fromString(string);
	if (!_v0.$) {
		var version = _v0.a;
		return $elm$json$Json$Decode$succeed(version);
	} else {
		return $elm$json$Json$Decode$fail('I need a valid version like \"2.0.1\"');
	}
};
var $elm$project_metadata_utils$Elm$Version$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Version$decoderHelp, $elm$json$Json$Decode$string);
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$project_metadata_utils$Elm$Package$Name = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$project_metadata_utils$Elm$Package$isBadChar = function (_char) {
	return $elm$core$Char$isUpper(_char) || ((_char === '.') || (_char === '_'));
};
var $elm$project_metadata_utils$Elm$Package$isBadProjectName = function (project) {
	var _v0 = $elm$core$String$uncons(project);
	if (_v0.$ === 1) {
		return true;
	} else {
		var _v1 = _v0.a;
		var c = _v1.a;
		return A2($elm$core$String$contains, '--', project) || (A2($elm$core$String$any, $elm$project_metadata_utils$Elm$Package$isBadChar, project) || (A2($elm$core$String$startsWith, '-', project) || (!$elm$core$Char$isLower(c))));
	}
};
var $elm$project_metadata_utils$Elm$Package$fromString = function (string) {
	var _v0 = A2($elm$core$String$split, '/', string);
	if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
		var author = _v0.a;
		var _v1 = _v0.b;
		var project = _v1.a;
		return $elm$project_metadata_utils$Elm$Package$isBadProjectName(project) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
			A2($elm$project_metadata_utils$Elm$Package$Name, author, project));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$project_metadata_utils$Elm$Project$verifyDepNames = F2(
	function (revDeps, pairs) {
		verifyDepNames:
		while (true) {
			if (!pairs.b) {
				return $elm$json$Json$Decode$succeed(
					$elm$core$List$reverse(revDeps));
			} else {
				var _v1 = pairs.a;
				var key = _v1.a;
				var con = _v1.b;
				var otherPairs = pairs.b;
				var _v2 = $elm$project_metadata_utils$Elm$Package$fromString(key);
				if (!_v2.$) {
					var pkg = _v2.a;
					var $temp$revDeps = A2(
						$elm$core$List$cons,
						_Utils_Tuple2(pkg, con),
						revDeps),
						$temp$pairs = otherPairs;
					revDeps = $temp$revDeps;
					pairs = $temp$pairs;
					continue verifyDepNames;
				} else {
					return $elm$json$Json$Decode$fail('\"' + (key + '\" is not a valid package name.'));
				}
			}
		}
	});
var $elm$project_metadata_utils$Elm$Project$depsDecoder = function (constraintDecoder) {
	return A2(
		$elm$json$Json$Decode$andThen,
		$elm$project_metadata_utils$Elm$Project$verifyDepNames(_List_Nil),
		$elm$json$Json$Decode$keyValuePairs(constraintDecoder));
};
var $elm$json$Json$Decode$map6 = _Json_map6;
var $elm$project_metadata_utils$Elm$Project$applicationDecoder = A7(
	$elm$json$Json$Decode$map6,
	$elm$project_metadata_utils$Elm$Project$ApplicationInfo,
	A2($elm$json$Json$Decode$field, 'elm-version', $elm$project_metadata_utils$Elm$Version$decoder),
	A2(
		$elm$json$Json$Decode$field,
		'source-directories',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['dependencies', 'direct']),
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['dependencies', 'indirect']),
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['test-dependencies', 'direct']),
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['test-dependencies', 'indirect']),
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)));
var $elm$project_metadata_utils$Elm$Project$PackageInfo = F8(
	function (name, summary, license, version, exposed, deps, testDeps, elm) {
		return {e8: deps, df: elm, fh: exposed, fE: license, bV: name, f9: summary, gf: testDeps, gn: version};
	});
var $elm$project_metadata_utils$Elm$Constraint$Constraint = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $elm$project_metadata_utils$Elm$Version$compare = F2(
	function (_v0, _v1) {
		var major1 = _v0.a;
		var minor1 = _v0.b;
		var patch1 = _v0.c;
		var major2 = _v1.a;
		var minor2 = _v1.b;
		var patch2 = _v1.c;
		var _v2 = A2($elm$core$Basics$compare, major1, major2);
		switch (_v2) {
			case 0:
				return 0;
			case 2:
				return 2;
			default:
				var _v3 = A2($elm$core$Basics$compare, minor1, minor2);
				switch (_v3) {
					case 0:
						return 0;
					case 1:
						return A2($elm$core$Basics$compare, patch1, patch2);
					default:
						return 2;
				}
		}
	});
var $elm$project_metadata_utils$Elm$Constraint$checkConstraint = function (constraint) {
	var lower = constraint.a;
	var upper = constraint.d;
	var _v0 = A2($elm$project_metadata_utils$Elm$Version$compare, lower, upper);
	switch (_v0) {
		case 0:
			return $elm$core$Maybe$Just(constraint);
		case 1:
			return $elm$core$Maybe$Just(constraint);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		if (ma.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 1) {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				if (mc.$ === 1) {
					return $elm$core$Maybe$Nothing;
				} else {
					var c = mc.a;
					if (md.$ === 1) {
						return $elm$core$Maybe$Nothing;
					} else {
						var d = md.a;
						return $elm$core$Maybe$Just(
							A4(func, a, b, c, d));
					}
				}
			}
		}
	});
var $elm$project_metadata_utils$Elm$Constraint$LessOrEq = 1;
var $elm$project_metadata_utils$Elm$Constraint$LessThan = 0;
var $elm$project_metadata_utils$Elm$Constraint$opFromString = function (op) {
	switch (op) {
		case '<':
			return $elm$core$Maybe$Just(0);
		case '<=':
			return $elm$core$Maybe$Just(1);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm$project_metadata_utils$Elm$Constraint$fromString = function (string) {
	var _v0 = A2($elm$core$String$split, ' ', string);
	if ((((((_v0.b && _v0.b.b) && _v0.b.b.b) && (_v0.b.b.a === 'v')) && _v0.b.b.b.b) && _v0.b.b.b.b.b) && (!_v0.b.b.b.b.b.b)) {
		var lower = _v0.a;
		var _v1 = _v0.b;
		var lop = _v1.a;
		var _v2 = _v1.b;
		var _v3 = _v2.b;
		var uop = _v3.a;
		var _v4 = _v3.b;
		var upper = _v4.a;
		return A2(
			$elm$core$Maybe$andThen,
			$elm$project_metadata_utils$Elm$Constraint$checkConstraint,
			A5(
				$elm$core$Maybe$map4,
				$elm$project_metadata_utils$Elm$Constraint$Constraint,
				$elm$project_metadata_utils$Elm$Version$fromString(lower),
				$elm$project_metadata_utils$Elm$Constraint$opFromString(lop),
				$elm$project_metadata_utils$Elm$Constraint$opFromString(uop),
				$elm$project_metadata_utils$Elm$Version$fromString(upper)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$project_metadata_utils$Elm$Constraint$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$Constraint$fromString(string);
	if (!_v0.$) {
		var constraint = _v0.a;
		return $elm$json$Json$Decode$succeed(constraint);
	} else {
		return $elm$json$Json$Decode$fail('I need a valid constraint like \"1.0.0 <= v < 2.0.0\"');
	}
};
var $elm$project_metadata_utils$Elm$Constraint$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Constraint$decoderHelp, $elm$json$Json$Decode$string);
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm$project_metadata_utils$Elm$License$License = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$project_metadata_utils$Elm$License$osiApprovedSpdxLicenses = _List_fromArray(
	[
		A2($elm$project_metadata_utils$Elm$License$License, 'AFL-1.1', 'Academic Free License v1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AFL-1.2', 'Academic Free License v1.2'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AFL-2.0', 'Academic Free License v2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AFL-2.1', 'Academic Free License v2.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AFL-3.0', 'Academic Free License v3.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'APL-1.0', 'Adaptive Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Apache-1.1', 'Apache License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Apache-2.0', 'Apache License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'APSL-1.0', 'Apple Public Source License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'APSL-1.1', 'Apple Public Source License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'APSL-1.2', 'Apple Public Source License 1.2'),
		A2($elm$project_metadata_utils$Elm$License$License, 'APSL-2.0', 'Apple Public Source License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Artistic-1.0', 'Artistic License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Artistic-1.0-Perl', 'Artistic License 1.0 (Perl)'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Artistic-1.0-cl8', 'Artistic License 1.0 w/clause 8'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Artistic-2.0', 'Artistic License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AAL', 'Attribution Assurance License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'BSL-1.0', 'Boost Software License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'BSD-2-Clause', 'BSD 2-clause \"Simplified\" License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'BSD-3-Clause', 'BSD 3-clause \"New\" or \"Revised\" License'),
		A2($elm$project_metadata_utils$Elm$License$License, '0BSD', 'BSD Zero Clause License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CECILL-2.1', 'CeCILL Free Software License Agreement v2.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CNRI-Python', 'CNRI Python License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CDDL-1.0', 'Common Development and Distribution License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CPAL-1.0', 'Common Public Attribution License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CPL-1.0', 'Common Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CATOSL-1.1', 'Computer Associates Trusted Open Source License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CUA-OPL-1.0', 'CUA Office Public License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'EPL-1.0', 'Eclipse Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'ECL-1.0', 'Educational Community License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'ECL-2.0', 'Educational Community License v2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'EFL-1.0', 'Eiffel Forum License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'EFL-2.0', 'Eiffel Forum License v2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Entessa', 'Entessa Public License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'EUDatagrid', 'EU DataGrid Software License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'EUPL-1.1', 'European Union Public License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Fair', 'Fair License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Frameworx-1.0', 'Frameworx Open License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AGPL-3.0', 'GNU Affero General Public License v3.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'GPL-2.0', 'GNU General Public License v2.0 only'),
		A2($elm$project_metadata_utils$Elm$License$License, 'GPL-3.0', 'GNU General Public License v3.0 only'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LGPL-2.1', 'GNU Lesser General Public License v2.1 only'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LGPL-3.0', 'GNU Lesser General Public License v3.0 only'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LGPL-2.0', 'GNU Library General Public License v2 only'),
		A2($elm$project_metadata_utils$Elm$License$License, 'HPND', 'Historic Permission Notice and Disclaimer'),
		A2($elm$project_metadata_utils$Elm$License$License, 'IPL-1.0', 'IBM Public License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Intel', 'Intel Open Source License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'IPA', 'IPA Font License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'ISC', 'ISC License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LPPL-1.3c', 'LaTeX Project Public License v1.3c'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LiLiQ-P-1.1', 'Licence Libre du Québec – Permissive version 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LiLiQ-Rplus-1.1', 'Licence Libre du Québec – Réciprocité forte version 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LiLiQ-R-1.1', 'Licence Libre du Québec – Réciprocité version 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LPL-1.02', 'Lucent Public License v1.02'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LPL-1.0', 'Lucent Public License Version 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MS-PL', 'Microsoft Public License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MS-RL', 'Microsoft Reciprocal License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MirOS', 'MirOS Licence'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MIT', 'MIT License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Motosoto', 'Motosoto License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MPL-1.0', 'Mozilla Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MPL-1.1', 'Mozilla Public License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MPL-2.0', 'Mozilla Public License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MPL-2.0-no-copyleft-exception', 'Mozilla Public License 2.0 (no copyleft exception)'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Multics', 'Multics License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'NASA-1.3', 'NASA Open Source Agreement 1.3'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Naumen', 'Naumen Public License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'NGPL', 'Nethack General Public License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Nokia', 'Nokia Open Source License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'NPOSL-3.0', 'Non-Profit Open Software License 3.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'NTP', 'NTP License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OCLC-2.0', 'OCLC Research Public License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OGTSL', 'Open Group Test Suite License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OSL-1.0', 'Open Software License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OSL-2.0', 'Open Software License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OSL-2.1', 'Open Software License 2.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OSL-3.0', 'Open Software License 3.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OSET-PL-2.1', 'OSET Public License version 2.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'PHP-3.0', 'PHP License v3.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'PostgreSQL', 'PostgreSQL License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Python-2.0', 'Python License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'QPL-1.0', 'Q Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'RPSL-1.0', 'RealNetworks Public Source License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'RPL-1.1', 'Reciprocal Public License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'RPL-1.5', 'Reciprocal Public License 1.5'),
		A2($elm$project_metadata_utils$Elm$License$License, 'RSCPL', 'Ricoh Source Code Public License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OFL-1.1', 'SIL Open Font License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'SimPL-2.0', 'Simple Public License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Sleepycat', 'Sleepycat License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'SISSL', 'Sun Industry Standards Source License v1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'SPL-1.0', 'Sun Public License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Watcom-1.0', 'Sybase Open Watcom Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'UPL-1.0', 'Universal Permissive License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'NCSA', 'University of Illinois/NCSA Open Source License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'VSL-1.0', 'Vovida Software License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'W3C', 'W3C Software Notice and License (2002-12-31)'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Xnet', 'X.Net License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Zlib', 'zlib License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'ZPL-2.0', 'Zope Public License 2.0')
	]);
var $elm$project_metadata_utils$Elm$License$spdxDict = $elm$core$Dict$fromList(
	A2(
		$elm$core$List$map,
		function (license) {
			var abbr = license.a;
			return _Utils_Tuple2(abbr, license);
		},
		$elm$project_metadata_utils$Elm$License$osiApprovedSpdxLicenses));
var $elm$project_metadata_utils$Elm$License$fromString = function (string) {
	return A2($elm$core$Dict$get, string, $elm$project_metadata_utils$Elm$License$spdxDict);
};
var $elm$project_metadata_utils$Elm$License$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$License$fromString(string);
	if (!_v0.$) {
		var license = _v0.a;
		return $elm$json$Json$Decode$succeed(license);
	} else {
		return $elm$json$Json$Decode$fail('I need an OSI approved license in SPDX format <https://spdx.org/licenses/>');
	}
};
var $elm$project_metadata_utils$Elm$License$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$License$decoderHelp, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$Package$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$Package$fromString(string);
	if (!_v0.$) {
		var name = _v0.a;
		return $elm$json$Json$Decode$succeed(name);
	} else {
		return $elm$json$Json$Decode$fail('I need a valid package name like \"elm/core\"');
	}
};
var $elm$project_metadata_utils$Elm$Package$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Package$decoderHelp, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$Project$ExposedDict = function (a) {
	return {$: 1, a: a};
};
var $elm$project_metadata_utils$Elm$Project$ExposedList = function (a) {
	return {$: 0, a: a};
};
var $elm$project_metadata_utils$Elm$Project$checkHeaders = function (dict) {
	checkHeaders:
	while (true) {
		if (!dict.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v1 = dict.a;
			var header = _v1.a;
			var others = dict.b;
			if ($elm$core$String$length(header) < 20) {
				var $temp$dict = others;
				dict = $temp$dict;
				continue checkHeaders;
			} else {
				return $elm$core$Maybe$Just(header);
			}
		}
	}
};
var $elm$project_metadata_utils$Elm$Project$checkExposedDict = function (dict) {
	var _v0 = $elm$project_metadata_utils$Elm$Project$checkHeaders(dict);
	if (_v0.$ === 1) {
		return $elm$json$Json$Decode$succeed(dict);
	} else {
		var badHeader = _v0.a;
		return $elm$json$Json$Decode$fail('The \"' + (badHeader + '\" header is too long. Twenty characters max!'));
	}
};
var $elm$project_metadata_utils$Elm$Module$Name = $elm$core$Basics$identity;
var $elm$project_metadata_utils$Elm$Module$isInner = function (_char) {
	return $elm$core$Char$isAlphaNum(_char) || (_char === '_');
};
var $elm$project_metadata_utils$Elm$Module$isGoodChunk = function (chunk) {
	var _v0 = $elm$core$String$uncons(chunk);
	if (_v0.$ === 1) {
		return false;
	} else {
		var _v1 = _v0.a;
		var _char = _v1.a;
		var rest = _v1.b;
		return $elm$core$Char$isUpper(_char) && A2($elm$core$String$all, $elm$project_metadata_utils$Elm$Module$isInner, rest);
	}
};
var $elm$project_metadata_utils$Elm$Module$fromString = function (string) {
	return A2(
		$elm$core$List$all,
		$elm$project_metadata_utils$Elm$Module$isGoodChunk,
		A2($elm$core$String$split, '.', string)) ? $elm$core$Maybe$Just(string) : $elm$core$Maybe$Nothing;
};
var $elm$project_metadata_utils$Elm$Module$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$Module$fromString(string);
	if (!_v0.$) {
		var name = _v0.a;
		return $elm$json$Json$Decode$succeed(name);
	} else {
		return $elm$json$Json$Decode$fail('I need a valid module name like \"Json.Decode\"');
	}
};
var $elm$project_metadata_utils$Elm$Module$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Module$decoderHelp, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$Project$exposedDecoder = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			$elm$project_metadata_utils$Elm$Project$ExposedList,
			$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Module$decoder)),
			A2(
			$elm$json$Json$Decode$map,
			$elm$project_metadata_utils$Elm$Project$ExposedDict,
			A2(
				$elm$json$Json$Decode$andThen,
				$elm$project_metadata_utils$Elm$Project$checkExposedDict,
				$elm$json$Json$Decode$keyValuePairs(
					$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Module$decoder))))
		]));
var $elm$json$Json$Decode$map8 = _Json_map8;
var $elm$project_metadata_utils$Elm$Project$summaryCheck = function (summary) {
	return ($elm$core$String$length(summary) < 80) ? $elm$json$Json$Decode$succeed(summary) : $elm$json$Json$Decode$fail('The \"summary\" field must have fewer than 80 characters.');
};
var $elm$project_metadata_utils$Elm$Project$summaryDecoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Project$summaryCheck, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$Project$packageDecoder = A9(
	$elm$json$Json$Decode$map8,
	$elm$project_metadata_utils$Elm$Project$PackageInfo,
	A2($elm$json$Json$Decode$field, 'name', $elm$project_metadata_utils$Elm$Package$decoder),
	A2($elm$json$Json$Decode$field, 'summary', $elm$project_metadata_utils$Elm$Project$summaryDecoder),
	A2($elm$json$Json$Decode$field, 'license', $elm$project_metadata_utils$Elm$License$decoder),
	A2($elm$json$Json$Decode$field, 'version', $elm$project_metadata_utils$Elm$Version$decoder),
	A2($elm$json$Json$Decode$field, 'exposed-modules', $elm$project_metadata_utils$Elm$Project$exposedDecoder),
	A2(
		$elm$json$Json$Decode$field,
		'dependencies',
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Constraint$decoder)),
	A2(
		$elm$json$Json$Decode$field,
		'test-dependencies',
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Constraint$decoder)),
	A2($elm$json$Json$Decode$field, 'elm-version', $elm$project_metadata_utils$Elm$Constraint$decoder));
var $elm$project_metadata_utils$Elm$Project$decoderHelp = function (tipe) {
	switch (tipe) {
		case 'application':
			return A2($elm$json$Json$Decode$map, $elm$project_metadata_utils$Elm$Project$Application, $elm$project_metadata_utils$Elm$Project$applicationDecoder);
		case 'package':
			return A2($elm$json$Json$Decode$map, $elm$project_metadata_utils$Elm$Project$Package, $elm$project_metadata_utils$Elm$Project$packageDecoder);
		default:
			var other = tipe;
			return $elm$json$Json$Decode$fail('The "type" field must be either "application" or "package", so ' + ('\"' + (other + '\" is not acceptable.')));
	}
};
var $elm$project_metadata_utils$Elm$Project$decoder = A2(
	$elm$json$Json$Decode$andThen,
	$elm$project_metadata_utils$Elm$Project$decoderHelp,
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string));
var $jfmengels$elm_review$Review$Project$removeDependencies = function (_v0) {
	var project = _v0;
	return _Utils_update(
		project,
		{e6: $elm$core$Dict$empty});
};
var $author$project$Elm$Review$Main$updateElmJsonFile = F3(
	function (dependencies, file, project) {
		var _v0 = A2($elm$json$Json$Decode$decodeString, $elm$project_metadata_utils$Elm$Project$decoder, file.hK);
		if (!_v0.$) {
			var newElmJson = _v0.a;
			var withUpdatedElmJson = A2(
				$jfmengels$elm_review$Review$Project$addElmJson,
				{hw: file.hw, h: newElmJson, dM: file.hK},
				project);
			if (!dependencies.$) {
				var deps = dependencies.a;
				return A3(
					$elm$core$List$foldl,
					$jfmengels$elm_review$Review$Project$addDependency,
					$jfmengels$elm_review$Review$Project$removeDependencies(withUpdatedElmJson),
					deps);
			} else {
				return withUpdatedElmJson;
			}
		} else {
			return project;
		}
	});
var $jfmengels$elm_review$Review$Project$addExtraFile = F2(
	function (file, _v0) {
		var project = _v0;
		return _Utils_update(
			project,
			{
				ap: A3($elm$core$Dict$insert, file.hw, file.hK, project.ap),
				K: A3(
					$elm$core$Dict$insert,
					file.hw,
					$jfmengels$elm_review$Review$Cache$ContentHash$hash(file.hK),
					project.K)
			});
	});
var $jfmengels$elm_review$Review$Project$updateFile = F2(
	function (file, rawProject) {
		var project = rawProject;
		var withElmModule = A2($elm$core$Dict$member, file.hw, project.av) ? A2($jfmengels$elm_review$Review$Project$addModule, file, rawProject) : rawProject;
		return A2($elm$core$Dict$member, file.hw, project.K) ? A2($jfmengels$elm_review$Review$Project$addExtraFile, file, withElmModule) : withElmModule;
	});
var $author$project$Elm$Review$Main$addUpdatedFileToProject = F3(
	function (dependencies, file, project) {
		return _Utils_eq(
			$elm$core$Maybe$Just(file.hw),
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.hw;
				},
				$jfmengels$elm_review$Review$Project$readme(project))) ? A2(
			$jfmengels$elm_review$Review$Project$addReadme,
			{db: file.hK, hw: file.hw},
			project) : (_Utils_eq(
			$elm$core$Maybe$Just(file.hw),
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.hw;
				},
				$jfmengels$elm_review$Review$Project$elmJson(project))) ? A3($author$project$Elm$Review$Main$updateElmJsonFile, dependencies, file, project) : A2(
			$jfmengels$elm_review$Review$Project$updateFile,
			{hw: file.hw, hK: file.hK},
			project));
	});
var $jfmengels$elm_review$Review$Rule$errorFilePath = function (_v0) {
	var err = _v0;
	return err.g_;
};
var $jfmengels$elm_review$Review$Rule$errorRuleName = function (_v0) {
	var err = _v0;
	return err.eH;
};
var $elm$core$List$partition = F2(function (f, xs) {
  var truesHead = _List_Cons(undefined, _List_Nil);
  var falsesHead = _List_Cons(undefined, _List_Nil);
  var truesEnd = truesHead;
  var falsesEnd = falsesHead;
  for (; xs.b; xs = xs.b) {
    var next = _List_Cons(xs.a, _List_Nil);
    if (f(xs.a)) {
      truesEnd.b = next;
      truesEnd = next;
    } else {
      falsesEnd.b = next;
      falsesEnd = next;
    }
  }
  return _Utils_Tuple2(truesHead.b, falsesHead.b);
});
var $author$project$Elm$Review$Vendor$List$Extra$gatherWith = F2(
	function (testFn, list) {
		var helper = F2(
			function (scattered, gathered) {
				helper:
				while (true) {
					if (!scattered.b) {
						return $elm$core$List$reverse(gathered);
					} else {
						var toGather = scattered.a;
						var population = scattered.b;
						var _v1 = A2(
							$elm$core$List$partition,
							testFn(toGather),
							population);
						var gathering = _v1.a;
						var remaining = _v1.b;
						var $temp$scattered = remaining,
							$temp$gathered = A2(
							$elm$core$List$cons,
							_Utils_Tuple2(toGather, gathering),
							gathered);
						scattered = $temp$scattered;
						gathered = $temp$gathered;
						continue helper;
					}
				}
			});
		return A2(helper, list, _List_Nil);
	});
var $author$project$Elm$Review$SuppressedErrors$applyHelp = F2(
	function (suppressedErrors, errors) {
		return A2(
			$elm$core$List$concatMap,
			function (_v0) {
				var head = _v0.a;
				var tail = _v0.b;
				var _v1 = A2(
					$elm$core$Dict$get,
					_Utils_Tuple2(
						$jfmengels$elm_review$Review$Rule$errorRuleName(head),
						$jfmengels$elm_review$Review$Rule$errorFilePath(head)),
					suppressedErrors);
				if (!_v1.$) {
					var nbSuppressedErrors = _v1.a;
					return (_Utils_cmp(
						$elm$core$List$length(tail),
						nbSuppressedErrors - 1) < 1) ? _List_Nil : A2($elm$core$List$cons, head, tail);
				} else {
					return A2($elm$core$List$cons, head, tail);
				}
			},
			A2(
				$author$project$Elm$Review$Vendor$List$Extra$gatherWith,
				F2(
					function (a, b) {
						return _Utils_eq(
							$jfmengels$elm_review$Review$Rule$errorFilePath(a),
							$jfmengels$elm_review$Review$Rule$errorFilePath(b)) && _Utils_eq(
							$jfmengels$elm_review$Review$Rule$errorRuleName(a),
							$jfmengels$elm_review$Review$Rule$errorRuleName(b));
					}),
				errors));
	});
var $author$project$Elm$Review$SuppressedErrors$filterSuppressed = F2(
	function (ruleNames, suppressedErrors) {
		return A2(
			$elm$core$Dict$filter,
			F2(
				function (_v0, _v1) {
					var ruleName = _v0.a;
					return !A2($elm$core$Set$member, ruleName, ruleNames);
				}),
			suppressedErrors);
	});
var $elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === -2) {
		return true;
	} else {
		return false;
	}
};
var $author$project$Elm$Review$SuppressedErrors$apply = F3(
	function (unsuppressMode, _v0, errors) {
		var suppressedErrors = _v0;
		if ($elm$core$Dict$isEmpty(suppressedErrors)) {
			return errors;
		} else {
			switch (unsuppressMode.$) {
				case 0:
					return errors;
				case 1:
					var ruleNames = unsuppressMode.a;
					return A2(
						$author$project$Elm$Review$SuppressedErrors$applyHelp,
						A2($author$project$Elm$Review$SuppressedErrors$filterSuppressed, ruleNames, suppressedErrors),
						errors);
				default:
					return A2($author$project$Elm$Review$SuppressedErrors$applyHelp, suppressedErrors, errors);
			}
		}
	});
var $author$project$Elm$Review$Vendor$Serialize$getJsonEncoder = function (_v0) {
	var m = _v0;
	return m.bQ;
};
var $author$project$Elm$Review$Vendor$Serialize$version = 1;
var $author$project$Elm$Review$Vendor$Serialize$encodeToJson = F2(
	function (codec, value) {
		return A2(
			$elm$json$Json$Encode$list,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					$elm$json$Json$Encode$int($author$project$Elm$Review$Vendor$Serialize$version),
					A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, codec, value)
				]));
	});
var $stil4m$elm_syntax$Elm$Syntax$File$File = F4(
	function (moduleDefinition, imports, declarations, comments) {
		return {gI: comments, e4: declarations, g4: imports, hi: moduleDefinition};
	});
var $stil4m$elm_syntax$Elm$Syntax$Declaration$Destructuring = F2(
	function (a, b) {
		return {$: 5, a: a, b: b};
	});
var $author$project$Elm$Review$Vendor$Serialize$CustomTypeCodec = $elm$core$Basics$identity;
var $author$project$Elm$Review$Vendor$Serialize$customType = function (match) {
	return {
		cW: 0,
		au: function (_v0) {
			return $elm$core$Basics$identity;
		},
		dy: match
	};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$CaseBlock = F2(
	function (expression, cases) {
		return {gE: cases, dm: expression};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$Function = F3(
	function (documentation, signature, declaration) {
		return {gM: declaration, ed: documentation, hJ: signature};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionImplementation = F3(
	function (name, _arguments, expression) {
		return {eY: _arguments, dm: expression, bV: name};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$Lambda = F2(
	function (args, expression) {
		return {gt: args, dm: expression};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetBlock = F2(
	function (declarations, expression) {
		return {e4: declarations, dm: expression};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$Operator = function (a) {
	return {$: 6, a: a};
};
var $author$project$Elm$Review$AstCodec$InvalidChar = 0;
var $author$project$Elm$Review$Vendor$Serialize$CustomError = function (a) {
	return {$: 0, a: a};
};
var $author$project$Elm$Review$Vendor$Serialize$Codec = $elm$core$Basics$identity;
var $author$project$Elm$Review$Vendor$Serialize$build = F2(
	function (jsonEncoder, jsonDecoder) {
		return {au: jsonDecoder, bQ: jsonEncoder};
	});
var $author$project$Elm$Review$Vendor$Serialize$getJsonDecoder = function (_v0) {
	var m = _v0;
	return m.au;
};
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (!result.$) {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $author$project$Elm$Review$Vendor$Serialize$mapValid = F3(
	function (fromBytes_, toBytes_, codec) {
		return A2(
			$author$project$Elm$Review$Vendor$Serialize$build,
			function (v) {
				return A2(
					$author$project$Elm$Review$Vendor$Serialize$getJsonEncoder,
					codec,
					toBytes_(v));
			},
			A2(
				$elm$json$Json$Decode$map,
				function (value) {
					if (!value.$) {
						var ok = value.a;
						return A2(
							$elm$core$Result$mapError,
							$author$project$Elm$Review$Vendor$Serialize$CustomError,
							fromBytes_(ok));
					} else {
						var err = value.a;
						return $elm$core$Result$Err(err);
					}
				},
				$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(codec)));
	});
var $author$project$Elm$Review$Vendor$Serialize$string = A2(
	$author$project$Elm$Review$Vendor$Serialize$build,
	$elm$json$Json$Encode$string,
	A2($elm$json$Json$Decode$map, $elm$core$Result$Ok, $elm$json$Json$Decode$string));
var $author$project$Elm$Review$AstCodec$char = A3(
	$author$project$Elm$Review$Vendor$Serialize$mapValid,
	function (string) {
		var _v0 = $elm$core$String$toList(string);
		if (_v0.b) {
			var head = _v0.a;
			return $elm$core$Result$Ok(head);
		} else {
			return $elm$core$Result$Err(0);
		}
	},
	$elm$core$String$fromChar,
	$author$project$Elm$Review$Vendor$Serialize$string);
var $author$project$Elm$Review$Vendor$Serialize$RecordCodec = $elm$core$Basics$identity;
var $elm$json$Json$Decode$index = _Json_decodeIndex;
var $author$project$Elm$Review$Vendor$Serialize$field = F3(
	function (getter, codec, _v0) {
		var recordCodec = _v0;
		return {
			$7: recordCodec.$7 + 1,
			au: A3(
				$elm$json$Json$Decode$map2,
				F2(
					function (f, x) {
						var _v1 = _Utils_Tuple2(f, x);
						if (!_v1.a.$) {
							if (!_v1.b.$) {
								var fOk = _v1.a.a;
								var xOk = _v1.b.a;
								return $elm$core$Result$Ok(
									fOk(xOk));
							} else {
								var err = _v1.b.a;
								return $elm$core$Result$Err(err);
							}
						} else {
							var err = _v1.a.a;
							return $elm$core$Result$Err(err);
						}
					}),
				recordCodec.au,
				A2(
					$elm$json$Json$Decode$index,
					recordCodec.$7,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(codec))),
			bQ: function (v) {
				return A2(
					$elm$core$List$cons,
					A2(
						$author$project$Elm$Review$Vendor$Serialize$getJsonEncoder,
						codec,
						getter(v)),
					recordCodec.bQ(v));
			}
		};
	});
var $author$project$Elm$Review$Vendor$Serialize$DataCorrupted = {$: 1};
var $author$project$Elm$Review$Vendor$Serialize$finishCustomType = function (_v0) {
	var am = _v0;
	return A2(
		$author$project$Elm$Review$Vendor$Serialize$build,
		A2(
			$elm$core$Basics$composeR,
			am.dy,
			function (_v1) {
				var _v2 = _v1;
				var a = _v2.b;
				return a;
			}),
		A2(
			$elm$json$Json$Decode$andThen,
			function (tag) {
				return A2(
					am.au,
					tag,
					$elm$json$Json$Decode$succeed(
						$elm$core$Result$Err($author$project$Elm$Review$Vendor$Serialize$DataCorrupted)));
			},
			A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int)));
};
var $author$project$Elm$Review$Vendor$Serialize$finishRecord = function (_v0) {
	var codec = _v0;
	return {
		au: codec.au,
		bQ: A2(
			$elm$core$Basics$composeR,
			codec.bQ,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$reverse,
				$elm$json$Json$Encode$list($elm$core$Basics$identity)))
	};
};
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $elm$json$Json$Encode$float = _Json_wrap;
var $author$project$Elm$Review$Vendor$Serialize$float = A2(
	$author$project$Elm$Review$Vendor$Serialize$build,
	$elm$json$Json$Encode$float,
	A2($elm$json$Json$Decode$map, $elm$core$Result$Ok, $elm$json$Json$Decode$float));
var $author$project$Elm$Review$Vendor$Serialize$findIndexHelp = F3(
	function (index, predicate, list_) {
		findIndexHelp:
		while (true) {
			if (!list_.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list_.a;
				var xs = list_.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$index = index + 1,
						$temp$predicate = predicate,
						$temp$list_ = xs;
					index = $temp$index;
					predicate = $temp$predicate;
					list_ = $temp$list_;
					continue findIndexHelp;
				}
			}
		}
	});
var $author$project$Elm$Review$Vendor$Serialize$findIndex = $author$project$Elm$Review$Vendor$Serialize$findIndexHelp(0);
var $author$project$Elm$Review$Vendor$Serialize$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $author$project$Elm$Review$Vendor$Serialize$enum = F2(
	function (defaultItem, items) {
		var getItem = function (index) {
			return (index < 0) ? $elm$core$Result$Err($author$project$Elm$Review$Vendor$Serialize$DataCorrupted) : ((_Utils_cmp(
				index,
				$elm$core$List$length(items)) > 0) ? $elm$core$Result$Err($author$project$Elm$Review$Vendor$Serialize$DataCorrupted) : $elm$core$Result$Ok(
				A2(
					$elm$core$Maybe$withDefault,
					defaultItem,
					A2($author$project$Elm$Review$Vendor$Serialize$getAt, index - 1, items))));
		};
		var getIndex = function (value) {
			return 1 + A2(
				$elm$core$Maybe$withDefault,
				-1,
				A2(
					$author$project$Elm$Review$Vendor$Serialize$findIndex,
					$elm$core$Basics$eq(value),
					items));
		};
		return A2(
			$author$project$Elm$Review$Vendor$Serialize$build,
			A2($elm$core$Basics$composeR, getIndex, $elm$json$Json$Encode$int),
			A2($elm$json$Json$Decode$map, getItem, $elm$json$Json$Decode$int));
	});
var $author$project$Elm$Review$AstCodec$infixDirection = A2(
	$author$project$Elm$Review$Vendor$Serialize$enum,
	0,
	_List_fromArray(
		[1, 2]));
var $author$project$Elm$Review$Vendor$Serialize$int = A2(
	$author$project$Elm$Review$Vendor$Serialize$build,
	$elm$json$Json$Encode$int,
	A2($elm$json$Json$Decode$map, $elm$core$Result$Ok, $elm$json$Json$Decode$int));
var $author$project$Elm$Review$Vendor$Serialize$lazy = function (f) {
	return A2(
		$author$project$Elm$Review$Vendor$Serialize$build,
		function (value) {
			return A2(
				$author$project$Elm$Review$Vendor$Serialize$getJsonEncoder,
				f(0),
				value);
		},
		A2(
			$elm$json$Json$Decode$andThen,
			function (_v0) {
				return $author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(
					f(0));
			},
			$elm$json$Json$Decode$succeed(0)));
};
var $author$project$Elm$Review$Vendor$Serialize$list = function (codec) {
	return A2(
		$author$project$Elm$Review$Vendor$Serialize$build,
		$elm$json$Json$Encode$list(
			$author$project$Elm$Review$Vendor$Serialize$getJsonEncoder(codec)),
		A2(
			$elm$json$Json$Decode$map,
			A2(
				$elm$core$List$foldr,
				F2(
					function (value, state) {
						var _v0 = _Utils_Tuple2(value, state);
						if (_v0.b.$ === 1) {
							return state;
						} else {
							if (!_v0.a.$) {
								var ok = _v0.a.a;
								var okState = _v0.b.a;
								return $elm$core$Result$Ok(
									A2($elm$core$List$cons, ok, okState));
							} else {
								var error = _v0.a.a;
								return $elm$core$Result$Err(error);
							}
						}
					}),
				$elm$core$Result$Ok(_List_Nil)),
			$elm$json$Json$Decode$list(
				$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(codec))));
};
var $author$project$Elm$Review$Vendor$Serialize$VariantEncoder = $elm$core$Basics$identity;
var $author$project$Elm$Review$Vendor$Serialize$variant = F3(
	function (matchJsonPiece, jsonDecoderPiece, _v0) {
		var am = _v0;
		var jsonEnc = function (v) {
			return _Utils_Tuple2(
				0,
				A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					A2(
						$elm$core$List$cons,
						$elm$json$Json$Encode$int(am.cW),
						v)));
		};
		var jsonDecoder_ = F2(
			function (tag, orElse) {
				return _Utils_eq(tag, am.cW) ? jsonDecoderPiece : A2(am.au, tag, orElse);
			});
		return {
			cW: am.cW + 1,
			au: jsonDecoder_,
			dy: am.dy(
				matchJsonPiece(jsonEnc))
		};
	});
var $author$project$Elm$Review$Vendor$Serialize$variant0 = function (ctor) {
	return A2(
		$author$project$Elm$Review$Vendor$Serialize$variant,
		function (c) {
			return c(_List_Nil);
		},
		$elm$json$Json$Decode$succeed(
			$elm$core$Result$Ok(ctor)));
};
var $author$project$Elm$Review$Vendor$Serialize$result1 = F2(
	function (ctor, value) {
		if (!value.$) {
			var ok = value.a;
			return $elm$core$Result$Ok(
				ctor(ok));
		} else {
			var err = value.a;
			return $elm$core$Result$Err(err);
		}
	});
var $author$project$Elm$Review$Vendor$Serialize$variant1 = F2(
	function (ctor, m1) {
		return A2(
			$author$project$Elm$Review$Vendor$Serialize$variant,
			F2(
				function (c, v) {
					return c(
						_List_fromArray(
							[
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m1, v)
							]));
				}),
			A2(
				$elm$json$Json$Decode$map,
				$author$project$Elm$Review$Vendor$Serialize$result1(ctor),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m1))));
	});
var $author$project$Elm$Review$Vendor$Serialize$maybe = function (justCodec) {
	return $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$variant1,
			$elm$core$Maybe$Just,
			justCodec,
			A2(
				$author$project$Elm$Review$Vendor$Serialize$variant0,
				$elm$core$Maybe$Nothing,
				$author$project$Elm$Review$Vendor$Serialize$customType(
					F3(
						function (nothingEncoder, justEncoder, value) {
							if (value.$ === 1) {
								return nothingEncoder;
							} else {
								var value_ = value.a;
								return justEncoder(value_);
							}
						})))));
};
var $author$project$Elm$Review$Vendor$Serialize$record = function (ctor) {
	return {
		$7: 0,
		au: $elm$json$Json$Decode$succeed(
			$elm$core$Result$Ok(ctor)),
		bQ: function (_v0) {
			return _List_Nil;
		}
	};
};
var $author$project$Elm$Review$AstCodec$node = function (codec) {
	return $author$project$Elm$Review$Vendor$Serialize$finishRecord(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function (_v4) {
				var a = _v4.b;
				return a;
			},
			codec,
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function (_v3) {
					var range_ = _v3.a;
					return range_.b9.a6;
				},
				$author$project$Elm$Review$Vendor$Serialize$int,
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					function (_v2) {
						var range_ = _v2.a;
						return range_.b9.bp;
					},
					$author$project$Elm$Review$Vendor$Serialize$int,
					A3(
						$author$project$Elm$Review$Vendor$Serialize$field,
						function (_v1) {
							var range_ = _v1.a;
							return range_.cB.a6;
						},
						$author$project$Elm$Review$Vendor$Serialize$int,
						A3(
							$author$project$Elm$Review$Vendor$Serialize$field,
							function (_v0) {
								var range_ = _v0.a;
								return range_.cB.bp;
							},
							$author$project$Elm$Review$Vendor$Serialize$int,
							$author$project$Elm$Review$Vendor$Serialize$record(
								F5(
									function (a, b, c, d, e) {
										return A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											{
												b9: {a6: d, bp: c},
												cB: {a6: b, bp: a}
											},
											e);
									}))))))));
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$FloatPattern = function (a) {
	return {$: 6, a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$QualifiedNameRef = F2(
	function (moduleName, name) {
		return {dE: moduleName, bV: name};
	});
var $author$project$Elm$Review$AstCodec$qualifiedNameRef = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.bV;
		},
		$author$project$Elm$Review$Vendor$Serialize$string,
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.dE;
			},
			$author$project$Elm$Review$Vendor$Serialize$list($author$project$Elm$Review$Vendor$Serialize$string),
			$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Pattern$QualifiedNameRef))));
var $author$project$Elm$Review$Vendor$Serialize$result2 = F3(
	function (ctor, v1, v2) {
		var _v0 = _Utils_Tuple2(v1, v2);
		if (!_v0.a.$) {
			if (!_v0.b.$) {
				var ok1 = _v0.a.a;
				var ok2 = _v0.b.a;
				return $elm$core$Result$Ok(
					A2(ctor, ok1, ok2));
			} else {
				var err = _v0.b.a;
				return $elm$core$Result$Err(err);
			}
		} else {
			var err = _v0.a.a;
			return $elm$core$Result$Err(err);
		}
	});
var $author$project$Elm$Review$Vendor$Serialize$variant2 = F3(
	function (ctor, m1, m2) {
		return A2(
			$author$project$Elm$Review$Vendor$Serialize$variant,
			F3(
				function (c, v1, v2) {
					return c(
						_List_fromArray(
							[
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m1, v1),
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m2, v2)
							]));
				}),
			A3(
				$elm$json$Json$Decode$map2,
				$author$project$Elm$Review$Vendor$Serialize$result2(ctor),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m1)),
				A2(
					$elm$json$Json$Decode$index,
					2,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m2))));
	});
function $author$project$Elm$Review$AstCodec$cyclic$pattern() {
	return $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$variant1,
			$stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern,
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$AstCodec$cyclic$lazyPattern()),
			A4(
				$author$project$Elm$Review$Vendor$Serialize$variant2,
				$stil4m$elm_syntax$Elm$Syntax$Pattern$AsPattern,
				$author$project$Elm$Review$AstCodec$node(
					$author$project$Elm$Review$AstCodec$cyclic$lazyPattern()),
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
				A4(
					$author$project$Elm$Review$Vendor$Serialize$variant2,
					$stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern,
					$author$project$Elm$Review$AstCodec$qualifiedNameRef,
					$author$project$Elm$Review$Vendor$Serialize$list(
						$author$project$Elm$Review$AstCodec$node(
							$author$project$Elm$Review$AstCodec$cyclic$lazyPattern())),
					A3(
						$author$project$Elm$Review$Vendor$Serialize$variant1,
						$stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern,
						$author$project$Elm$Review$Vendor$Serialize$string,
						A3(
							$author$project$Elm$Review$Vendor$Serialize$variant1,
							$stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern,
							$author$project$Elm$Review$Vendor$Serialize$list(
								$author$project$Elm$Review$AstCodec$node(
									$author$project$Elm$Review$AstCodec$cyclic$lazyPattern())),
							A4(
								$author$project$Elm$Review$Vendor$Serialize$variant2,
								$stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern,
								$author$project$Elm$Review$AstCodec$node(
									$author$project$Elm$Review$AstCodec$cyclic$lazyPattern()),
								$author$project$Elm$Review$AstCodec$node(
									$author$project$Elm$Review$AstCodec$cyclic$lazyPattern()),
								A3(
									$author$project$Elm$Review$Vendor$Serialize$variant1,
									$stil4m$elm_syntax$Elm$Syntax$Pattern$RecordPattern,
									$author$project$Elm$Review$Vendor$Serialize$list(
										$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
									A3(
										$author$project$Elm$Review$Vendor$Serialize$variant1,
										$stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern,
										$author$project$Elm$Review$Vendor$Serialize$list(
											$author$project$Elm$Review$AstCodec$node(
												$author$project$Elm$Review$AstCodec$cyclic$lazyPattern())),
										A3(
											$author$project$Elm$Review$Vendor$Serialize$variant1,
											$stil4m$elm_syntax$Elm$Syntax$Pattern$FloatPattern,
											$author$project$Elm$Review$Vendor$Serialize$float,
											A3(
												$author$project$Elm$Review$Vendor$Serialize$variant1,
												$stil4m$elm_syntax$Elm$Syntax$Pattern$HexPattern,
												$author$project$Elm$Review$Vendor$Serialize$int,
												A3(
													$author$project$Elm$Review$Vendor$Serialize$variant1,
													$stil4m$elm_syntax$Elm$Syntax$Pattern$IntPattern,
													$author$project$Elm$Review$Vendor$Serialize$int,
													A3(
														$author$project$Elm$Review$Vendor$Serialize$variant1,
														$stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern,
														$author$project$Elm$Review$Vendor$Serialize$string,
														A3(
															$author$project$Elm$Review$Vendor$Serialize$variant1,
															$stil4m$elm_syntax$Elm$Syntax$Pattern$CharPattern,
															$author$project$Elm$Review$AstCodec$char,
															A2(
																$author$project$Elm$Review$Vendor$Serialize$variant0,
																$stil4m$elm_syntax$Elm$Syntax$Pattern$UnitPattern,
																A2(
																	$author$project$Elm$Review$Vendor$Serialize$variant0,
																	$stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern,
																	$author$project$Elm$Review$Vendor$Serialize$customType(
																		function (e0) {
																			return function (e1) {
																				return function (e2) {
																					return function (e3) {
																						return function (e4) {
																							return function (e5) {
																								return function (e6) {
																									return function (e7) {
																										return function (e8) {
																											return function (e9) {
																												return function (e10) {
																													return function (e11) {
																														return function (e12) {
																															return function (e13) {
																																return function (e14) {
																																	return function (value) {
																																		switch (value.$) {
																																			case 0:
																																				return e0;
																																			case 1:
																																				return e1;
																																			case 2:
																																				var a = value.a;
																																				return e2(a);
																																			case 3:
																																				var a = value.a;
																																				return e3(a);
																																			case 4:
																																				var a = value.a;
																																				return e4(a);
																																			case 5:
																																				var a = value.a;
																																				return e5(a);
																																			case 6:
																																				var a = value.a;
																																				return e6(a);
																																			case 7:
																																				var a = value.a;
																																				return e7(a);
																																			case 8:
																																				var a = value.a;
																																				return e8(a);
																																			case 9:
																																				var a = value.a;
																																				var b = value.b;
																																				return A2(e9, a, b);
																																			case 10:
																																				var a = value.a;
																																				return e10(a);
																																			case 11:
																																				var a = value.a;
																																				return e11(a);
																																			case 12:
																																				var a = value.a;
																																				var b = value.b;
																																				return A2(e12, a, b);
																																			case 13:
																																				var a = value.a;
																																				var b = value.b;
																																				return A2(e13, a, b);
																																			default:
																																				var a = value.a;
																																				return e14(a);
																																		}
																																	};
																																};
																															};
																														};
																													};
																												};
																											};
																										};
																									};
																								};
																							};
																						};
																					};
																				};
																			};
																		})))))))))))))))));
}
function $author$project$Elm$Review$AstCodec$cyclic$lazyPattern() {
	return $author$project$Elm$Review$Vendor$Serialize$lazy(
		function (_v0) {
			return $author$project$Elm$Review$AstCodec$cyclic$pattern();
		});
}
var $author$project$Elm$Review$AstCodec$pattern = $author$project$Elm$Review$AstCodec$cyclic$pattern();
$author$project$Elm$Review$AstCodec$cyclic$pattern = function () {
	return $author$project$Elm$Review$AstCodec$pattern;
};
var $author$project$Elm$Review$AstCodec$lazyPattern = $author$project$Elm$Review$AstCodec$cyclic$lazyPattern();
$author$project$Elm$Review$AstCodec$cyclic$lazyPattern = function () {
	return $author$project$Elm$Review$AstCodec$lazyPattern;
};
var $author$project$Elm$Review$Vendor$Serialize$tuple = F2(
	function (codecFirst, codecSecond) {
		return $author$project$Elm$Review$Vendor$Serialize$finishRecord(
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				$elm$core$Tuple$second,
				codecSecond,
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					$elm$core$Tuple$first,
					codecFirst,
					$author$project$Elm$Review$Vendor$Serialize$record($elm$core$Tuple$pair))));
	});
function $author$project$Elm$Review$AstCodec$cyclic$typeAnnotation() {
	return $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
		A4(
			$author$project$Elm$Review$Vendor$Serialize$variant2,
			$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation,
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$AstCodec$cyclic$lazyTypeAnnotation()),
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$AstCodec$cyclic$lazyTypeAnnotation()),
			A4(
				$author$project$Elm$Review$Vendor$Serialize$variant2,
				$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord,
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
				$author$project$Elm$Review$AstCodec$node(
					$author$project$Elm$Review$AstCodec$cyclic$recordDefinition()),
				A3(
					$author$project$Elm$Review$Vendor$Serialize$variant1,
					$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record,
					$author$project$Elm$Review$AstCodec$cyclic$recordDefinition(),
					A3(
						$author$project$Elm$Review$Vendor$Serialize$variant1,
						$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled,
						$author$project$Elm$Review$Vendor$Serialize$list(
							$author$project$Elm$Review$AstCodec$node(
								$author$project$Elm$Review$AstCodec$cyclic$lazyTypeAnnotation())),
						A2(
							$author$project$Elm$Review$Vendor$Serialize$variant0,
							$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit,
							A4(
								$author$project$Elm$Review$Vendor$Serialize$variant2,
								$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed,
								$author$project$Elm$Review$AstCodec$node(
									A2(
										$author$project$Elm$Review$Vendor$Serialize$tuple,
										$author$project$Elm$Review$Vendor$Serialize$list($author$project$Elm$Review$Vendor$Serialize$string),
										$author$project$Elm$Review$Vendor$Serialize$string)),
								$author$project$Elm$Review$Vendor$Serialize$list(
									$author$project$Elm$Review$AstCodec$node(
										$author$project$Elm$Review$AstCodec$cyclic$lazyTypeAnnotation())),
								A3(
									$author$project$Elm$Review$Vendor$Serialize$variant1,
									$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType,
									$author$project$Elm$Review$Vendor$Serialize$string,
									$author$project$Elm$Review$Vendor$Serialize$customType(
										F8(
											function (e0, e1, e2, e3, e4, e5, e6, value) {
												switch (value.$) {
													case 0:
														var a = value.a;
														return e0(a);
													case 1:
														var a = value.a;
														var b = value.b;
														return A2(e1, a, b);
													case 2:
														return e2;
													case 3:
														var a = value.a;
														return e3(a);
													case 4:
														var a = value.a;
														return e4(a);
													case 5:
														var a = value.a;
														var b = value.b;
														return A2(e5, a, b);
													default:
														var a = value.a;
														var b = value.b;
														return A2(e6, a, b);
												}
											}))))))))));
}
function $author$project$Elm$Review$AstCodec$cyclic$recordDefinition() {
	return $author$project$Elm$Review$Vendor$Serialize$list(
		$author$project$Elm$Review$AstCodec$node(
			A2(
				$author$project$Elm$Review$Vendor$Serialize$tuple,
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
				$author$project$Elm$Review$AstCodec$node(
					$author$project$Elm$Review$AstCodec$cyclic$lazyTypeAnnotation()))));
}
function $author$project$Elm$Review$AstCodec$cyclic$lazyTypeAnnotation() {
	return $author$project$Elm$Review$Vendor$Serialize$lazy(
		function (_v0) {
			return $author$project$Elm$Review$AstCodec$cyclic$typeAnnotation();
		});
}
var $author$project$Elm$Review$AstCodec$typeAnnotation = $author$project$Elm$Review$AstCodec$cyclic$typeAnnotation();
$author$project$Elm$Review$AstCodec$cyclic$typeAnnotation = function () {
	return $author$project$Elm$Review$AstCodec$typeAnnotation;
};
var $author$project$Elm$Review$AstCodec$recordDefinition = $author$project$Elm$Review$AstCodec$cyclic$recordDefinition();
$author$project$Elm$Review$AstCodec$cyclic$recordDefinition = function () {
	return $author$project$Elm$Review$AstCodec$recordDefinition;
};
var $author$project$Elm$Review$AstCodec$lazyTypeAnnotation = $author$project$Elm$Review$AstCodec$cyclic$lazyTypeAnnotation();
$author$project$Elm$Review$AstCodec$cyclic$lazyTypeAnnotation = function () {
	return $author$project$Elm$Review$AstCodec$lazyTypeAnnotation;
};
var $author$project$Elm$Review$AstCodec$signature = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.gk;
		},
		$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$typeAnnotation),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.bV;
			},
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
			$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Signature$Signature))));
var $elm$json$Json$Decode$map3 = _Json_map3;
var $author$project$Elm$Review$Vendor$Serialize$result3 = F4(
	function (ctor, v1, v2, v3) {
		var _v0 = _Utils_Tuple3(v1, v2, v3);
		if (!_v0.a.$) {
			if (!_v0.b.$) {
				if (!_v0.c.$) {
					var ok1 = _v0.a.a;
					var ok2 = _v0.b.a;
					var ok3 = _v0.c.a;
					return $elm$core$Result$Ok(
						A3(ctor, ok1, ok2, ok3));
				} else {
					var err = _v0.c.a;
					return $elm$core$Result$Err(err);
				}
			} else {
				var err = _v0.b.a;
				return $elm$core$Result$Err(err);
			}
		} else {
			var err = _v0.a.a;
			return $elm$core$Result$Err(err);
		}
	});
var $author$project$Elm$Review$Vendor$Serialize$variant3 = F4(
	function (ctor, m1, m2, m3) {
		return A2(
			$author$project$Elm$Review$Vendor$Serialize$variant,
			F4(
				function (c, v1, v2, v3) {
					return c(
						_List_fromArray(
							[
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m1, v1),
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m2, v2),
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m3, v3)
							]));
				}),
			A4(
				$elm$json$Json$Decode$map3,
				$author$project$Elm$Review$Vendor$Serialize$result3(ctor),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m1)),
				A2(
					$elm$json$Json$Decode$index,
					2,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m2)),
				A2(
					$elm$json$Json$Decode$index,
					3,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m3))));
	});
var $elm$json$Json$Decode$map4 = _Json_map4;
var $author$project$Elm$Review$Vendor$Serialize$T4 = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $author$project$Elm$Review$Vendor$Serialize$result4 = F5(
	function (ctor, v1, v2, v3, v4) {
		var _v0 = A4($author$project$Elm$Review$Vendor$Serialize$T4, v1, v2, v3, v4);
		if (!_v0.a.$) {
			if (!_v0.b.$) {
				if (!_v0.c.$) {
					if (!_v0.d.$) {
						var ok1 = _v0.a.a;
						var ok2 = _v0.b.a;
						var ok3 = _v0.c.a;
						var ok4 = _v0.d.a;
						return $elm$core$Result$Ok(
							A4(ctor, ok1, ok2, ok3, ok4));
					} else {
						var err = _v0.d.a;
						return $elm$core$Result$Err(err);
					}
				} else {
					var err = _v0.c.a;
					return $elm$core$Result$Err(err);
				}
			} else {
				var err = _v0.b.a;
				return $elm$core$Result$Err(err);
			}
		} else {
			var err = _v0.a.a;
			return $elm$core$Result$Err(err);
		}
	});
var $author$project$Elm$Review$Vendor$Serialize$variant4 = F5(
	function (ctor, m1, m2, m3, m4) {
		return A2(
			$author$project$Elm$Review$Vendor$Serialize$variant,
			F5(
				function (c, v1, v2, v3, v4) {
					return c(
						_List_fromArray(
							[
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m1, v1),
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m2, v2),
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m3, v3),
								A2($author$project$Elm$Review$Vendor$Serialize$getJsonEncoder, m4, v4)
							]));
				}),
			A5(
				$elm$json$Json$Decode$map4,
				$author$project$Elm$Review$Vendor$Serialize$result4(ctor),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m1)),
				A2(
					$elm$json$Json$Decode$index,
					2,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m2)),
				A2(
					$elm$json$Json$Decode$index,
					3,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m3)),
				A2(
					$elm$json$Json$Decode$index,
					4,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(m4))));
	});
function $author$project$Elm$Review$AstCodec$cyclic$expression() {
	return $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$variant1,
			$stil4m$elm_syntax$Elm$Syntax$Expression$Operator,
			$author$project$Elm$Review$Vendor$Serialize$string,
			A3(
				$author$project$Elm$Review$Vendor$Serialize$variant1,
				$stil4m$elm_syntax$Elm$Syntax$Expression$GLSLExpression,
				$author$project$Elm$Review$Vendor$Serialize$string,
				A4(
					$author$project$Elm$Review$Vendor$Serialize$variant2,
					$stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression,
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
					$author$project$Elm$Review$Vendor$Serialize$list(
						$author$project$Elm$Review$AstCodec$node(
							$author$project$Elm$Review$AstCodec$cyclic$recordSetter())),
					A3(
						$author$project$Elm$Review$Vendor$Serialize$variant1,
						$stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccessFunction,
						$author$project$Elm$Review$Vendor$Serialize$string,
						A4(
							$author$project$Elm$Review$Vendor$Serialize$variant2,
							$stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess,
							$author$project$Elm$Review$AstCodec$node(
								$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
							$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
							A3(
								$author$project$Elm$Review$Vendor$Serialize$variant1,
								$stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression,
								$author$project$Elm$Review$AstCodec$cyclic$lambda(),
								A3(
									$author$project$Elm$Review$Vendor$Serialize$variant1,
									$stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression,
									$author$project$Elm$Review$AstCodec$cyclic$caseBlock(),
									A3(
										$author$project$Elm$Review$Vendor$Serialize$variant1,
										$stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression,
										$author$project$Elm$Review$AstCodec$cyclic$letBlock(),
										A3(
											$author$project$Elm$Review$Vendor$Serialize$variant1,
											$stil4m$elm_syntax$Elm$Syntax$Expression$CharLiteral,
											$author$project$Elm$Review$AstCodec$char,
											A3(
												$author$project$Elm$Review$Vendor$Serialize$variant1,
												$stil4m$elm_syntax$Elm$Syntax$Expression$Negation,
												$author$project$Elm$Review$AstCodec$node(
													$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
												A3(
													$author$project$Elm$Review$Vendor$Serialize$variant1,
													$stil4m$elm_syntax$Elm$Syntax$Expression$Hex,
													$author$project$Elm$Review$Vendor$Serialize$int,
													A3(
														$author$project$Elm$Review$Vendor$Serialize$variant1,
														$stil4m$elm_syntax$Elm$Syntax$Expression$PrefixOperator,
														$author$project$Elm$Review$Vendor$Serialize$string,
														A5(
															$author$project$Elm$Review$Vendor$Serialize$variant3,
															$stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock,
															$author$project$Elm$Review$AstCodec$node(
																$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
															$author$project$Elm$Review$AstCodec$node(
																$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
															$author$project$Elm$Review$AstCodec$node(
																$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
															A2(
																$author$project$Elm$Review$Vendor$Serialize$variant0,
																$stil4m$elm_syntax$Elm$Syntax$Expression$UnitExpr,
																A3(
																	$author$project$Elm$Review$Vendor$Serialize$variant1,
																	$stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr,
																	$author$project$Elm$Review$Vendor$Serialize$list(
																		$author$project$Elm$Review$AstCodec$node(
																			$author$project$Elm$Review$AstCodec$cyclic$lazyExpression())),
																	A3(
																		$author$project$Elm$Review$Vendor$Serialize$variant1,
																		$stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr,
																		$author$project$Elm$Review$Vendor$Serialize$list(
																			$author$project$Elm$Review$AstCodec$node(
																				$author$project$Elm$Review$AstCodec$cyclic$recordSetter())),
																		A3(
																			$author$project$Elm$Review$Vendor$Serialize$variant1,
																			$stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression,
																			$author$project$Elm$Review$AstCodec$node(
																				$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
																			A3(
																				$author$project$Elm$Review$Vendor$Serialize$variant1,
																				$stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression,
																				$author$project$Elm$Review$Vendor$Serialize$list(
																					$author$project$Elm$Review$AstCodec$node(
																						$author$project$Elm$Review$AstCodec$cyclic$lazyExpression())),
																				A3(
																					$author$project$Elm$Review$Vendor$Serialize$variant1,
																					$stil4m$elm_syntax$Elm$Syntax$Expression$Literal,
																					$author$project$Elm$Review$Vendor$Serialize$string,
																					A3(
																						$author$project$Elm$Review$Vendor$Serialize$variant1,
																						$stil4m$elm_syntax$Elm$Syntax$Expression$Floatable,
																						$author$project$Elm$Review$Vendor$Serialize$float,
																						A3(
																							$author$project$Elm$Review$Vendor$Serialize$variant1,
																							$stil4m$elm_syntax$Elm$Syntax$Expression$Integer,
																							$author$project$Elm$Review$Vendor$Serialize$int,
																							A4(
																								$author$project$Elm$Review$Vendor$Serialize$variant2,
																								$stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue,
																								$author$project$Elm$Review$Vendor$Serialize$list($author$project$Elm$Review$Vendor$Serialize$string),
																								$author$project$Elm$Review$Vendor$Serialize$string,
																								A6(
																									$author$project$Elm$Review$Vendor$Serialize$variant4,
																									$stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication,
																									$author$project$Elm$Review$Vendor$Serialize$string,
																									$author$project$Elm$Review$AstCodec$infixDirection,
																									$author$project$Elm$Review$AstCodec$node(
																										$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
																									$author$project$Elm$Review$AstCodec$node(
																										$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
																									A3(
																										$author$project$Elm$Review$Vendor$Serialize$variant1,
																										$stil4m$elm_syntax$Elm$Syntax$Expression$Application,
																										$author$project$Elm$Review$Vendor$Serialize$list(
																											$author$project$Elm$Review$AstCodec$node(
																												$author$project$Elm$Review$AstCodec$cyclic$lazyExpression())),
																										$author$project$Elm$Review$Vendor$Serialize$customType(
																											function (application) {
																												return function (operatorApplication) {
																													return function (functionOrValue) {
																														return function (integer) {
																															return function (floatable) {
																																return function (literal) {
																																	return function (tuple) {
																																		return function (parenthesized) {
																																			return function (record) {
																																				return function (listExpr) {
																																					return function (unit) {
																																						return function (ifBlock) {
																																							return function (prefixOperator) {
																																								return function (hex) {
																																									return function (negation) {
																																										return function (charExpr) {
																																											return function (letExpr) {
																																												return function (caseExpr) {
																																													return function (lambdaExpr) {
																																														return function (recordAccess) {
																																															return function (recordAccessFunction) {
																																																return function (recordUpdateExpr) {
																																																	return function (glsl) {
																																																		return function (operator) {
																																																			return function (value) {
																																																				switch (value.$) {
																																																					case 1:
																																																						var a = value.a;
																																																						return application(a);
																																																					case 2:
																																																						var a = value.a;
																																																						var b = value.b;
																																																						var c = value.c;
																																																						var d = value.d;
																																																						return A4(operatorApplication, a, b, c, d);
																																																					case 3:
																																																						var a = value.a;
																																																						var b = value.b;
																																																						return A2(functionOrValue, a, b);
																																																					case 7:
																																																						var a = value.a;
																																																						return integer(a);
																																																					case 9:
																																																						var a = value.a;
																																																						return floatable(a);
																																																					case 11:
																																																						var a = value.a;
																																																						return literal(a);
																																																					case 13:
																																																						var a = value.a;
																																																						return tuple(a);
																																																					case 14:
																																																						var a = value.a;
																																																						return parenthesized(a);
																																																					case 18:
																																																						var a = value.a;
																																																						return record(a);
																																																					case 19:
																																																						var a = value.a;
																																																						return listExpr(a);
																																																					case 0:
																																																						return unit;
																																																					case 5:
																																																						var a = value.a;
																																																						return prefixOperator(a);
																																																					case 8:
																																																						var a = value.a;
																																																						return hex(a);
																																																					case 10:
																																																						var a = value.a;
																																																						return negation(a);
																																																					case 12:
																																																						var a = value.a;
																																																						return charExpr(a);
																																																					case 15:
																																																						var a = value.a;
																																																						return letExpr(a);
																																																					case 16:
																																																						var a = value.a;
																																																						return caseExpr(a);
																																																					case 17:
																																																						var a = value.a;
																																																						return lambdaExpr(a);
																																																					case 4:
																																																						var a = value.a;
																																																						var b = value.b;
																																																						var c = value.c;
																																																						return A3(ifBlock, a, b, c);
																																																					case 20:
																																																						var a = value.a;
																																																						var b = value.b;
																																																						return A2(recordAccess, a, b);
																																																					case 21:
																																																						var a = value.a;
																																																						return recordAccessFunction(a);
																																																					case 22:
																																																						var a = value.a;
																																																						var b = value.b;
																																																						return A2(recordUpdateExpr, a, b);
																																																					case 23:
																																																						var a = value.a;
																																																						return glsl(a);
																																																					default:
																																																						var a = value.a;
																																																						return operator(a);
																																																				}
																																																			};
																																																		};
																																																	};
																																																};
																																															};
																																														};
																																													};
																																												};
																																											};
																																										};
																																									};
																																								};
																																							};
																																						};
																																					};
																																				};
																																			};
																																		};
																																	};
																																};
																															};
																														};
																													};
																												};
																											}))))))))))))))))))))))))));
}
function $author$project$Elm$Review$AstCodec$cyclic$caseBlock() {
	return $author$project$Elm$Review$Vendor$Serialize$finishRecord(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.gE;
			},
			$author$project$Elm$Review$Vendor$Serialize$list(
				A2(
					$author$project$Elm$Review$Vendor$Serialize$tuple,
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$pattern),
					$author$project$Elm$Review$AstCodec$node(
						$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()))),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.dm;
				},
				$author$project$Elm$Review$AstCodec$node(
					$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
				$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Expression$CaseBlock))));
}
function $author$project$Elm$Review$AstCodec$cyclic$letBlock() {
	return $author$project$Elm$Review$Vendor$Serialize$finishRecord(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.dm;
			},
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.e4;
				},
				$author$project$Elm$Review$Vendor$Serialize$list(
					$author$project$Elm$Review$AstCodec$node(
						$author$project$Elm$Review$AstCodec$cyclic$letDeclaration())),
				$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Expression$LetBlock))));
}
function $author$project$Elm$Review$AstCodec$cyclic$letDeclaration() {
	return $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
		A4(
			$author$project$Elm$Review$Vendor$Serialize$variant2,
			$stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring,
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$pattern),
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$variant1,
				$stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction,
				$author$project$Elm$Review$AstCodec$cyclic$function(),
				$author$project$Elm$Review$Vendor$Serialize$customType(
					F3(
						function (e0, e1, value) {
							if (!value.$) {
								var a = value.a;
								return e0(a);
							} else {
								var a = value.a;
								var b = value.b;
								return A2(e1, a, b);
							}
						})))));
}
function $author$project$Elm$Review$AstCodec$cyclic$function() {
	return $author$project$Elm$Review$Vendor$Serialize$finishRecord(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.gM;
			},
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$AstCodec$cyclic$functionImplementation()),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.hJ;
				},
				$author$project$Elm$Review$Vendor$Serialize$maybe(
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$signature)),
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					function ($) {
						return $.ed;
					},
					$author$project$Elm$Review$Vendor$Serialize$maybe(
						$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
					$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Expression$Function)))));
}
function $author$project$Elm$Review$AstCodec$cyclic$functionImplementation() {
	return $author$project$Elm$Review$Vendor$Serialize$finishRecord(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.dm;
			},
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.eY;
				},
				$author$project$Elm$Review$Vendor$Serialize$list(
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$pattern)),
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					function ($) {
						return $.bV;
					},
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
					$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionImplementation)))));
}
function $author$project$Elm$Review$AstCodec$cyclic$lambda() {
	return $author$project$Elm$Review$Vendor$Serialize$finishRecord(
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.dm;
			},
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.gt;
				},
				$author$project$Elm$Review$Vendor$Serialize$list(
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$pattern)),
				$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Expression$Lambda))));
}
function $author$project$Elm$Review$AstCodec$cyclic$recordSetter() {
	return A2(
		$author$project$Elm$Review$Vendor$Serialize$tuple,
		$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
		$author$project$Elm$Review$AstCodec$node(
			$author$project$Elm$Review$AstCodec$cyclic$lazyExpression()));
}
function $author$project$Elm$Review$AstCodec$cyclic$lazyExpression() {
	return $author$project$Elm$Review$Vendor$Serialize$lazy(
		function (_v0) {
			return $author$project$Elm$Review$AstCodec$cyclic$expression();
		});
}
var $author$project$Elm$Review$AstCodec$expression = $author$project$Elm$Review$AstCodec$cyclic$expression();
$author$project$Elm$Review$AstCodec$cyclic$expression = function () {
	return $author$project$Elm$Review$AstCodec$expression;
};
var $author$project$Elm$Review$AstCodec$caseBlock = $author$project$Elm$Review$AstCodec$cyclic$caseBlock();
$author$project$Elm$Review$AstCodec$cyclic$caseBlock = function () {
	return $author$project$Elm$Review$AstCodec$caseBlock;
};
var $author$project$Elm$Review$AstCodec$letBlock = $author$project$Elm$Review$AstCodec$cyclic$letBlock();
$author$project$Elm$Review$AstCodec$cyclic$letBlock = function () {
	return $author$project$Elm$Review$AstCodec$letBlock;
};
var $author$project$Elm$Review$AstCodec$letDeclaration = $author$project$Elm$Review$AstCodec$cyclic$letDeclaration();
$author$project$Elm$Review$AstCodec$cyclic$letDeclaration = function () {
	return $author$project$Elm$Review$AstCodec$letDeclaration;
};
var $author$project$Elm$Review$AstCodec$function = $author$project$Elm$Review$AstCodec$cyclic$function();
$author$project$Elm$Review$AstCodec$cyclic$function = function () {
	return $author$project$Elm$Review$AstCodec$function;
};
var $author$project$Elm$Review$AstCodec$functionImplementation = $author$project$Elm$Review$AstCodec$cyclic$functionImplementation();
$author$project$Elm$Review$AstCodec$cyclic$functionImplementation = function () {
	return $author$project$Elm$Review$AstCodec$functionImplementation;
};
var $author$project$Elm$Review$AstCodec$lambda = $author$project$Elm$Review$AstCodec$cyclic$lambda();
$author$project$Elm$Review$AstCodec$cyclic$lambda = function () {
	return $author$project$Elm$Review$AstCodec$lambda;
};
var $author$project$Elm$Review$AstCodec$recordSetter = $author$project$Elm$Review$AstCodec$cyclic$recordSetter();
$author$project$Elm$Review$AstCodec$cyclic$recordSetter = function () {
	return $author$project$Elm$Review$AstCodec$recordSetter;
};
var $author$project$Elm$Review$AstCodec$lazyExpression = $author$project$Elm$Review$AstCodec$cyclic$lazyExpression();
$author$project$Elm$Review$AstCodec$cyclic$lazyExpression = function () {
	return $author$project$Elm$Review$AstCodec$lazyExpression;
};
var $stil4m$elm_syntax$Elm$Syntax$Infix$Infix = F4(
	function (direction, precedence, operator, _function) {
		return {gP: direction, g2: _function, hu: operator, hz: precedence};
	});
var $author$project$Elm$Review$AstCodec$infix_ = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.g2;
		},
		$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.hu;
			},
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.hz;
				},
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$int),
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					function ($) {
						return $.gP;
					},
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$infixDirection),
					$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Infix$Infix))))));
var $stil4m$elm_syntax$Elm$Syntax$TypeAlias$TypeAlias = F4(
	function (documentation, name, generics, typeAnnotation) {
		return {ed: documentation, fo: generics, bV: name, gk: typeAnnotation};
	});
var $author$project$Elm$Review$AstCodec$typeAlias = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.gk;
		},
		$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$typeAnnotation),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.fo;
			},
			$author$project$Elm$Review$Vendor$Serialize$list(
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.bV;
				},
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					function ($) {
						return $.ed;
					},
					$author$project$Elm$Review$Vendor$Serialize$maybe(
						$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
					$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$TypeAlias$TypeAlias))))));
var $stil4m$elm_syntax$Elm$Syntax$Type$Type = F4(
	function (documentation, name, generics, constructors) {
		return {gK: constructors, ed: documentation, fo: generics, bV: name};
	});
var $stil4m$elm_syntax$Elm$Syntax$Type$ValueConstructor = F2(
	function (name, _arguments) {
		return {eY: _arguments, bV: name};
	});
var $author$project$Elm$Review$AstCodec$valueConstructor = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.eY;
		},
		$author$project$Elm$Review$Vendor$Serialize$list(
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$typeAnnotation)),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.bV;
			},
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
			$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Type$ValueConstructor))));
var $author$project$Elm$Review$AstCodec$type_ = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.gK;
		},
		$author$project$Elm$Review$Vendor$Serialize$list(
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$valueConstructor)),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.fo;
			},
			$author$project$Elm$Review$Vendor$Serialize$list(
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.bV;
				},
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string),
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					function ($) {
						return $.ed;
					},
					$author$project$Elm$Review$Vendor$Serialize$maybe(
						$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
					$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Type$Type))))));
var $author$project$Elm$Review$AstCodec$declaration = $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
	A4(
		$author$project$Elm$Review$Vendor$Serialize$variant2,
		$stil4m$elm_syntax$Elm$Syntax$Declaration$Destructuring,
		$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$pattern),
		$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$expression),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$variant1,
			$stil4m$elm_syntax$Elm$Syntax$Declaration$InfixDeclaration,
			$author$project$Elm$Review$AstCodec$infix_,
			A3(
				$author$project$Elm$Review$Vendor$Serialize$variant1,
				$stil4m$elm_syntax$Elm$Syntax$Declaration$PortDeclaration,
				$author$project$Elm$Review$AstCodec$signature,
				A3(
					$author$project$Elm$Review$Vendor$Serialize$variant1,
					$stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration,
					$author$project$Elm$Review$AstCodec$type_,
					A3(
						$author$project$Elm$Review$Vendor$Serialize$variant1,
						$stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration,
						$author$project$Elm$Review$AstCodec$typeAlias,
						A3(
							$author$project$Elm$Review$Vendor$Serialize$variant1,
							$stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration,
							$author$project$Elm$Review$AstCodec$function,
							$author$project$Elm$Review$Vendor$Serialize$customType(
								F7(
									function (e0, e1, e2, e3, e4, e5, value) {
										switch (value.$) {
											case 0:
												var a = value.a;
												return e0(a);
											case 1:
												var a = value.a;
												return e1(a);
											case 2:
												var a = value.a;
												return e2(a);
											case 3:
												var a = value.a;
												return e3(a);
											case 4:
												var a = value.a;
												return e4(a);
											default:
												var a = value.a;
												var b = value.b;
												return A2(e5, a, b);
										}
									})))))))));
var $stil4m$elm_syntax$Elm$Syntax$Import$Import = F3(
	function (moduleName, moduleAlias, exposingList) {
		return {ef: exposingList, hh: moduleAlias, dE: moduleName};
	});
var $author$project$Elm$Review$AstCodec$range = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.b9;
			},
			function ($) {
				return $.a6;
			}),
		$author$project$Elm$Review$Vendor$Serialize$int,
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b9;
				},
				function ($) {
					return $.bp;
				}),
			$author$project$Elm$Review$Vendor$Serialize$int,
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.cB;
					},
					function ($) {
						return $.a6;
					}),
				$author$project$Elm$Review$Vendor$Serialize$int,
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.cB;
						},
						function ($) {
							return $.bp;
						}),
					$author$project$Elm$Review$Vendor$Serialize$int,
					$author$project$Elm$Review$Vendor$Serialize$record(
						F4(
							function (startRow, startColumn, endRow, endColumn) {
								return {
									b9: {a6: endColumn, bp: endRow},
									cB: {a6: startColumn, bp: startRow}
								};
							})))))));
var $stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType = F2(
	function (name, open) {
		return {bV: name, ht: open};
	});
var $author$project$Elm$Review$AstCodec$exposedType = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.ht;
		},
		$author$project$Elm$Review$Vendor$Serialize$maybe($author$project$Elm$Review$AstCodec$range),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.bV;
			},
			$author$project$Elm$Review$Vendor$Serialize$string,
			$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType))));
var $author$project$Elm$Review$AstCodec$topLevelExpose = $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$variant1,
		$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose,
		$author$project$Elm$Review$AstCodec$exposedType,
		A3(
			$author$project$Elm$Review$Vendor$Serialize$variant1,
			$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose,
			$author$project$Elm$Review$Vendor$Serialize$string,
			A3(
				$author$project$Elm$Review$Vendor$Serialize$variant1,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose,
				$author$project$Elm$Review$Vendor$Serialize$string,
				A3(
					$author$project$Elm$Review$Vendor$Serialize$variant1,
					$stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose,
					$author$project$Elm$Review$Vendor$Serialize$string,
					$author$project$Elm$Review$Vendor$Serialize$customType(
						F5(
							function (e0, e1, e2, e3, value) {
								switch (value.$) {
									case 0:
										var a = value.a;
										return e0(a);
									case 1:
										var a = value.a;
										return e1(a);
									case 2:
										var a = value.a;
										return e2(a);
									default:
										var a = value.a;
										return e3(a);
								}
							})))))));
var $author$project$Elm$Review$AstCodec$exposing_ = $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$variant1,
		$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit,
		$author$project$Elm$Review$Vendor$Serialize$list(
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$topLevelExpose)),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$variant1,
			$stil4m$elm_syntax$Elm$Syntax$Exposing$All,
			$author$project$Elm$Review$AstCodec$range,
			$author$project$Elm$Review$Vendor$Serialize$customType(
				F3(
					function (e0, e1, value) {
						if (!value.$) {
							var a = value.a;
							return e0(a);
						} else {
							var a = value.a;
							return e1(a);
						}
					})))));
var $author$project$Elm$Review$AstCodec$import_ = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.ef;
		},
		$author$project$Elm$Review$Vendor$Serialize$maybe(
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$exposing_)),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.hh;
			},
			$author$project$Elm$Review$Vendor$Serialize$maybe(
				$author$project$Elm$Review$AstCodec$node(
					$author$project$Elm$Review$Vendor$Serialize$list($author$project$Elm$Review$Vendor$Serialize$string))),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.dE;
				},
				$author$project$Elm$Review$AstCodec$node(
					$author$project$Elm$Review$Vendor$Serialize$list($author$project$Elm$Review$Vendor$Serialize$string)),
				$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Import$Import)))));
var $stil4m$elm_syntax$Elm$Syntax$Module$DefaultModuleData = F2(
	function (moduleName, exposingList) {
		return {ef: exposingList, dE: moduleName};
	});
var $author$project$Elm$Review$AstCodec$defaultModuleData = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.ef;
		},
		$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$exposing_),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.dE;
			},
			$author$project$Elm$Review$AstCodec$node(
				$author$project$Elm$Review$Vendor$Serialize$list($author$project$Elm$Review$Vendor$Serialize$string)),
			$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Module$DefaultModuleData))));
var $stil4m$elm_syntax$Elm$Syntax$Module$EffectModuleData = F4(
	function (moduleName, exposingList, command, subscription) {
		return {gH: command, ef: exposingList, dE: moduleName, hO: subscription};
	});
var $author$project$Elm$Review$AstCodec$effectModuleData = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.hO;
		},
		$author$project$Elm$Review$Vendor$Serialize$maybe(
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.gH;
			},
			$author$project$Elm$Review$Vendor$Serialize$maybe(
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.ef;
				},
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$exposing_),
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					function ($) {
						return $.dE;
					},
					$author$project$Elm$Review$AstCodec$node(
						$author$project$Elm$Review$Vendor$Serialize$list($author$project$Elm$Review$Vendor$Serialize$string)),
					$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$Module$EffectModuleData))))));
var $author$project$Elm$Review$AstCodec$module_ = $author$project$Elm$Review$Vendor$Serialize$finishCustomType(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$variant1,
		$stil4m$elm_syntax$Elm$Syntax$Module$EffectModule,
		$author$project$Elm$Review$AstCodec$effectModuleData,
		A3(
			$author$project$Elm$Review$Vendor$Serialize$variant1,
			$stil4m$elm_syntax$Elm$Syntax$Module$PortModule,
			$author$project$Elm$Review$AstCodec$defaultModuleData,
			A3(
				$author$project$Elm$Review$Vendor$Serialize$variant1,
				$stil4m$elm_syntax$Elm$Syntax$Module$NormalModule,
				$author$project$Elm$Review$AstCodec$defaultModuleData,
				$author$project$Elm$Review$Vendor$Serialize$customType(
					F4(
						function (e0, e1, e2, value) {
							switch (value.$) {
								case 0:
									var a = value.a;
									return e0(a);
								case 1:
									var a = value.a;
									return e1(a);
								default:
									var a = value.a;
									return e2(a);
							}
						}))))));
var $author$project$Elm$Review$AstCodec$file = $author$project$Elm$Review$Vendor$Serialize$finishRecord(
	A3(
		$author$project$Elm$Review$Vendor$Serialize$field,
		function ($) {
			return $.gI;
		},
		$author$project$Elm$Review$Vendor$Serialize$list(
			$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$Vendor$Serialize$string)),
		A3(
			$author$project$Elm$Review$Vendor$Serialize$field,
			function ($) {
				return $.e4;
			},
			$author$project$Elm$Review$Vendor$Serialize$list(
				$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$declaration)),
			A3(
				$author$project$Elm$Review$Vendor$Serialize$field,
				function ($) {
					return $.g4;
				},
				$author$project$Elm$Review$Vendor$Serialize$list(
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$import_)),
				A3(
					$author$project$Elm$Review$Vendor$Serialize$field,
					function ($) {
						return $.hi;
					},
					$author$project$Elm$Review$AstCodec$node($author$project$Elm$Review$AstCodec$module_),
					$author$project$Elm$Review$Vendor$Serialize$record($stil4m$elm_syntax$Elm$Syntax$File$File))))));
var $author$project$Elm$Review$AstCodec$encode = function (file_) {
	return A2($author$project$Elm$Review$Vendor$Serialize$encodeToJson, $author$project$Elm$Review$AstCodec$file, file_);
};
var $author$project$Elm$Review$Main$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return $elm$core$Maybe$Just(first);
				} else {
					var $temp$predicate = predicate,
						$temp$list = rest;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Project$ProjectModule$toRecord = function (_v0) {
	var module_ = _v0;
	return module_;
};
var $jfmengels$elm_review$Review$Project$modules = function (_v0) {
	var project = _v0;
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (_v1, mod, acc) {
				return A2(
					$elm$core$List$cons,
					$jfmengels$elm_review$Review$Project$ProjectModule$toRecord(mod),
					acc);
			}),
		_List_Nil,
		project.av);
};
var $author$project$Elm$Review$Main$cacheFileRequest = F2(
	function (project, source) {
		var _v0 = A2(
			$author$project$Elm$Review$Main$find,
			function (module_) {
				return _Utils_eq(module_.hK, source);
			},
			$jfmengels$elm_review$Review$Project$modules(project));
		if (!_v0.$) {
			var ast = _v0.a.gv;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'source',
						$elm$json$Json$Encode$string(source)),
						_Utils_Tuple2(
						'ast',
						$author$project$Elm$Review$AstCodec$encode(ast))
					]));
		} else {
			return $elm$json$Json$Encode$null;
		}
	});
var $author$project$Elm$Review$Main$Accepted = function (a) {
	return {$: 0, a: a};
};
var $author$project$Elm$Review$Main$Refused = {$: 1};
var $author$project$Elm$Review$Vendor$Serialize$SerializerOutOfDate = {$: 2};
var $author$project$Elm$Review$Vendor$Serialize$decodeFromJson = F2(
	function (codec, json) {
		var decoder = A2(
			$elm$json$Json$Decode$andThen,
			function (value) {
				return (value <= 0) ? $elm$json$Json$Decode$succeed(
					$elm$core$Result$Err($author$project$Elm$Review$Vendor$Serialize$DataCorrupted)) : (_Utils_eq(value, $author$project$Elm$Review$Vendor$Serialize$version) ? A2(
					$elm$json$Json$Decode$index,
					1,
					$author$project$Elm$Review$Vendor$Serialize$getJsonDecoder(codec)) : $elm$json$Json$Decode$succeed(
					$elm$core$Result$Err($author$project$Elm$Review$Vendor$Serialize$SerializerOutOfDate)));
			},
			A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int));
		var _v0 = A2($elm$json$Json$Decode$decodeValue, decoder, json);
		if (!_v0.$) {
			var value = _v0.a;
			return value;
		} else {
			return $elm$core$Result$Err($author$project$Elm$Review$Vendor$Serialize$DataCorrupted);
		}
	});
var $author$project$Elm$Review$AstCodec$decode = A2(
	$elm$json$Json$Decode$andThen,
	function (data) {
		var _v0 = A2($author$project$Elm$Review$Vendor$Serialize$decodeFromJson, $author$project$Elm$Review$AstCodec$file, data);
		if (!_v0.$) {
			var res = _v0.a;
			return $elm$json$Json$Decode$succeed(res);
		} else {
			return $elm$json$Json$Decode$fail('Not a valid file');
		}
	},
	$elm$json$Json$Decode$value);
var $author$project$Elm$Review$File$decode = A4(
	$elm$json$Json$Decode$map3,
	F3(
		function (path, source, ast) {
			return {gv: ast, hw: path, hK: source};
		}),
	A2($elm$json$Json$Decode$field, 'path', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'source', $elm$json$Json$Decode$string),
	$elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$json$Json$Decode$field,
				'ast',
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $author$project$Elm$Review$AstCodec$decode)),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			])));
var $jfmengels$elm_review$Review$Project$Dependency$Dependency = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Project$Dependency$create = F3(
	function (name_, elmJson_, modules_) {
		return {ba: elmJson_, av: modules_, bV: name_};
	});
var $elm$project_metadata_utils$Elm$Docs$Module = F6(
	function (name, comment, unions, aliases, values, binops) {
		return {eV: aliases, e$: binops, b5: comment, bV: name, gl: unions, gm: values};
	});
var $elm$project_metadata_utils$Elm$Docs$Alias = F4(
	function (name, comment, args, tipe) {
		return {gt: args, b5: comment, bV: name, eT: tipe};
	});
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {da: col, eF: problem, bp: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.bp, p.da, p.eF);
};
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 0:
					return list;
				case 1:
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0;
		var _v1 = parse(
			{da: 1, k: _List_Nil, o: 1, e: 0, bp: 1, d: src});
		if (!_v1.$) {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (!_v0.$) {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $elm$parser$Parser$Done = function (a) {
	return {$: 1, a: a};
};
var $elm$parser$Parser$Forbidden = 0;
var $elm$project_metadata_utils$Elm$Type$Lambda = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Loop = function (a) {
	return {$: 0, a: a};
};
var $elm$project_metadata_utils$Elm$Type$Record = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $elm$project_metadata_utils$Elm$Type$Type = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$project_metadata_utils$Elm$Type$Var = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = $elm$core$Basics$identity;
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0;
		return function (s0) {
			var _v1 = parseA(s0);
			if (_v1.$ === 1) {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p1 = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				var _v2 = callback(a);
				var parseB = _v2;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var p2 = _v3.a;
					var x = _v3.b;
					return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
				} else {
					var p2 = _v3.a;
					var b = _v3.b;
					var s2 = _v3.c;
					return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
				}
			}
		};
	});
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {da: col, gL: contextStack, eF: problem, bp: row};
	});
var $elm$parser$Parser$Advanced$Empty = {$: 0};
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.bp, s.da, x, s.k));
	});
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.e, s.bp, s.da, s.d);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return _Utils_eq(newOffset, -1) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
			$elm$parser$Parser$Advanced$Good,
			progress,
			0,
			{da: newCol, k: s.k, o: s.o, e: newOffset, bp: newRow, d: s.d});
	};
};
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $elm$project_metadata_utils$Elm$Type$arrow = $elm$parser$Parser$symbol('->');
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0;
	return function (s0) {
		var _v1 = parse(s0);
		if (_v1.$ === 1) {
			var x = _v1.b;
			return A2($elm$parser$Parser$Advanced$Bad, false, x);
		} else {
			var a = _v1.b;
			var s1 = _v1.c;
			return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
		}
	};
};
var $elm$parser$Parser$backtrackable = $elm$parser$Parser$Advanced$backtrackable;
var $elm$project_metadata_utils$Elm$Type$comma = $elm$parser$Parser$symbol(',');
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0;
		var parseB = _v1;
		return function (s0) {
			var _v2 = parseA(s0);
			if (_v2.$ === 1) {
				var p = _v2.a;
				var x = _v2.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p1 = _v2.a;
				var a = _v2.b;
				var s1 = _v2.c;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var p2 = _v3.a;
					var x = _v3.b;
					return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
				} else {
					var p2 = _v3.a;
					var b = _v3.b;
					var s2 = _v3.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p1 || p2,
						A2(func, a, b),
						s2);
				}
			}
		};
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $elm$project_metadata_utils$Elm$Type$isInnerVarChar = function (_char) {
	return $elm$core$Char$isAlphaNum(_char) || (_char === '_');
};
var $elm$parser$Parser$ExpectingVariable = {$: 7};
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$varHelp = F7(
	function (isGood, offset, row, col, src, indent, context) {
		varHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, src);
			if (_Utils_eq(newOffset, -1)) {
				return {da: col, k: context, o: indent, e: offset, bp: row, d: src};
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$src = src,
						$temp$indent = indent,
						$temp$context = context;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					context = $temp$context;
					continue varHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$src = src,
						$temp$indent = indent,
						$temp$context = context;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					context = $temp$context;
					continue varHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$variable = function (i) {
	return function (s) {
		var firstOffset = A3($elm$parser$Parser$Advanced$isSubChar, i.cB, s.e, s.d);
		if (_Utils_eq(firstOffset, -1)) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, i.fg));
		} else {
			var s1 = _Utils_eq(firstOffset, -2) ? A7($elm$parser$Parser$Advanced$varHelp, i.fw, s.e + 1, s.bp + 1, 1, s.d, s.o, s.k) : A7($elm$parser$Parser$Advanced$varHelp, i.fw, firstOffset, s.bp, s.da + 1, s.d, s.o, s.k);
			var name = A3($elm$core$String$slice, s.e, s1.e, s.d);
			return A2($elm$core$Set$member, name, i.f_) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, i.fg)) : A3($elm$parser$Parser$Advanced$Good, true, name, s1);
		}
	};
};
var $elm$parser$Parser$variable = function (i) {
	return $elm$parser$Parser$Advanced$variable(
		{fg: $elm$parser$Parser$ExpectingVariable, fw: i.fw, f_: i.f_, cB: i.cB});
};
var $elm$project_metadata_utils$Elm$Type$var = function (isFirst) {
	return $elm$parser$Parser$variable(
		{fw: $elm$project_metadata_utils$Elm$Type$isInnerVarChar, f_: $elm$core$Set$empty, cB: isFirst});
};
var $elm$project_metadata_utils$Elm$Type$lowVar = $elm$project_metadata_utils$Elm$Type$var($elm$core$Char$isLower);
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (!_v1.$) {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return function (s) {
		return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
	};
};
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.d);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.e, offset) < 0,
					0,
					{da: col, k: s0.k, o: s0.o, e: offset, bp: row, d: s0.d});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return function (s) {
		return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.e, s.bp, s.da, s);
	};
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$project_metadata_utils$Elm$Type$spaces = $elm$parser$Parser$chompWhile(
	function (_char) {
		return _char === ' ';
	});
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, a, s);
	};
};
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $elm$project_metadata_utils$Elm$Type$extension = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$keeper,
			$elm$parser$Parser$succeed($elm$core$Maybe$Just),
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$backtrackable($elm$project_metadata_utils$Elm$Type$lowVar),
						$elm$parser$Parser$backtrackable($elm$project_metadata_utils$Elm$Type$spaces)),
					$elm$parser$Parser$symbol('|')),
				$elm$project_metadata_utils$Elm$Type$spaces)),
			$elm$parser$Parser$succeed($elm$core$Maybe$Nothing)
		]));
var $elm$parser$Parser$Advanced$lazy = function (thunk) {
	return function (s) {
		var _v0 = thunk(0);
		var parse = _v0;
		return parse(s);
	};
};
var $elm$parser$Parser$lazy = $elm$parser$Parser$Advanced$lazy;
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0;
			var _v1 = parse(s0);
			if (!_v1.$) {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (!step.$) {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return function (s) {
			return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
		};
	});
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (!_v1.$) {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					func(a),
					s1);
			} else {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			}
		};
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 1, a: a};
};
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (!step.$) {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $elm$project_metadata_utils$Elm$Type$capVar = $elm$project_metadata_utils$Elm$Type$var($elm$core$Char$isUpper);
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 1) {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					A2(
						func,
						A3($elm$core$String$slice, s0.e, s1.e, s0.d),
						a),
					s1);
			}
		};
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $elm$project_metadata_utils$Elm$Type$qualifiedCapVarHelp = function (_v0) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						$elm$parser$Parser$Loop(0)),
					$elm$parser$Parser$symbol('.')),
				$elm$project_metadata_utils$Elm$Type$capVar),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(0))
			]));
};
var $elm$project_metadata_utils$Elm$Type$qualifiedCapVar = $elm$parser$Parser$getChompedString(
	A2(
		$elm$parser$Parser$ignorer,
		$elm$project_metadata_utils$Elm$Type$capVar,
		A2($elm$parser$Parser$loop, 0, $elm$project_metadata_utils$Elm$Type$qualifiedCapVarHelp)));
var $elm$parser$Parser$Advanced$revAlways = F2(
	function (_v0, b) {
		return b;
	});
var $elm$parser$Parser$Advanced$skip = F2(
	function (iParser, kParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$parser$Parser$Advanced$revAlways, iParser, kParser);
	});
var $elm$parser$Parser$Advanced$sequenceEndForbidden = F5(
	function (ender, ws, parseItem, sep, revItems) {
		var chompRest = function (item) {
			return A5(
				$elm$parser$Parser$Advanced$sequenceEndForbidden,
				ender,
				ws,
				parseItem,
				sep,
				A2($elm$core$List$cons, item, revItems));
		};
		return A2(
			$elm$parser$Parser$Advanced$skip,
			ws,
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$Advanced$skip,
						sep,
						A2(
							$elm$parser$Parser$Advanced$skip,
							ws,
							A2(
								$elm$parser$Parser$Advanced$map,
								function (item) {
									return $elm$parser$Parser$Advanced$Loop(
										A2($elm$core$List$cons, item, revItems));
								},
								parseItem))),
						A2(
						$elm$parser$Parser$Advanced$map,
						function (_v0) {
							return $elm$parser$Parser$Advanced$Done(
								$elm$core$List$reverse(revItems));
						},
						ender)
					])));
	});
var $elm$parser$Parser$Advanced$sequenceEndMandatory = F4(
	function (ws, parseItem, sep, revItems) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$map,
					function (item) {
						return $elm$parser$Parser$Advanced$Loop(
							A2($elm$core$List$cons, item, revItems));
					},
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						parseItem,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							ws,
							A2($elm$parser$Parser$Advanced$ignorer, sep, ws)))),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(revItems));
					},
					$elm$parser$Parser$Advanced$succeed(0))
				]));
	});
var $elm$parser$Parser$Advanced$sequenceEndOptional = F5(
	function (ender, ws, parseItem, sep, revItems) {
		var parseEnd = A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $elm$parser$Parser$Advanced$Done(
					$elm$core$List$reverse(revItems));
			},
			ender);
		return A2(
			$elm$parser$Parser$Advanced$skip,
			ws,
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$Advanced$skip,
						sep,
						A2(
							$elm$parser$Parser$Advanced$skip,
							ws,
							$elm$parser$Parser$Advanced$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$Advanced$map,
										function (item) {
											return $elm$parser$Parser$Advanced$Loop(
												A2($elm$core$List$cons, item, revItems));
										},
										parseItem),
										parseEnd
									])))),
						parseEnd
					])));
	});
var $elm$parser$Parser$Advanced$sequenceEnd = F5(
	function (ender, ws, parseItem, sep, trailing) {
		var chompRest = function (item) {
			switch (trailing) {
				case 0:
					return A2(
						$elm$parser$Parser$Advanced$loop,
						_List_fromArray(
							[item]),
						A4($elm$parser$Parser$Advanced$sequenceEndForbidden, ender, ws, parseItem, sep));
				case 1:
					return A2(
						$elm$parser$Parser$Advanced$loop,
						_List_fromArray(
							[item]),
						A4($elm$parser$Parser$Advanced$sequenceEndOptional, ender, ws, parseItem, sep));
				default:
					return A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$skip,
							ws,
							A2(
								$elm$parser$Parser$Advanced$skip,
								sep,
								A2(
									$elm$parser$Parser$Advanced$skip,
									ws,
									A2(
										$elm$parser$Parser$Advanced$loop,
										_List_fromArray(
											[item]),
										A3($elm$parser$Parser$Advanced$sequenceEndMandatory, ws, parseItem, sep))))),
						ender);
			}
		};
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($elm$parser$Parser$Advanced$andThen, chompRest, parseItem),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return _List_Nil;
					},
					ender)
				]));
	});
var $elm$parser$Parser$Advanced$sequence = function (i) {
	return A2(
		$elm$parser$Parser$Advanced$skip,
		$elm$parser$Parser$Advanced$token(i.cB),
		A2(
			$elm$parser$Parser$Advanced$skip,
			i.f5,
			A5(
				$elm$parser$Parser$Advanced$sequenceEnd,
				$elm$parser$Parser$Advanced$token(i.b9),
				i.f5,
				i.fB,
				$elm$parser$Parser$Advanced$token(i.f3),
				i.gj)));
};
var $elm$parser$Parser$Advanced$Forbidden = 0;
var $elm$parser$Parser$Advanced$Mandatory = 2;
var $elm$parser$Parser$Advanced$Optional = 1;
var $elm$parser$Parser$toAdvancedTrailing = function (trailing) {
	switch (trailing) {
		case 0:
			return 0;
		case 1:
			return 1;
		default:
			return 2;
	}
};
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $elm$parser$Parser$sequence = function (i) {
	return $elm$parser$Parser$Advanced$sequence(
		{
			b9: $elm$parser$Parser$toToken(i.b9),
			fB: i.fB,
			f3: $elm$parser$Parser$toToken(i.f3),
			f5: i.f5,
			cB: $elm$parser$Parser$toToken(i.cB),
			gj: $elm$parser$Parser$toAdvancedTrailing(i.gj)
		});
};
var $elm$project_metadata_utils$Elm$Type$Tuple = function (a) {
	return {$: 2, a: a};
};
var $elm$project_metadata_utils$Elm$Type$tuplize = function (args) {
	if (args.b && (!args.b.b)) {
		var arg = args.a;
		return arg;
	} else {
		return $elm$project_metadata_utils$Elm$Type$Tuple(args);
	}
};
var $elm$project_metadata_utils$Elm$Type$chompArgs = function (revArgs) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (arg) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, arg, revArgs));
				},
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed($elm$core$Basics$identity),
						$elm$parser$Parser$backtrackable($elm$project_metadata_utils$Elm$Type$spaces)),
					$elm$project_metadata_utils$Elm$Type$cyclic$term())),
				A2(
				$elm$parser$Parser$map,
				function (_v2) {
					return $elm$parser$Parser$Done(
						$elm$core$List$reverse(revArgs));
				},
				$elm$parser$Parser$succeed(0))
			]));
};
var $elm$project_metadata_utils$Elm$Type$recordEndHelp = function (revFields) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed(
							function (f) {
								return $elm$parser$Parser$Loop(
									A2($elm$core$List$cons, f, revFields));
							}),
						$elm$project_metadata_utils$Elm$Type$comma),
					$elm$project_metadata_utils$Elm$Type$spaces),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$project_metadata_utils$Elm$Type$cyclic$field(),
					$elm$project_metadata_utils$Elm$Type$spaces)),
				A2(
				$elm$parser$Parser$keeper,
				$elm$parser$Parser$succeed(
					function (_v1) {
						return $elm$parser$Parser$Done(
							$elm$core$List$reverse(revFields));
					}),
				$elm$parser$Parser$symbol('}'))
			]));
};
var $elm$project_metadata_utils$Elm$Type$tipeHelp = function (t) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				$elm$project_metadata_utils$Elm$Type$Lambda(t),
				$elm$project_metadata_utils$Elm$Type$cyclic$arrowAndType()),
				$elm$parser$Parser$succeed(t)
			]));
};
function $elm$project_metadata_utils$Elm$Type$cyclic$arrowAndType() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$backtrackable($elm$project_metadata_utils$Elm$Type$spaces)),
				$elm$project_metadata_utils$Elm$Type$arrow),
			$elm$project_metadata_utils$Elm$Type$spaces),
		$elm$project_metadata_utils$Elm$Type$cyclic$tipe());
}
function $elm$project_metadata_utils$Elm$Type$cyclic$tipeTerm() {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2($elm$parser$Parser$map, $elm$project_metadata_utils$Elm$Type$Var, $elm$project_metadata_utils$Elm$Type$lowVar),
				A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed($elm$project_metadata_utils$Elm$Type$Type),
					$elm$project_metadata_utils$Elm$Type$qualifiedCapVar),
				A2($elm$parser$Parser$loop, _List_Nil, $elm$project_metadata_utils$Elm$Type$chompArgs)),
				$elm$project_metadata_utils$Elm$Type$cyclic$record(),
				$elm$project_metadata_utils$Elm$Type$cyclic$tuple()
			]));
}
function $elm$project_metadata_utils$Elm$Type$cyclic$term() {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2($elm$parser$Parser$map, $elm$project_metadata_utils$Elm$Type$Var, $elm$project_metadata_utils$Elm$Type$lowVar),
				A2(
				$elm$parser$Parser$map,
				function (name) {
					return A2($elm$project_metadata_utils$Elm$Type$Type, name, _List_Nil);
				},
				$elm$project_metadata_utils$Elm$Type$qualifiedCapVar),
				$elm$project_metadata_utils$Elm$Type$cyclic$record(),
				$elm$project_metadata_utils$Elm$Type$cyclic$tuple()
			]));
}
function $elm$project_metadata_utils$Elm$Type$cyclic$record() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						F2(
							function (ext, fs) {
								return A2($elm$project_metadata_utils$Elm$Type$Record, fs, ext);
							})),
					$elm$parser$Parser$symbol('{')),
				$elm$project_metadata_utils$Elm$Type$spaces),
			$elm$project_metadata_utils$Elm$Type$extension),
		$elm$project_metadata_utils$Elm$Type$cyclic$recordEnd());
}
function $elm$project_metadata_utils$Elm$Type$cyclic$recordEnd() {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$andThen,
				function (f) {
					return A2(
						$elm$parser$Parser$loop,
						_List_fromArray(
							[f]),
						$elm$project_metadata_utils$Elm$Type$recordEndHelp);
				},
				A2(
					$elm$parser$Parser$ignorer,
					$elm$project_metadata_utils$Elm$Type$cyclic$field(),
					$elm$project_metadata_utils$Elm$Type$spaces)),
				A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed(_List_Nil),
				$elm$parser$Parser$symbol('}'))
			]));
}
function $elm$project_metadata_utils$Elm$Type$cyclic$field() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			$elm$parser$Parser$succeed($elm$core$Tuple$pair),
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					A2($elm$parser$Parser$ignorer, $elm$project_metadata_utils$Elm$Type$lowVar, $elm$project_metadata_utils$Elm$Type$spaces),
					$elm$parser$Parser$symbol(':')),
				$elm$project_metadata_utils$Elm$Type$spaces)),
		$elm$project_metadata_utils$Elm$Type$cyclic$tipe());
}
function $elm$project_metadata_utils$Elm$Type$cyclic$tuple() {
	return A2(
		$elm$parser$Parser$map,
		$elm$project_metadata_utils$Elm$Type$tuplize,
		$elm$parser$Parser$sequence(
			{
				b9: ')',
				fB: $elm$project_metadata_utils$Elm$Type$cyclic$tipe(),
				f3: ',',
				f5: $elm$project_metadata_utils$Elm$Type$spaces,
				cB: '(',
				gj: 0
			}));
}
function $elm$project_metadata_utils$Elm$Type$cyclic$tipe() {
	return $elm$parser$Parser$lazy(
		function (_v0) {
			return A2(
				$elm$parser$Parser$andThen,
				$elm$project_metadata_utils$Elm$Type$tipeHelp,
				$elm$project_metadata_utils$Elm$Type$cyclic$tipeTerm());
		});
}
var $elm$project_metadata_utils$Elm$Type$arrowAndType = $elm$project_metadata_utils$Elm$Type$cyclic$arrowAndType();
$elm$project_metadata_utils$Elm$Type$cyclic$arrowAndType = function () {
	return $elm$project_metadata_utils$Elm$Type$arrowAndType;
};
var $elm$project_metadata_utils$Elm$Type$tipeTerm = $elm$project_metadata_utils$Elm$Type$cyclic$tipeTerm();
$elm$project_metadata_utils$Elm$Type$cyclic$tipeTerm = function () {
	return $elm$project_metadata_utils$Elm$Type$tipeTerm;
};
var $elm$project_metadata_utils$Elm$Type$term = $elm$project_metadata_utils$Elm$Type$cyclic$term();
$elm$project_metadata_utils$Elm$Type$cyclic$term = function () {
	return $elm$project_metadata_utils$Elm$Type$term;
};
var $elm$project_metadata_utils$Elm$Type$record = $elm$project_metadata_utils$Elm$Type$cyclic$record();
$elm$project_metadata_utils$Elm$Type$cyclic$record = function () {
	return $elm$project_metadata_utils$Elm$Type$record;
};
var $elm$project_metadata_utils$Elm$Type$recordEnd = $elm$project_metadata_utils$Elm$Type$cyclic$recordEnd();
$elm$project_metadata_utils$Elm$Type$cyclic$recordEnd = function () {
	return $elm$project_metadata_utils$Elm$Type$recordEnd;
};
var $elm$project_metadata_utils$Elm$Type$field = $elm$project_metadata_utils$Elm$Type$cyclic$field();
$elm$project_metadata_utils$Elm$Type$cyclic$field = function () {
	return $elm$project_metadata_utils$Elm$Type$field;
};
var $elm$project_metadata_utils$Elm$Type$tuple = $elm$project_metadata_utils$Elm$Type$cyclic$tuple();
$elm$project_metadata_utils$Elm$Type$cyclic$tuple = function () {
	return $elm$project_metadata_utils$Elm$Type$tuple;
};
var $elm$project_metadata_utils$Elm$Type$tipe = $elm$project_metadata_utils$Elm$Type$cyclic$tipe();
$elm$project_metadata_utils$Elm$Type$cyclic$tipe = function () {
	return $elm$project_metadata_utils$Elm$Type$tipe;
};
var $elm$project_metadata_utils$Elm$Type$parse = function (source) {
	return A2($elm$parser$Parser$run, $elm$project_metadata_utils$Elm$Type$tipe, source);
};
var $elm$project_metadata_utils$Elm$Type$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$Type$parse(string);
	if (_v0.$ === 1) {
		var error = _v0.a;
		return $elm$json$Json$Decode$fail('TODO');
	} else {
		var actualType = _v0.a;
		return $elm$json$Json$Decode$succeed(actualType);
	}
};
var $elm$project_metadata_utils$Elm$Type$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Type$decoderHelp, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$Docs$aliasDecoder = A5(
	$elm$json$Json$Decode$map4,
	$elm$project_metadata_utils$Elm$Docs$Alias,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'comment', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'args',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'type', $elm$project_metadata_utils$Elm$Type$decoder));
var $elm$project_metadata_utils$Elm$Docs$Binop = F5(
	function (name, comment, tipe, associativity, precedence) {
		return {gu: associativity, b5: comment, bV: name, hz: precedence, eT: tipe};
	});
var $elm$project_metadata_utils$Elm$Docs$Left = 0;
var $elm$project_metadata_utils$Elm$Docs$None = 1;
var $elm$project_metadata_utils$Elm$Docs$Right = 2;
var $elm$project_metadata_utils$Elm$Docs$toAssoc = function (str) {
	switch (str) {
		case 'left':
			return $elm$json$Json$Decode$succeed(0);
		case 'non':
			return $elm$json$Json$Decode$succeed(1);
		case 'right':
			return $elm$json$Json$Decode$succeed(2);
		default:
			return $elm$json$Json$Decode$fail('expecting one of the following values: left, non, right');
	}
};
var $elm$project_metadata_utils$Elm$Docs$assocDecoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Docs$toAssoc, $elm$json$Json$Decode$string);
var $elm$json$Json$Decode$map5 = _Json_map5;
var $elm$project_metadata_utils$Elm$Docs$binopDecoder = A6(
	$elm$json$Json$Decode$map5,
	$elm$project_metadata_utils$Elm$Docs$Binop,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'comment', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'type', $elm$project_metadata_utils$Elm$Type$decoder),
	A2($elm$json$Json$Decode$field, 'associativity', $elm$project_metadata_utils$Elm$Docs$assocDecoder),
	A2($elm$json$Json$Decode$field, 'precedence', $elm$json$Json$Decode$int));
var $elm$project_metadata_utils$Elm$Docs$Union = F4(
	function (name, comment, args, tags) {
		return {gt: args, b5: comment, bV: name, hS: tags};
	});
var $elm$project_metadata_utils$Elm$Docs$tagDecoder = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$index,
		1,
		$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Type$decoder)));
var $elm$project_metadata_utils$Elm$Docs$unionDecoder = A5(
	$elm$json$Json$Decode$map4,
	$elm$project_metadata_utils$Elm$Docs$Union,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'comment', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'args',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2(
		$elm$json$Json$Decode$field,
		'cases',
		$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$tagDecoder)));
var $elm$project_metadata_utils$Elm$Docs$Value = F3(
	function (name, comment, tipe) {
		return {b5: comment, bV: name, eT: tipe};
	});
var $elm$project_metadata_utils$Elm$Docs$valueDecoder = A4(
	$elm$json$Json$Decode$map3,
	$elm$project_metadata_utils$Elm$Docs$Value,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'comment', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'type', $elm$project_metadata_utils$Elm$Type$decoder));
var $elm$project_metadata_utils$Elm$Docs$decoder = A7(
	$elm$json$Json$Decode$map6,
	$elm$project_metadata_utils$Elm$Docs$Module,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'comment', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'unions',
		$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$unionDecoder)),
	A2(
		$elm$json$Json$Decode$field,
		'aliases',
		$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$aliasDecoder)),
	A2(
		$elm$json$Json$Decode$field,
		'values',
		$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$valueDecoder)),
	A2(
		$elm$json$Json$Decode$field,
		'binops',
		$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$binopDecoder)));
var $author$project$Elm$Review$Main$dependencyDecoder = A4(
	$elm$json$Json$Decode$map3,
	$jfmengels$elm_review$Review$Project$Dependency$create,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'elmJson', $elm$project_metadata_utils$Elm$Project$decoder),
	A2(
		$elm$json$Json$Decode$field,
		'docsJson',
		$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$decoder)));
var $author$project$Elm$Review$Main$dependenciesDecoder = function (ignoreProblematicDependencies) {
	return ignoreProblematicDependencies ? A2(
		$elm$json$Json$Decode$map,
		$elm$core$List$filterMap($elm$core$Basics$identity),
		$elm$json$Json$Decode$list(
			$elm$json$Json$Decode$oneOf(
				_List_fromArray(
					[
						A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $author$project$Elm$Review$Main$dependencyDecoder),
						$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
					])))) : $elm$json$Json$Decode$list($author$project$Elm$Review$Main$dependencyDecoder);
};
var $elm$json$Json$Decode$maybe = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			]));
};
var $author$project$Elm$Review$Main$confirmationDecoder = function (ignoreProblematicDependencies) {
	return A2(
		$elm$json$Json$Decode$andThen,
		function (accepted) {
			return accepted ? A3(
				$elm$json$Json$Decode$map2,
				F2(
					function (rawFiles, dependencies) {
						return $author$project$Elm$Review$Main$Accepted(
							{e6: dependencies, fY: rawFiles});
					}),
				A2(
					$elm$json$Json$Decode$field,
					'files',
					$elm$json$Json$Decode$list($author$project$Elm$Review$File$decode)),
				$elm$json$Json$Decode$maybe(
					A2(
						$elm$json$Json$Decode$field,
						'dependencies',
						$author$project$Elm$Review$Main$dependenciesDecoder(ignoreProblematicDependencies)))) : $elm$json$Json$Decode$succeed($author$project$Elm$Review$Main$Refused);
		},
		A2($elm$json$Json$Decode$field, 'answer', $elm$json$Json$Decode$bool));
};
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $author$project$Elm$Review$SuppressedErrors$count = function (_v0) {
	var suppressedErrors = _v0;
	return $elm$core$List$sum(
		$elm$core$Dict$values(suppressedErrors));
};
var $author$project$Elm$Review$SuppressedErrors$fileEntryDecoder = A3(
	$elm$json$Json$Decode$map2,
	$elm$core$Tuple$pair,
	A2($elm$json$Json$Decode$field, 'filePath', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'count', $elm$json$Json$Decode$int));
var $author$project$Elm$Review$SuppressedErrors$suppressedErrorEntryDecoder = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (rule, suppressions) {
			return A2(
				$elm$core$List$map,
				function (_v0) {
					var filePath = _v0.a;
					var nbSuppressedErrors = _v0.b;
					return _Utils_Tuple2(
						_Utils_Tuple2(rule, filePath),
						nbSuppressedErrors);
				},
				suppressions);
		}),
	A2($elm$json$Json$Decode$field, 'rule', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'suppressions',
		$elm$json$Json$Decode$list($author$project$Elm$Review$SuppressedErrors$fileEntryDecoder)));
var $author$project$Elm$Review$SuppressedErrors$decoder = A2(
	$elm$json$Json$Decode$map,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$concat,
		A2($elm$core$Basics$composeR, $elm$core$Dict$fromList, $elm$core$Basics$identity)),
	$elm$json$Json$Decode$list($author$project$Elm$Review$SuppressedErrors$suppressedErrorEntryDecoder));
var $elm$json$Json$Decode$dict = function (decoder) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		$elm$json$Json$Decode$keyValuePairs(decoder));
};
var $author$project$Elm$Review$Main$elmJsonDecoder = A4(
	$elm$json$Json$Decode$map3,
	F3(
		function (path, raw, project) {
			return {hw: path, h: project, dM: raw};
		}),
	A2($elm$json$Json$Decode$field, 'path', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'raw', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'project', $elm$project_metadata_utils$Elm$Project$decoder));
var $author$project$Elm$Review$SuppressedErrors$encodeFileSuppression = function (_v0) {
	var nbSuppressedErrors = _v0.a;
	var path = _v0.b;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'count',
				$elm$json$Json$Encode$int(nbSuppressedErrors)),
				_Utils_Tuple2(
				'filePath',
				$elm$json$Json$Encode$string(path))
			]));
};
var $author$project$Elm$Review$SuppressedErrors$encodeFileSuppressions = function (countPerFile) {
	return A2($elm$json$Json$Encode$list, $author$project$Elm$Review$SuppressedErrors$encodeFileSuppression, countPerFile);
};
var $author$project$Elm$Review$SuppressedErrors$encodeRuleSuppression = F2(
	function (ruleName, fileSuppressions) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'rule',
					$elm$json$Json$Encode$string(ruleName)),
					_Utils_Tuple2('suppressions', fileSuppressions)
				]));
	});
var $author$project$Elm$Review$SuppressedErrors$encode = F2(
	function (ruleNames, _v0) {
		var suppressedErrors = _v0;
		var suppressedErrorsList = $elm$core$Dict$toList(suppressedErrors);
		var suppressionsPerRule = $elm$core$Dict$toList(
			A3(
				$elm$core$List$foldl,
				F2(
					function (_v2, acc) {
						var _v3 = _v2.a;
						var ruleName = _v3.a;
						var path = _v3.b;
						var nbSuppressedErrors = _v2.b;
						return A3(
							$elm$core$Dict$update,
							ruleName,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Maybe$withDefault(_List_Nil),
								A2(
									$elm$core$Basics$composeR,
									$elm$core$List$cons(
										_Utils_Tuple2(nbSuppressedErrors, path)),
									$elm$core$Maybe$Just)),
							acc);
					}),
				$elm$core$Dict$empty,
				suppressedErrorsList));
		var rulesWithSuppressions = $elm$core$Set$fromList(
			A2(
				$elm$core$List$map,
				A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $elm$core$Tuple$first),
				suppressedErrorsList));
		var rulesWithoutSuppressions = A2(
			$elm$core$List$map,
			function (ruleName) {
				return _Utils_Tuple2(ruleName, _List_Nil);
			},
			A2(
				$elm$core$List$filter,
				function (ruleName) {
					return !A2($elm$core$Set$member, ruleName, rulesWithSuppressions);
				},
				ruleNames));
		return A2(
			$elm$json$Json$Encode$list,
			function (_v1) {
				var ruleName = _v1.a;
				var fileSuppressions = _v1.b;
				return A2(
					$author$project$Elm$Review$SuppressedErrors$encodeRuleSuppression,
					ruleName,
					$author$project$Elm$Review$SuppressedErrors$encodeFileSuppressions(fileSuppressions));
			},
			_Utils_ap(suppressionsPerRule, rulesWithoutSuppressions));
	});
var $author$project$Elm$Review$Main$fixConfirmationStatus = _Platform_outgoingPort('fixConfirmationStatus', $elm$json$Json$Encode$bool);
var $author$project$Elm$Review$SuppressedErrors$fromReviewErrors = function (reviewErrors) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (error, acc) {
				return A3(
					$elm$core$Dict$update,
					_Utils_Tuple2(
						$jfmengels$elm_review$Review$Rule$errorRuleName(error),
						$jfmengels$elm_review$Review$Rule$errorFilePath(error)),
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$withDefault(0),
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$add(1),
							$elm$core$Maybe$Just)),
					acc);
			}),
		$elm$core$Dict$empty,
		reviewErrors);
};
var $elm$json$Json$Encode$dict = F3(
	function (toKey, toValue, dictionary) {
		return _Json_wrap(
			A3(
				$elm$core$Dict$foldl,
				F3(
					function (key, value, obj) {
						return A3(
							_Json_addField,
							toKey(key),
							toValue(value),
							obj);
					}),
				_Json_emptyObject(0),
				dictionary));
	});
var $author$project$Elm$Review$Main$encodeFix = function (_v0) {
	var range = _v0.eG;
	var replacement = _v0.hF;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'range',
				$author$project$Elm$Review$Main$encodeRange(range)),
				_Utils_Tuple2(
				'string',
				$elm$json$Json$Encode$string(replacement))
			]));
};
var $author$project$Elm$Review$Main$encodeEdits = function (fixes) {
	return A2(
		$elm$json$Json$Encode$list,
		A2($elm$core$Basics$composeR, $jfmengels$elm_review$Review$Fix$toRecord, $author$project$Elm$Review$Main$encodeFix),
		fixes);
};
var $author$project$Elm$Review$Main$encodeFixKind = function (fixKind) {
	if (!fixKind.$) {
		var edits = fixKind.a;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'kind',
					$elm$json$Json$Encode$string('edit')),
					_Utils_Tuple2(
					'edits',
					$author$project$Elm$Review$Main$encodeEdits(edits))
				]));
	} else {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'kind',
					$elm$json$Json$Encode$string('remove'))
				]));
	}
};
var $author$project$Elm$Review$Main$encodeFixesV2 = function (fixes) {
	return A2(
		$elm$json$Json$Encode$list,
		function (_v0) {
			var path = _v0.a;
			var fix = _v0.b;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'path',
						$elm$json$Json$Encode$string(path)),
						_Utils_Tuple2(
						'fix',
						$author$project$Elm$Review$Main$encodeFixKind(fix))
					]));
		},
		fixes);
};
var $jfmengels$elm_review$Review$Rule$errorDetails = function (_v0) {
	var err = _v0;
	return err.dd;
};
var $jfmengels$elm_review$Review$Error$FileTarget$filePath = function (target) {
	switch (target.$) {
		case 0:
			var path = target.a;
			return path;
		case 1:
			return 'elm.json';
		case 2:
			return 'README.md';
		default:
			var path = target.a;
			return path;
	}
};
var $jfmengels$elm_review$Review$Rule$errorFixes = function (_v0) {
	var err = _v0;
	var _v1 = err.cT;
	if (_v1.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		if (_v1.a.$ === 1) {
			var _v2 = _v1.a;
			return $elm$core$Maybe$Nothing;
		} else {
			var fixes = _v1.a.a;
			if ((fixes.b && (!fixes.a.b.$)) && (!fixes.b.b)) {
				var _v4 = fixes.a;
				var target = _v4.a;
				var fileFixes = _v4.b.a;
				return _Utils_eq(
					$jfmengels$elm_review$Review$Error$FileTarget$filePath(target),
					err.g_) ? $elm$core$Maybe$Just(fileFixes) : $elm$core$Maybe$Nothing;
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	}
};
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (!ra.$) {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $jfmengels$elm_review$Review$Rule$errorFixesV2 = function (_v0) {
	var err = _v0;
	return A2(
		$elm$core$Result$map,
		$elm$core$Maybe$map(
			$elm$core$List$map(
				function (_v1) {
					var fileTarget = _v1.a;
					var fixKind = _v1.b;
					return _Utils_Tuple2(
						$jfmengels$elm_review$Review$Error$FileTarget$filePath(fileTarget),
						function () {
							if (!fixKind.$) {
								var edits = fixKind.a;
								return $elm$core$Maybe$Just(edits);
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}());
				})),
		err.cT);
};
var $jfmengels$elm_review$Review$Rule$errorMessage = function (_v0) {
	var err = _v0;
	return err.a_;
};
var $jfmengels$elm_review$Review$Rule$errorRange = function (_v0) {
	var err = _v0;
	return err.eG;
};
var $author$project$Elm$Review$Main$hasFileRemovalFixes = function (fixes) {
	return A2(
		$elm$core$List$any,
		function (_v0) {
			var fix = _v0.b;
			return _Utils_eq(fix, $elm$core$Maybe$Nothing);
		},
		fixes);
};
var $author$project$Elm$Review$Main$linkToRule = F2(
	function (links, error) {
		return A2(
			$elm$core$Dict$get,
			$jfmengels$elm_review$Review$Rule$errorRuleName(error),
			links);
	});
var $author$project$Elm$Review$SuppressedErrors$member = F2(
	function (error, _v0) {
		var suppressedErrors = _v0;
		return A2(
			$elm$core$Dict$member,
			_Utils_Tuple2(
				$jfmengels$elm_review$Review$Rule$errorRuleName(error),
				$jfmengels$elm_review$Review$Rule$errorFilePath(error)),
			suppressedErrors);
	});
var $author$project$Elm$Review$Main$fromReviewError = F3(
	function (suppressedErrors, links, error) {
		var fixes = $jfmengels$elm_review$Review$Rule$errorFixesV2(error);
		var providesFix = function () {
			if (!fixes.$) {
				if (fixes.a.$ === 1) {
					var _v5 = fixes.a;
					return false;
				} else {
					return true;
				}
			} else {
				return true;
			}
		}();
		return {
			dd: $jfmengels$elm_review$Review$Rule$errorDetails(error),
			fm: function () {
				if (!fixes.$) {
					if (fixes.a.$ === 1) {
						var _v1 = fixes.a;
						return $elm$core$Maybe$Nothing;
					} else {
						return $elm$core$Maybe$Nothing;
					}
				} else {
					var fixProblem = fixes.a;
					return $elm$core$Maybe$Just(fixProblem);
				}
			}(),
			a_: $jfmengels$elm_review$Review$Rule$errorMessage(error),
			fW: function () {
				if (!fixes.$) {
					if (!fixes.a.$) {
						var fixes_ = fixes.a.a;
						return $author$project$Elm$Review$Main$hasFileRemovalFixes(fixes_);
					} else {
						var _v3 = fixes.a;
						return false;
					}
				} else {
					return false;
				}
			}(),
			fX: providesFix,
			eG: $jfmengels$elm_review$Review$Rule$errorRange(error),
			f$: A2($author$project$Elm$Review$Main$linkToRule, links, error),
			eH: $jfmengels$elm_review$Review$Rule$errorRuleName(error),
			gb: A2($author$project$Elm$Review$SuppressedErrors$member, error, suppressedErrors)
		};
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $author$project$Elm$Review$Main$encodeError = F6(
	function (_v0, links, detailsMode, explainFixFailure, source, error) {
		var suppressedErrors = _v0.R;
		var reviewErrorsAfterSuppression = _v0.aP;
		var originallySuppressed = A2($author$project$Elm$Review$SuppressedErrors$member, error, suppressedErrors);
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$core$Maybe$Just(
						_Utils_Tuple2(
							'rule',
							$elm$json$Json$Encode$string(
								$jfmengels$elm_review$Review$Rule$errorRuleName(error)))),
						$elm$core$Maybe$Just(
						_Utils_Tuple2(
							'message',
							$elm$json$Json$Encode$string(
								$jfmengels$elm_review$Review$Rule$errorMessage(error)))),
						A2(
						$elm$core$Maybe$map,
						A2(
							$elm$core$Basics$composeR,
							$elm$json$Json$Encode$string,
							$elm$core$Tuple$pair('ruleLink')),
						A2($author$project$Elm$Review$Main$linkToRule, links, error)),
						$elm$core$Maybe$Just(
						_Utils_Tuple2(
							'details',
							A2(
								$elm$json$Json$Encode$list,
								$elm$json$Json$Encode$string,
								$jfmengels$elm_review$Review$Rule$errorDetails(error)))),
						$elm$core$Maybe$Just(
						_Utils_Tuple2(
							'region',
							$author$project$Elm$Review$Main$encodeRange(
								$jfmengels$elm_review$Review$Rule$errorRange(error)))),
						A2(
						$elm$core$Maybe$map,
						A2(
							$elm$core$Basics$composeR,
							$author$project$Elm$Review$Main$encodeEdits,
							$elm$core$Tuple$pair('fix')),
						$jfmengels$elm_review$Review$Rule$errorFixes(error)),
						function () {
						var _v1 = $jfmengels$elm_review$Review$Rule$errorFixesV2(error);
						if (!_v1.$) {
							if (!_v1.a.$) {
								var fixes = _v1.a.a;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(
										'fixV2',
										$author$project$Elm$Review$Main$encodeFixesV2(fixes)));
							} else {
								var _v2 = _v1.a;
								return $elm$core$Maybe$Nothing;
							}
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}(),
						$elm$core$Maybe$Just(
						_Utils_Tuple2(
							'formatted',
							$author$project$Elm$Review$Main$encodeReport(
								A4(
									$author$project$Elm$Review$Reporter$formatIndividualError,
									detailsMode,
									explainFixFailure,
									source,
									A3($author$project$Elm$Review$Main$fromReviewError, suppressedErrors, links, error))))),
						$elm$core$Maybe$Just(
						_Utils_Tuple2(
							'suppressed',
							$elm$json$Json$Encode$bool(
								originallySuppressed && (!A2($elm$core$List$member, error, reviewErrorsAfterSuppression))))),
						$elm$core$Maybe$Just(
						_Utils_Tuple2(
							'originallySuppressed',
							$elm$json$Json$Encode$bool(originallySuppressed)))
					])));
	});
var $author$project$Elm$Review$Main$encodeErrorByFile = F5(
	function (suppressedErrorsData, links, detailsMode, explainFixFailure, file) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'path',
					$author$project$Elm$Review$Main$encodeFilePath(file.hw)),
					_Utils_Tuple2(
					'errors',
					A2(
						$elm$json$Json$Encode$list,
						A5($author$project$Elm$Review$Main$encodeError, suppressedErrorsData, links, detailsMode, explainFixFailure, file.hK),
						file.ca))
				]));
	});
var $author$project$Elm$Review$Reporter$Fixing = function (a) {
	return {$: 1, a: a};
};
var $author$project$Elm$Review$Main$fixModeToReportFixMode = function (fixMode) {
	switch (fixMode.$) {
		case 0:
			return $author$project$Elm$Review$Reporter$Reviewing;
		case 1:
			var fileRemovalFixesEnabled = fixMode.a;
			return $author$project$Elm$Review$Reporter$Fixing(fileRemovalFixesEnabled);
		default:
			var fileRemovalFixesEnabled = fixMode.a;
			return $author$project$Elm$Review$Reporter$Fixing(fileRemovalFixesEnabled);
	}
};
var $author$project$Elm$Review$Reporter$packageName = function (error) {
	return A2(
		$elm$core$Maybe$andThen,
		function (link) {
			var _v0 = A2(
				$elm$core$String$split,
				'/',
				A3($elm$core$String$replace, 'https://package.elm-lang.org/packages/', '', link));
			if (_v0.b && _v0.b.b) {
				var author = _v0.a;
				var _v1 = _v0.b;
				var pkg = _v1.a;
				return $elm$core$Maybe$Just(author + ('/' + pkg));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		},
		error.f$);
};
var $author$project$Elm$Review$Reporter$classifyFixesHelp = F2(
	function (errors, acc) {
		classifyFixesHelp:
		while (true) {
			if (!errors.b) {
				return acc;
			} else {
				var error = errors.a;
				var rest = errors.b;
				var _v1 = error.fm;
				if (!_v1.$) {
					var $temp$errors = rest,
						$temp$acc = {
						cj: acc.cj,
						ck: acc.ck,
						cy: A3(
							$elm$core$Dict$insert,
							error.eH,
							$author$project$Elm$Review$Reporter$packageName(error),
							acc.cy)
					};
					errors = $temp$errors;
					acc = $temp$acc;
					continue classifyFixesHelp;
				} else {
					var $temp$errors = rest,
						$temp$acc = {cj: error.fW || acc.cj, ck: (!error.fW) || acc.ck, cy: acc.cy};
					errors = $temp$errors;
					acc = $temp$acc;
					continue classifyFixesHelp;
				}
			}
		}
	});
var $author$project$Elm$Review$Reporter$classifyFixes = function (errors) {
	return A2(
		$author$project$Elm$Review$Reporter$classifyFixesHelp,
		errors,
		{cj: false, ck: false, cy: $elm$core$Dict$empty});
};
var $author$project$Elm$Review$Reporter$countErrorsHelp = F2(
	function (files, acc) {
		countErrorsHelp:
		while (true) {
			if (!files.b) {
				return acc;
			} else {
				var file = files.a;
				var xs = files.b;
				var _v1 = file.hw;
				switch (_v1.$) {
					case 0:
						var $temp$files = xs,
							$temp$acc = {
							cv: acc.cv + $elm$core$List$length(file.ca),
							cw: acc.cw
						};
						files = $temp$files;
						acc = $temp$acc;
						continue countErrorsHelp;
					case 1:
						var $temp$files = xs,
							$temp$acc = {
							cv: acc.cv,
							cw: acc.cw + $elm$core$List$length(file.ca)
						};
						files = $temp$files;
						acc = $temp$acc;
						continue countErrorsHelp;
					default:
						var $temp$files = xs,
							$temp$acc = acc;
						files = $temp$files;
						acc = $temp$acc;
						continue countErrorsHelp;
				}
			}
		}
	});
var $author$project$Elm$Review$Reporter$countErrors = function (files) {
	return A2(
		$author$project$Elm$Review$Reporter$countErrorsHelp,
		files,
		{cv: 0, cw: 0});
};
var $author$project$Elm$Review$Reporter$fixableErrors = function (files) {
	return A2(
		$elm$core$List$concatMap,
		function (_v0) {
			var errors = _v0.ca;
			return A2(
				$elm$core$List$filter,
				function (error) {
					return error.fX;
				},
				errors);
		},
		files);
};
var $author$project$Elm$Review$Text$inGreen = function (_v0) {
	var text = _v0;
	return _Utils_update(
		text,
		{
			gG: $elm$core$Maybe$Just('#008000')
		});
};
var $author$project$Elm$Review$Reporter$formatNoErrors = F3(
	function (suppressedErrors, originalNumberOfSuppressedErrors, errorsHaveBeenFixedPreviously) {
		var numberOfSuppressedErrors = $author$project$Elm$Review$SuppressedErrors$count(suppressedErrors);
		var suppressedErrorMessage = function () {
			if (!numberOfSuppressedErrors) {
				return _List_Nil;
			} else {
				var are = (numberOfSuppressedErrors === 1) ? 'is' : 'are';
				return $elm$core$List$concat(
					_List_fromArray(
						[
							_List_fromArray(
							[
								$author$project$Elm$Review$Text$from('\n\nThere ' + (are + ' still ')),
								$author$project$Elm$Review$Text$inOrange(
								$author$project$Elm$Review$Text$from(
									$elm$core$String$fromInt(numberOfSuppressedErrors) + (' suppressed ' + A2($author$project$Elm$Review$Reporter$pluralizeEnding, numberOfSuppressedErrors, 'error')))),
								$author$project$Elm$Review$Text$from(' to address')
							]),
							(_Utils_cmp(numberOfSuppressedErrors, originalNumberOfSuppressedErrors) < 0) ? _List_fromArray(
							[
								$author$project$Elm$Review$Text$from(', and you just fixed '),
								$author$project$Elm$Review$Text$inGreen(
								$author$project$Elm$Review$Text$from(
									$elm$core$String$fromInt(originalNumberOfSuppressedErrors - numberOfSuppressedErrors))),
								$author$project$Elm$Review$Text$from('!')
							]) : _List_fromArray(
							[
								$author$project$Elm$Review$Text$from('.')
							])
						]));
			}
		}();
		var mainMessage = errorsHaveBeenFixedPreviously ? 'I found no more errors!' : 'I found no errors!';
		return A2(
			$elm$core$List$map,
			$author$project$Elm$Review$Text$toRecord,
			A2(
				$elm$core$List$cons,
				$author$project$Elm$Review$Text$from(mainMessage),
				suppressedErrorMessage));
	});
var $author$project$Elm$Review$Reporter$formatTally = F3(
	function (filesWithErrors, numberOfFileErrors, numberOfGlobalErrors) {
		return A2(
			$author$project$Elm$Review$Text$join,
			'',
			_List_fromArray(
				[
					_List_fromArray(
					[
						$author$project$Elm$Review$Text$from('I found ')
					]),
					A2(
					$author$project$Elm$Review$Text$join,
					' and ',
					A2(
						$elm$core$List$filterMap,
						$elm$core$Basics$identity,
						_List_fromArray(
							[
								function () {
								if (numberOfFileErrors > 0) {
									var numberOfFilesWithErrors = (numberOfGlobalErrors > 0) ? ($elm$core$List$length(filesWithErrors) - 1) : $elm$core$List$length(filesWithErrors);
									return $elm$core$Maybe$Just(
										_List_fromArray(
											[
												$author$project$Elm$Review$Text$inRed(
												$author$project$Elm$Review$Text$from(
													A2($author$project$Elm$Review$Reporter$pluralize, numberOfFileErrors, 'error'))),
												$author$project$Elm$Review$Text$from(' in '),
												$author$project$Elm$Review$Text$inYellow(
												$author$project$Elm$Review$Text$from(
													A2($author$project$Elm$Review$Reporter$pluralize, numberOfFilesWithErrors, 'file')))
											]));
								} else {
									return $elm$core$Maybe$Nothing;
								}
							}(),
								(numberOfGlobalErrors > 0) ? $elm$core$Maybe$Just(
								_List_fromArray(
									[
										$author$project$Elm$Review$Text$inRed(
										$author$project$Elm$Review$Text$from(
											A2($author$project$Elm$Review$Reporter$pluralize, numberOfGlobalErrors, 'global error')))
									])) : $elm$core$Maybe$Nothing
							]))),
					_List_fromArray(
					[
						$author$project$Elm$Review$Text$from('.')
					])
				]));
	});
var $author$project$Elm$Review$Reporter$listFailingRules = function (_v0) {
	var ruleName = _v0.a;
	var rulePackage = _v0.b;
	var base = $author$project$Elm$Review$Text$inYellow(
		$author$project$Elm$Review$Text$from('\n- ' + ruleName));
	if (!rulePackage.$) {
		var rulePackageName = rulePackage.a;
		return _List_fromArray(
			[
				base,
				$author$project$Elm$Review$Text$from(' ('),
				A2(
				$author$project$Elm$Review$Text$withLink,
				$elm$core$Maybe$Just('https://github.com/' + (rulePackageName + '/issues')),
				$author$project$Elm$Review$Text$from(rulePackageName)),
				$author$project$Elm$Review$Text$from(')')
			]);
	} else {
		return _List_fromArray(
			[base]);
	}
};
var $author$project$Elm$Review$Reporter$showUnsuppressedWarning = F2(
	function (unsuppressMode, files) {
		switch (unsuppressMode.$) {
			case 0:
				return false;
			case 1:
				var set = unsuppressMode.a;
				return A2(
					$elm$core$List$any,
					function (file) {
						return A2(
							$elm$core$List$any,
							function (error) {
								return error.gb && (!A2($elm$core$Set$member, error.eH, set));
							},
							file.ca);
					},
					files);
			default:
				return A2(
					$elm$core$List$any,
					function (file) {
						return A2(
							$elm$core$List$any,
							function (error) {
								return error.gb;
							},
							file.ca);
					},
					files);
		}
	});
var $author$project$Elm$Review$Reporter$formatReport = F2(
	function (_v0, files) {
		var suppressedErrors = _v0.R;
		var unsuppressMode = _v0.aS;
		var originalNumberOfSuppressedErrors = _v0.c2;
		var detailsMode = _v0.ag;
		var fixExplanation = _v0.aE;
		var errorsHaveBeenFixedPreviously = _v0.cL;
		var mode = _v0.fH;
		var _v1 = $author$project$Elm$Review$Reporter$countErrors(files);
		var numberOfFileErrors = _v1.cv;
		var numberOfGlobalErrors = _v1.cw;
		if (!(numberOfFileErrors + numberOfGlobalErrors)) {
			return A3($author$project$Elm$Review$Reporter$formatNoErrors, suppressedErrors, originalNumberOfSuppressedErrors, errorsHaveBeenFixedPreviously);
		} else {
			var filesWithErrors = A2(
				$elm$core$List$sortBy,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.hw;
					},
					$author$project$Elm$Review$Reporter$filePathToString),
				A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.ca;
						},
						A2($elm$core$Basics$composeR, $elm$core$List$isEmpty, $elm$core$Basics$not)),
					files));
			var _v2 = $author$project$Elm$Review$Reporter$classifyFixes(
				$author$project$Elm$Review$Reporter$fixableErrors(files));
			var rulesWithInvalidFixes = _v2.cy;
			var hasIgnoredFixableErrors = _v2.ck;
			var hasFileRemovalFixes = _v2.cj;
			return A2(
				$elm$core$List$map,
				$author$project$Elm$Review$Text$toRecord,
				$author$project$Elm$Review$Text$simplify(
					A2(
						$author$project$Elm$Review$Text$join,
						'\n\n',
						A2(
							$elm$core$List$filterMap,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$core$Maybe$Just(
									A4($author$project$Elm$Review$Reporter$formatReports, detailsMode, fixExplanation, mode, filesWithErrors)),
									A2($author$project$Elm$Review$Reporter$showUnsuppressedWarning, unsuppressMode, files) ? $elm$core$Maybe$Just(
									_List_fromArray(
										[
											$author$project$Elm$Review$Text$inOrange(
											$author$project$Elm$Review$Text$from('Errors marked with (unsuppressed) were previously suppressed, but you introduced new errors for the same rule and file. There are now more of those than what I previously allowed. Please fix them until you have at most as many errors as before. Maybe fix a few more while you\'re there?'))
										])) : $elm$core$Maybe$Nothing,
									hasIgnoredFixableErrors ? $elm$core$Maybe$Just(
									_List_fromArray(
										[
											$author$project$Elm$Review$Text$inBlue(
											$author$project$Elm$Review$Text$from('Errors marked with (fix) can be fixed automatically using `elm-review --fix`.'))
										])) : $elm$core$Maybe$Nothing,
									function () {
									if ((mode.$ === 1) && mode.a) {
										return $elm$core$Maybe$Nothing;
									} else {
										return hasFileRemovalFixes ? (hasIgnoredFixableErrors ? $elm$core$Maybe$Just(
											_List_fromArray(
												[
													$author$project$Elm$Review$Text$inBlue(
													$author$project$Elm$Review$Text$from('Errors marked with (fix removes files) can be fixed automatically by\nalso using `--allow-remove-files`.'))
												])) : $elm$core$Maybe$Just(
											_List_fromArray(
												[
													$author$project$Elm$Review$Text$inBlue(
													$author$project$Elm$Review$Text$from('Errors marked with (fix removes files) can be fixed automatically\nusing `elm-review --fix --allow-remove-files`.'))
												]))) : $elm$core$Maybe$Nothing;
									}
								}(),
									function () {
									if (!mode.$) {
										return $elm$core$Maybe$Nothing;
									} else {
										return (!$elm$core$Dict$isEmpty(rulesWithInvalidFixes)) ? $elm$core$Maybe$Just(
											A2(
												$author$project$Elm$Review$Text$join,
												'\n\n',
												_List_fromArray(
													[
														A2(
														$elm$core$List$cons,
														$author$project$Elm$Review$Text$inYellow(
															$author$project$Elm$Review$Text$from('I tried applying some fixes but they failed in ways the author(s) didn\'t expect. Please let the author(s) of the following rules know:')),
														A2(
															$elm$core$List$concatMap,
															$author$project$Elm$Review$Reporter$listFailingRules,
															$elm$core$Dict$toList(rulesWithInvalidFixes))),
														_List_fromArray(
														[
															function () {
															if (!fixExplanation) {
																return $author$project$Elm$Review$Text$inYellow(
																	$author$project$Elm$Review$Text$from('Before doing so, I highly recommend re-running `elm-review` with `--explain-fix-failure`, which provides more information that could help solve the issue.'));
															} else {
																return $author$project$Elm$Review$Text$inYellow(
																	$author$project$Elm$Review$Text$from('Please try to provide a SSCCE (https://sscce.org/) and as much information as possible to help solve the issue.'));
															}
														}()
														])
													]))) : $elm$core$Maybe$Nothing;
									}
								}(),
									$elm$core$Maybe$Just(
									A3($author$project$Elm$Review$Reporter$formatTally, filesWithErrors, numberOfFileErrors, numberOfGlobalErrors))
								])))));
		}
	});
var $author$project$Elm$Review$Reporter$FilePath = function (a) {
	return {$: 0, a: a};
};
var $author$project$Elm$Review$Reporter$Global = {$: 1};
var $jfmengels$elm_review$Review$Project$extraFiles = function (_v0) {
	var project = _v0;
	return project.ap;
};
var $jfmengels$elm_review$Review$Project$modulesThatFailedToParse = function (_v0) {
	var project = _v0;
	return project.cr;
};
var $author$project$Elm$Review$Main$groupErrorsByFile = F2(
	function (project, errors) {
		var files = $elm$core$List$concat(
			_List_fromArray(
				[
					A2(
					$elm$core$List$map,
					function (file) {
						return {hw: file.hw, hK: file.hK};
					},
					$jfmengels$elm_review$Review$Project$modules(project)),
					_List_fromArray(
					[
						{hw: 'GLOBAL ERROR', hK: ''},
						{hw: 'CONFIGURATION ERROR', hK: ''}
					]),
					function () {
					var _v0 = $jfmengels$elm_review$Review$Project$elmJson(project);
					if (!_v0.$) {
						var path = _v0.a.hw;
						var raw = _v0.a.dM;
						return _List_fromArray(
							[
								{hw: path, hK: raw}
							]);
					} else {
						return _List_Nil;
					}
				}(),
					function () {
					var _v1 = $jfmengels$elm_review$Review$Project$readme(project);
					if (!_v1.$) {
						var path = _v1.a.hw;
						var content = _v1.a.db;
						return _List_fromArray(
							[
								{hw: path, hK: content}
							]);
					} else {
						return _List_Nil;
					}
				}(),
					A3(
					$elm$core$Dict$foldr,
					F3(
						function (path, source, acc) {
							return A2(
								$elm$core$List$cons,
								{hw: path, hK: source},
								acc);
						}),
					_List_Nil,
					$jfmengels$elm_review$Review$Project$extraFiles(project)),
					$jfmengels$elm_review$Review$Project$modulesThatFailedToParse(project)
				]));
		return A2(
			$elm$core$List$filter,
			function (file) {
				return !$elm$core$List$isEmpty(file.ca);
			},
			A2(
				$elm$core$List$map,
				function (file) {
					return {
						ca: A2(
							$elm$core$List$filter,
							function (error) {
								return _Utils_eq(
									file.hw,
									$jfmengels$elm_review$Review$Rule$errorFilePath(error));
							},
							errors),
						hw: (file.hw === 'GLOBAL ERROR') ? $author$project$Elm$Review$Reporter$Global : ((file.hw === 'CONFIGURATION ERROR') ? $author$project$Elm$Review$Reporter$ConfigurationError : $author$project$Elm$Review$Reporter$FilePath(file.hw)),
						hK: file.hK
					};
				},
				files));
	});
var $author$project$Elm$Review$Main$reviewReport = _Platform_outgoingPort('reviewReport', $elm$core$Basics$identity);
var $author$project$Elm$Review$Main$makeReport = function (model) {
	var _v0 = function () {
		if ($elm$core$List$isEmpty(model.aP) && model.b2) {
			var suppressedErrors = $author$project$Elm$Review$SuppressedErrors$fromReviewErrors(model.bY);
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{aQ: model.ch, R: suppressedErrors}),
				A2(
					$author$project$Elm$Review$SuppressedErrors$encode,
					A2($elm$core$List$map, $jfmengels$elm_review$Review$Rule$ruleName, model.aQ),
					suppressedErrors));
		} else {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{aQ: model.ch}),
				$elm$json$Json$Encode$null);
		}
	}();
	var newModel = _v0.a;
	var suppressedErrorsForJson = _v0.b;
	return _Utils_Tuple2(
		newModel,
		$author$project$Elm$Review$Main$reviewReport(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'success',
						$elm$json$Json$Encode$bool(
							$elm$core$List$isEmpty(model.aP))),
						_Utils_Tuple2(
						'errors',
						function () {
							var _v1 = newModel.a1;
							if (!_v1) {
								var errorsByFile = A2($author$project$Elm$Review$Main$groupErrorsByFile, model.h, model.aP);
								var filesWithError = A2(
									$elm$core$List$map,
									function (file) {
										return {
											ca: A2(
												$elm$core$List$map,
												A2($author$project$Elm$Review$Main$fromReviewError, newModel.R, newModel.bS),
												file.ca),
											hw: file.hw,
											hK: file.hK
										};
									},
									errorsByFile);
								return $author$project$Elm$Review$Main$encodeReport(
									A2(
										$author$project$Elm$Review$Reporter$formatReport,
										{
											ag: newModel.ag,
											cL: newModel.cL,
											aE: newModel.aE,
											fH: $author$project$Elm$Review$Main$fixModeToReportFixMode(model.aj),
											c2: newModel.c2,
											R: newModel.R,
											aS: newModel.aS
										},
										filesWithError));
							} else {
								var errorsByFile = A2($author$project$Elm$Review$Main$groupErrorsByFile, model.h, model.bY);
								return A2(
									$elm$json$Json$Encode$list,
									A4(
										$author$project$Elm$Review$Main$encodeErrorByFile,
										{aP: model.aP, R: newModel.R},
										newModel.bS,
										newModel.ag,
										newModel.aE),
									errorsByFile);
							}
						}()),
						_Utils_Tuple2(
						'extracts',
						A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$core$Basics$identity, newModel.cS)),
						_Utils_Tuple2('suppressedErrors', suppressedErrorsForJson)
					]))));
};
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $jfmengels$elm_review$Review$Project$precomputeModuleGraph = function (project) {
	return project;
};
var $author$project$Elm$Review$RefusedErrorFixes$errorKey = function (error) {
	var range = $jfmengels$elm_review$Review$Rule$errorRange(error);
	return A2(
		$elm$core$String$join,
		'###',
		_List_fromArray(
			[
				$jfmengels$elm_review$Review$Rule$errorRuleName(error),
				$jfmengels$elm_review$Review$Rule$errorFilePath(error),
				$jfmengels$elm_review$Review$Rule$errorMessage(error),
				A2(
				$elm$core$String$join,
				'\n',
				$jfmengels$elm_review$Review$Rule$errorDetails(error)),
				A2(
				$elm$core$String$join,
				'-',
				A2(
					$elm$core$List$map,
					$elm$core$String$fromInt,
					_List_fromArray(
						[range.cB.bp, range.cB.a6, range.b9.bp, range.b9.a6])))
			]));
};
var $author$project$Elm$Review$RefusedErrorFixes$insert = F2(
	function (error, _v0) {
		var refusedErrorFixes = _v0;
		return A2(
			$elm$core$Set$insert,
			$author$project$Elm$Review$RefusedErrorFixes$errorKey(error),
			refusedErrorFixes);
	});
var $author$project$Elm$Review$Main$refuseError = F2(
	function (error, model) {
		return _Utils_update(
			model,
			{
				c4: A2($author$project$Elm$Review$RefusedErrorFixes$insert, error, model.c4)
			});
	});
var $jfmengels$elm_review$Review$Project$removeExtraFile = F2(
	function (filePath, _v0) {
		var project = _v0;
		return _Utils_update(
			project,
			{
				ap: A2($elm$core$Dict$remove, filePath, project.ap),
				K: A2($elm$core$Dict$remove, filePath, project.K)
			});
	});
var $jfmengels$elm_review$Review$Project$removeModule = F2(
	function (path, project) {
		return $jfmengels$elm_review$Review$Project$forceModuleGraphRecomputation(
			A2($jfmengels$elm_review$Review$Project$removeFileFromProject, path, project));
	});
var $jfmengels$elm_review$Review$Project$removeFile = F2(
	function (filePath, rawProject) {
		var project = rawProject;
		var withoutElmModule = A2($elm$core$Dict$member, filePath, project.av) ? A2($jfmengels$elm_review$Review$Project$removeModule, filePath, rawProject) : rawProject;
		return A2($elm$core$Dict$member, filePath, project.K) ? A2($jfmengels$elm_review$Review$Project$removeExtraFile, filePath, withoutElmModule) : withoutElmModule;
	});
var $author$project$Elm$Review$Main$AwaitingFixAll = {$: 2};
var $author$project$Elm$Review$Main$countErrors = function (dict) {
	return A3(
		$elm$core$Dict$foldl,
		F3(
			function (_v0, errors, count) {
				return $elm$core$List$length(errors) + count;
			}),
		0,
		dict);
};
var $jfmengels$elm_review$Review$Project$Edited = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Project$Removed = {$: 1};
var $jfmengels$elm_review$Review$Project$ProjectModule$contentHash = function (_v0) {
	var module_ = _v0;
	return module_.d7;
};
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $jfmengels$elm_review$Review$Project$ProjectModule$source = function (_v0) {
	var module_ = _v0;
	return module_.hK;
};
var $jfmengels$elm_review$Review$Project$diffElmFiles2 = F2(
	function (_v0, list) {
		var before = _v0.gy;
		var after = _v0.d1;
		return A6(
			$elm$core$Dict$merge,
			F3(
				function (path, _v1, acc) {
					return A2(
						$elm$core$List$cons,
						{cK: $jfmengels$elm_review$Review$Project$Removed, hw: path},
						acc);
				}),
			F4(
				function (path, beforeModule, afterModule, acc) {
					return (!_Utils_eq(
						$jfmengels$elm_review$Review$Project$ProjectModule$contentHash(beforeModule),
						$jfmengels$elm_review$Review$Project$ProjectModule$contentHash(afterModule))) ? A2(
						$elm$core$List$cons,
						{
							cK: $jfmengels$elm_review$Review$Project$Edited(
								{
									d1: $jfmengels$elm_review$Review$Project$ProjectModule$source(afterModule),
									gy: $jfmengels$elm_review$Review$Project$ProjectModule$source(beforeModule)
								}),
							hw: path
						},
						acc) : acc;
				}),
			F3(
				function (_v2, _v3, acc) {
					return acc;
				}),
			before.av,
			after.av,
			list);
	});
var $jfmengels$elm_review$Review$Project$diffElmJson2 = F2(
	function (_v0, list) {
		var before = _v0.gy;
		var after = _v0.d1;
		var _v1 = before.ba;
		if (_v1.$ === 1) {
			return list;
		} else {
			var _v2 = _v1.a;
			var elmJsonBefore = _v2.a;
			var beforeHash = _v2.b;
			var _v3 = after.ba;
			if (_v3.$ === 1) {
				return list;
			} else {
				var _v4 = _v3.a;
				var elmJsonAfter = _v4.a;
				var afterHash = _v4.b;
				return _Utils_eq(beforeHash, afterHash) ? list : A2(
					$elm$core$List$cons,
					{
						cK: $jfmengels$elm_review$Review$Project$Edited(
							{d1: elmJsonAfter.dM, gy: elmJsonBefore.dM}),
						hw: elmJsonAfter.hw
					},
					list);
			}
		}
	});
var $elm$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 1) {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $jfmengels$elm_review$Review$Project$diffExtraFiles2 = F2(
	function (_v0, list) {
		var before = _v0.gy;
		var after = _v0.d1;
		return _Utils_eq(before.K, after.K) ? list : A6(
			$elm$core$Dict$merge,
			F3(
				function (path, _v1, acc) {
					return A2(
						$elm$core$List$cons,
						{cK: $jfmengels$elm_review$Review$Project$Removed, hw: path},
						acc);
				}),
			F4(
				function (path, beforeHash, afterHash, acc) {
					if (!_Utils_eq(beforeHash, afterHash)) {
						var _v2 = A3(
							$elm$core$Maybe$map2,
							$elm$core$Tuple$pair,
							A2($elm$core$Dict$get, path, before.ap),
							A2($elm$core$Dict$get, path, after.ap));
						if (_v2.$ === 1) {
							return acc;
						} else {
							var _v3 = _v2.a;
							var beforeSource = _v3.a;
							var afterSource = _v3.b;
							return A2(
								$elm$core$List$cons,
								{
									cK: $jfmengels$elm_review$Review$Project$Edited(
										{d1: afterSource, gy: beforeSource}),
									hw: path
								},
								acc);
						}
					} else {
						return acc;
					}
				}),
			F3(
				function (_v4, _v5, acc) {
					return acc;
				}),
			before.K,
			after.K,
			list);
	});
var $jfmengels$elm_review$Review$Project$diffReadme2 = F2(
	function (_v0, list) {
		var before = _v0.gy;
		var after = _v0.d1;
		var _v1 = before.bX;
		if (_v1.$ === 1) {
			return list;
		} else {
			var _v2 = _v1.a;
			var readmeBefore = _v2.a;
			var beforeHash = _v2.b;
			var _v3 = after.bX;
			if (_v3.$ === 1) {
				return list;
			} else {
				var _v4 = _v3.a;
				var readmeAfter = _v4.a;
				var afterHash = _v4.b;
				return _Utils_eq(beforeHash, afterHash) ? list : A2(
					$elm$core$List$cons,
					{
						cK: $jfmengels$elm_review$Review$Project$Edited(
							{d1: readmeAfter.db, gy: readmeBefore.db}),
						hw: readmeAfter.hw
					},
					list);
			}
		}
	});
var $jfmengels$elm_review$Review$Project$unwrap = function (_v0) {
	var project = _v0;
	return project;
};
var $jfmengels$elm_review$Review$Project$diffV2 = function (projects) {
	var projects_ = {
		d1: $jfmengels$elm_review$Review$Project$unwrap(projects.d1),
		gy: $jfmengels$elm_review$Review$Project$unwrap(projects.gy)
	};
	return A2(
		$jfmengels$elm_review$Review$Project$diffElmFiles2,
		projects_,
		A2(
			$jfmengels$elm_review$Review$Project$diffExtraFiles2,
			projects_,
			A2(
				$jfmengels$elm_review$Review$Project$diffReadme2,
				projects_,
				A2($jfmengels$elm_review$Review$Project$diffElmJson2, projects_, _List_Nil))));
};
var $author$project$Elm$Review$Main$AwaitingError = function (a) {
	return {$: 1, a: a};
};
var $author$project$Elm$Review$Main$askConfirmationToFix = _Platform_outgoingPort('askConfirmationToFix', $elm$core$Basics$identity);
var $author$project$Elm$Review$Main$encodeChangedFile = function (changedFile) {
	var _v0 = changedFile.hK;
	var source = _v0;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'path',
				$author$project$Elm$Review$Main$encodeFilePath(changedFile.hw)),
				_Utils_Tuple2(
				'source',
				$elm$json$Json$Encode$string(source))
			]));
};
var $author$project$Elm$Review$Vendor$Diff$Added = function (a) {
	return {$: 0, a: a};
};
var $author$project$Elm$Review$Vendor$Diff$NoChange = function (a) {
	return {$: 2, a: a};
};
var $author$project$Elm$Review$Vendor$Diff$Removed = function (a) {
	return {$: 1, a: a};
};
var $author$project$Elm$Review$Reporter$findIndexInternal = F3(
	function (predicate, index, list) {
		findIndexInternal:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var item = list.a;
				var rest = list.b;
				if (predicate(item)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$predicate = predicate,
						$temp$index = index + 1,
						$temp$list = rest;
					predicate = $temp$predicate;
					index = $temp$index;
					list = $temp$list;
					continue findIndexInternal;
				}
			}
		}
	});
var $author$project$Elm$Review$Reporter$findIndex = F2(
	function (predicate, list) {
		return A3($author$project$Elm$Review$Reporter$findIndexInternal, predicate, 0, list);
	});
var $author$project$Elm$Review$Reporter$isNoChange = function (change) {
	switch (change.$) {
		case 2:
			return true;
		case 1:
			return false;
		default:
			return false;
	}
};
var $author$project$Elm$Review$Reporter$dropNonInterestingUnchangedLines = function (changes) {
	var _v0 = A2(
		$author$project$Elm$Review$Reporter$findIndex,
		A2($elm$core$Basics$composeL, $elm$core$Basics$not, $author$project$Elm$Review$Reporter$isNoChange),
		changes);
	if (_v0.$ === 1) {
		return changes;
	} else {
		var index = _v0.a;
		return A2($elm$core$List$drop, index - 1, changes);
	}
};
var $author$project$Elm$Review$Reporter$removeUnchangedLines = F2(
	function (maxLineNumberLength, list) {
		return ($elm$core$List$length(list) >= 4) ? _Utils_ap(
			A2($elm$core$List$take, 1, list),
			A2(
				$elm$core$List$cons,
				$author$project$Elm$Review$Vendor$Diff$NoChange(
					$author$project$Elm$Review$Text$from(
						A2($elm$core$String$repeat, maxLineNumberLength + 1, '·'))),
				A2(
					$elm$core$List$take,
					1,
					$elm$core$List$reverse(list)))) : list;
	});
var $author$project$Elm$Review$Reporter$addLineNumbers = function (changes) {
	var maxLineNumberLength = $author$project$Elm$Review$Reporter$lengthOfLineNumber(
		A3(
			$elm$core$List$foldl,
			F2(
				function (change, _v3) {
					var currentMax = _v3.a;
					var lineNumber = _v3.b;
					switch (change.$) {
						case 2:
							return _Utils_Tuple2(currentMax, lineNumber + 1);
						case 1:
							return _Utils_Tuple2(lineNumber + 1, lineNumber + 1);
						default:
							return _Utils_Tuple2(lineNumber, lineNumber);
					}
				}),
			_Utils_Tuple2(0, 0),
			changes).a);
	var _v0 = A3(
		$elm$core$List$foldl,
		F2(
			function (change, _v1) {
				var lineNumber = _v1.a;
				var previousUnchangedLines = _v1.b;
				var accDiffLines = _v1.c;
				switch (change.$) {
					case 2:
						var str = change.a;
						var line = $elm$core$String$isEmpty(str) ? A2($author$project$Elm$Review$Reporter$lineNumberPrefixUnpadded, maxLineNumberLength, lineNumber) : _Utils_ap(
							A2($author$project$Elm$Review$Reporter$lineNumberPrefix, maxLineNumberLength, lineNumber),
							str);
						return _Utils_Tuple3(
							lineNumber + 1,
							A2(
								$elm$core$List$cons,
								$author$project$Elm$Review$Vendor$Diff$NoChange(
									$author$project$Elm$Review$Text$from(line)),
								previousUnchangedLines),
							accDiffLines);
					case 1:
						var str = change.a;
						var line = $elm$core$String$isEmpty(str) ? A2($author$project$Elm$Review$Reporter$lineNumberPrefixUnpadded, maxLineNumberLength, lineNumber) : _Utils_ap(
							A2($author$project$Elm$Review$Reporter$lineNumberPrefix, maxLineNumberLength, lineNumber),
							str);
						return _Utils_Tuple3(
							lineNumber + 1,
							_List_Nil,
							A2(
								$elm$core$List$cons,
								$author$project$Elm$Review$Vendor$Diff$Removed(
									$author$project$Elm$Review$Text$inRed(
										$author$project$Elm$Review$Text$from(line))),
								_Utils_ap(
									A2($author$project$Elm$Review$Reporter$removeUnchangedLines, maxLineNumberLength, previousUnchangedLines),
									accDiffLines)));
					default:
						var str = change.a;
						var line = $elm$core$String$isEmpty(str) ? (A2($elm$core$String$repeat, maxLineNumberLength - 1, ' ') + '+|') : (A2($elm$core$String$repeat, maxLineNumberLength - 1, ' ') + ('+| ' + str));
						return _Utils_Tuple3(
							lineNumber,
							_List_Nil,
							A2(
								$elm$core$List$cons,
								$author$project$Elm$Review$Vendor$Diff$Added(
									$author$project$Elm$Review$Text$inGreen(
										$author$project$Elm$Review$Text$from(line))),
								_Utils_ap(
									A2($author$project$Elm$Review$Reporter$removeUnchangedLines, maxLineNumberLength, previousUnchangedLines),
									accDiffLines)));
				}
			}),
		_Utils_Tuple3(0, _List_Nil, _List_Nil),
		changes);
	var unchangedLines = _v0.b;
	var diffLines = _v0.c;
	return $author$project$Elm$Review$Reporter$dropNonInterestingUnchangedLines(
		$elm$core$List$reverse(
			$author$project$Elm$Review$Reporter$dropNonInterestingUnchangedLines(
				_Utils_ap(unchangedLines, diffLines))));
};
var $author$project$Elm$Review$Vendor$Diff$CannotGetA = function (a) {
	return {$: 0, a: a};
};
var $author$project$Elm$Review$Vendor$Diff$CannotGetB = function (a) {
	return {$: 1, a: a};
};
var $author$project$Elm$Review$Vendor$Diff$UnexpectedPath = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $author$project$Elm$Review$Vendor$Diff$makeChangesHelp = F5(
	function (changes, getA, getB, _v0, path) {
		makeChangesHelp:
		while (true) {
			var x = _v0.a;
			var y = _v0.b;
			if (!path.b) {
				return $elm$core$Result$Ok(changes);
			} else {
				var _v2 = path.a;
				var prevX = _v2.a;
				var prevY = _v2.b;
				var tail = path.b;
				var change = function () {
					if (_Utils_eq(x - 1, prevX) && _Utils_eq(y - 1, prevY)) {
						var _v4 = getA(x);
						if (!_v4.$) {
							var a = _v4.a;
							return $elm$core$Result$Ok(
								$author$project$Elm$Review$Vendor$Diff$NoChange(a));
						} else {
							return $elm$core$Result$Err(
								$author$project$Elm$Review$Vendor$Diff$CannotGetA(x));
						}
					} else {
						if (_Utils_eq(x, prevX)) {
							var _v5 = getB(y);
							if (!_v5.$) {
								var b = _v5.a;
								return $elm$core$Result$Ok(
									$author$project$Elm$Review$Vendor$Diff$Added(b));
							} else {
								return $elm$core$Result$Err(
									$author$project$Elm$Review$Vendor$Diff$CannotGetB(y));
							}
						} else {
							if (_Utils_eq(y, prevY)) {
								var _v6 = getA(x);
								if (!_v6.$) {
									var a = _v6.a;
									return $elm$core$Result$Ok(
										$author$project$Elm$Review$Vendor$Diff$Removed(a));
								} else {
									return $elm$core$Result$Err(
										$author$project$Elm$Review$Vendor$Diff$CannotGetA(x));
								}
							} else {
								return $elm$core$Result$Err(
									A2(
										$author$project$Elm$Review$Vendor$Diff$UnexpectedPath,
										_Utils_Tuple2(x, y),
										path));
							}
						}
					}
				}();
				if (!change.$) {
					var c = change.a;
					var $temp$changes = A2($elm$core$List$cons, c, changes),
						$temp$getA = getA,
						$temp$getB = getB,
						$temp$_v0 = _Utils_Tuple2(prevX, prevY),
						$temp$path = tail;
					changes = $temp$changes;
					getA = $temp$getA;
					getB = $temp$getB;
					_v0 = $temp$_v0;
					path = $temp$path;
					continue makeChangesHelp;
				} else {
					var e = change.a;
					return $elm$core$Result$Err(e);
				}
			}
		}
	});
var $author$project$Elm$Review$Vendor$Diff$makeChanges = F3(
	function (getA, getB, path) {
		if (!path.b) {
			return $elm$core$Result$Ok(_List_Nil);
		} else {
			var latest = path.a;
			var tail = path.b;
			return A5($author$project$Elm$Review$Vendor$Diff$makeChangesHelp, _List_Nil, getA, getB, latest, tail);
		}
	});
var $author$project$Elm$Review$Vendor$Diff$Continue = function (a) {
	return {$: 0, a: a};
};
var $author$project$Elm$Review$Vendor$Diff$Found = function (a) {
	return {$: 1, a: a};
};
var $author$project$Elm$Review$Vendor$Diff$step = F4(
	function (snake_, offset, k, v) {
		var fromTop = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2($elm$core$Array$get, (k + 1) + offset, v));
		var fromLeft = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2($elm$core$Array$get, (k - 1) + offset, v));
		var _v0 = function () {
			var _v2 = _Utils_Tuple2(fromLeft, fromTop);
			if (!_v2.a.b) {
				if (!_v2.b.b) {
					return _Utils_Tuple2(
						_List_Nil,
						_Utils_Tuple2(0, 0));
				} else {
					var _v3 = _v2.b;
					var _v4 = _v3.a;
					var topX = _v4.a;
					var topY = _v4.b;
					return _Utils_Tuple2(
						fromTop,
						_Utils_Tuple2(topX + 1, topY));
				}
			} else {
				if (!_v2.b.b) {
					var _v5 = _v2.a;
					var _v6 = _v5.a;
					var leftX = _v6.a;
					var leftY = _v6.b;
					return _Utils_Tuple2(
						fromLeft,
						_Utils_Tuple2(leftX, leftY + 1));
				} else {
					var _v7 = _v2.a;
					var _v8 = _v7.a;
					var leftX = _v8.a;
					var leftY = _v8.b;
					var _v9 = _v2.b;
					var _v10 = _v9.a;
					var topX = _v10.a;
					var topY = _v10.b;
					return (_Utils_cmp(leftY + 1, topY) > -1) ? _Utils_Tuple2(
						fromLeft,
						_Utils_Tuple2(leftX, leftY + 1)) : _Utils_Tuple2(
						fromTop,
						_Utils_Tuple2(topX + 1, topY));
				}
			}
		}();
		var path = _v0.a;
		var _v1 = _v0.b;
		var x = _v1.a;
		var y = _v1.b;
		var _v11 = A3(
			snake_,
			x + 1,
			y + 1,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(x, y),
				path));
		var newPath = _v11.a;
		var goal = _v11.b;
		return goal ? $author$project$Elm$Review$Vendor$Diff$Found(newPath) : $author$project$Elm$Review$Vendor$Diff$Continue(
			A3($elm$core$Array$set, k + offset, newPath, v));
	});
var $author$project$Elm$Review$Vendor$Diff$onpLoopK = F4(
	function (snake_, offset, ks, v) {
		onpLoopK:
		while (true) {
			if (!ks.b) {
				return $author$project$Elm$Review$Vendor$Diff$Continue(v);
			} else {
				var k = ks.a;
				var ks_ = ks.b;
				var _v1 = A4($author$project$Elm$Review$Vendor$Diff$step, snake_, offset, k, v);
				if (_v1.$ === 1) {
					var path = _v1.a;
					return $author$project$Elm$Review$Vendor$Diff$Found(path);
				} else {
					var v_ = _v1.a;
					var $temp$snake_ = snake_,
						$temp$offset = offset,
						$temp$ks = ks_,
						$temp$v = v_;
					snake_ = $temp$snake_;
					offset = $temp$offset;
					ks = $temp$ks;
					v = $temp$v;
					continue onpLoopK;
				}
			}
		}
	});
var $author$project$Elm$Review$Vendor$Diff$onpLoopP = F5(
	function (snake_, delta, offset, p, v) {
		onpLoopP:
		while (true) {
			var ks = (delta > 0) ? _Utils_ap(
				$elm$core$List$reverse(
					A2($elm$core$List$range, delta + 1, delta + p)),
				A2($elm$core$List$range, -p, delta)) : _Utils_ap(
				$elm$core$List$reverse(
					A2($elm$core$List$range, delta + 1, p)),
				A2($elm$core$List$range, (-p) + delta, delta));
			var _v0 = A4($author$project$Elm$Review$Vendor$Diff$onpLoopK, snake_, offset, ks, v);
			if (_v0.$ === 1) {
				var path = _v0.a;
				return path;
			} else {
				var v_ = _v0.a;
				var $temp$snake_ = snake_,
					$temp$delta = delta,
					$temp$offset = offset,
					$temp$p = p + 1,
					$temp$v = v_;
				snake_ = $temp$snake_;
				delta = $temp$delta;
				offset = $temp$offset;
				p = $temp$p;
				v = $temp$v;
				continue onpLoopP;
			}
		}
	});
var $author$project$Elm$Review$Vendor$Diff$snake = F5(
	function (getA, getB, nextX, nextY, path) {
		snake:
		while (true) {
			var _v0 = _Utils_Tuple2(
				getA(nextX),
				getB(nextY));
			_v0$2:
			while (true) {
				if (!_v0.a.$) {
					if (!_v0.b.$) {
						var a = _v0.a.a;
						var b = _v0.b.a;
						if (_Utils_eq(a, b)) {
							var $temp$getA = getA,
								$temp$getB = getB,
								$temp$nextX = nextX + 1,
								$temp$nextY = nextY + 1,
								$temp$path = A2(
								$elm$core$List$cons,
								_Utils_Tuple2(nextX, nextY),
								path);
							getA = $temp$getA;
							getB = $temp$getB;
							nextX = $temp$nextX;
							nextY = $temp$nextY;
							path = $temp$path;
							continue snake;
						} else {
							return _Utils_Tuple2(path, false);
						}
					} else {
						break _v0$2;
					}
				} else {
					if (_v0.b.$ === 1) {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						return _Utils_Tuple2(path, true);
					} else {
						break _v0$2;
					}
				}
			}
			return _Utils_Tuple2(path, false);
		}
	});
var $author$project$Elm$Review$Vendor$Diff$onp = F4(
	function (getA, getB, m, n) {
		var v = A2(
			$elm$core$Array$initialize,
			(m + n) + 1,
			$elm$core$Basics$always(_List_Nil));
		var delta = n - m;
		return A5(
			$author$project$Elm$Review$Vendor$Diff$onpLoopP,
			A2($author$project$Elm$Review$Vendor$Diff$snake, getA, getB),
			delta,
			m,
			0,
			v);
	});
var $author$project$Elm$Review$Vendor$Diff$testDiff = F2(
	function (a, b) {
		var arrB = $elm$core$Array$fromList(b);
		var getB = function (y) {
			return A2($elm$core$Array$get, y - 1, arrB);
		};
		var n = $elm$core$Array$length(arrB);
		var arrA = $elm$core$Array$fromList(a);
		var getA = function (x) {
			return A2($elm$core$Array$get, x - 1, arrA);
		};
		var m = $elm$core$Array$length(arrA);
		var path = A4($author$project$Elm$Review$Vendor$Diff$onp, getA, getB, m, n);
		return A3($author$project$Elm$Review$Vendor$Diff$makeChanges, getA, getB, path);
	});
var $author$project$Elm$Review$Vendor$Diff$diff = F2(
	function (a, b) {
		var _v0 = A2($author$project$Elm$Review$Vendor$Diff$testDiff, a, b);
		if (!_v0.$) {
			var changes = _v0.a;
			return changes;
		} else {
			return _List_Nil;
		}
	});
var $author$project$Elm$Review$Vendor$Diff$diffLines = F2(
	function (a, b) {
		return A2(
			$author$project$Elm$Review$Vendor$Diff$diff,
			$elm$core$String$lines(a),
			$elm$core$String$lines(b));
	});
var $author$project$Elm$Review$Reporter$extractValueFromChange = function (change) {
	switch (change.$) {
		case 2:
			var value = change.a;
			return value;
		case 1:
			var value = change.a;
			return value;
		default:
			var value = change.a;
			return value;
	}
};
var $author$project$Elm$Review$Reporter$formatDiff = F2(
	function (before, after) {
		return A2(
			$elm$core$List$intersperse,
			$author$project$Elm$Review$Text$from('\n'),
			A2(
				$elm$core$List$map,
				$author$project$Elm$Review$Reporter$extractValueFromChange,
				$author$project$Elm$Review$Reporter$addLineNumbers(
					A2($author$project$Elm$Review$Vendor$Diff$diffLines, before, after))));
	});
var $author$project$Elm$Review$Reporter$formatFilePathForSingleFix = function (path) {
	return $author$project$Elm$Review$Text$inBlue(
		$author$project$Elm$Review$Text$from(
			A3($elm$core$String$padLeft, 80, '-', path)));
};
var $author$project$Elm$Review$Reporter$formatFilePathForSingleFixWith = F3(
	function (fileNo, numberOfFiles, path) {
		var page = $elm$core$String$fromInt(fileNo) + ('/' + ($elm$core$String$fromInt(numberOfFiles) + ' -'));
		return $author$project$Elm$Review$Text$inBlue(
			$author$project$Elm$Review$Text$from(
				_Utils_ap(
					page,
					A3(
						$elm$core$String$padLeft,
						80 - $elm$core$String$length(page),
						'-',
						' ' + path))));
	});
var $author$project$Elm$Review$Reporter$formatSingleFixProposal = F6(
	function (detailsMode, fixExplanation, fileRemovalFixesEnabled, file, error, diffs) {
		return A2(
			$elm$core$List$map,
			$author$project$Elm$Review$Text$toRecord,
			$elm$core$List$concat(
				_List_fromArray(
					[
						A2(
						$author$project$Elm$Review$Text$join,
						'\n\n',
						_List_fromArray(
							[
								A4(
								$author$project$Elm$Review$Reporter$formatReportForFileWithExtract,
								detailsMode,
								fixExplanation,
								$author$project$Elm$Review$Reporter$Fixing(fileRemovalFixesEnabled),
								{
									ca: _List_fromArray(
										[error]),
									hw: file.hw,
									hK: file.hK
								}),
								_List_fromArray(
								[
									$author$project$Elm$Review$Text$inBlue(
									$author$project$Elm$Review$Text$from('I think I can fix this. Here is my proposal:'))
								]),
								function () {
								if (diffs.b && (!diffs.b.b)) {
									var path = diffs.a.hw;
									var diff = diffs.a.cK;
									if (!diff.$) {
										var before = diff.a.gy;
										var after = diff.a.d1;
										return (!_Utils_eq(
											$author$project$Elm$Review$Reporter$FilePath(path),
											file.hw)) ? A2(
											$elm$core$List$cons,
											$author$project$Elm$Review$Reporter$formatFilePathForSingleFix(path),
											A2(
												$elm$core$List$cons,
												$author$project$Elm$Review$Text$from('\n\n'),
												A2($author$project$Elm$Review$Reporter$formatDiff, before, after))) : A2($author$project$Elm$Review$Reporter$formatDiff, before, after);
									} else {
										return (!_Utils_eq(
											$author$project$Elm$Review$Reporter$FilePath(path),
											file.hw)) ? _List_fromArray(
											[
												$author$project$Elm$Review$Reporter$formatFilePathForSingleFix(path),
												$author$project$Elm$Review$Text$from('\n\n'),
												$author$project$Elm$Review$Text$inRed(
												$author$project$Elm$Review$Text$from('    REMOVE FILE'))
											]) : _List_fromArray(
											[
												$author$project$Elm$Review$Text$inRed(
												$author$project$Elm$Review$Text$from('    REMOVE FILE ' + path))
											]);
									}
								} else {
									var numberOfDiffs = $elm$core$List$length(diffs);
									return A2(
										$author$project$Elm$Review$Text$join,
										'\n\n',
										A2(
											$elm$core$List$indexedMap,
											F2(
												function (index, _v4) {
													var path = _v4.hw;
													var diff = _v4.cK;
													return A2(
														$elm$core$List$cons,
														A3($author$project$Elm$Review$Reporter$formatFilePathForSingleFixWith, index + 1, numberOfDiffs, path),
														A2(
															$elm$core$List$cons,
															$author$project$Elm$Review$Text$from('\n\n'),
															function () {
																if (!diff.$) {
																	var before = diff.a.gy;
																	var after = diff.a.d1;
																	return A2($author$project$Elm$Review$Reporter$formatDiff, before, after);
																} else {
																	return _List_fromArray(
																		[
																			$author$project$Elm$Review$Text$inRed(
																			$author$project$Elm$Review$Text$from('    REMOVE FILE'))
																		]);
																}
															}()));
												}),
											A2(
												$elm$core$List$sortBy,
												function (_v2) {
													var path = _v2.hw;
													var diff = _v2.cK;
													if (!diff.$) {
														return _Utils_eq(
															$author$project$Elm$Review$Reporter$FilePath(path),
															file.hw) ? _Utils_Tuple2(0, '') : _Utils_Tuple2(0, path);
													} else {
														return _Utils_Tuple2(1, path);
													}
												},
												diffs)));
								}
							}()
							])),
						_List_fromArray(
						[
							$author$project$Elm$Review$Text$from('\n')
						])
					])));
	});
var $author$project$Elm$Review$Main$MultipleErrors = function (a) {
	return {$: 2, a: a};
};
var $author$project$Elm$Review$Main$NoErrors = {$: 0};
var $author$project$Elm$Review$Main$OneError = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$Elm$Review$Main$numberOfErrors = function (dict) {
	var _v0 = $elm$core$Dict$toList(dict);
	if (!_v0.b) {
		return $author$project$Elm$Review$Main$NoErrors;
	} else {
		if ((_v0.a.b.b && (!_v0.a.b.b.b)) && (!_v0.b.b)) {
			var _v1 = _v0.a;
			var filePath = _v1.a;
			var _v2 = _v1.b;
			var singleError = _v2.a;
			return A2($author$project$Elm$Review$Main$OneError, filePath, singleError);
		} else {
			var list = _v0;
			return $author$project$Elm$Review$Main$MultipleErrors(
				$elm$core$List$length(list));
		}
	}
};
var $author$project$Elm$Review$Main$pathAndSource = F2(
	function (project, path) {
		if (path === 'GLOBAL ERROR') {
			return {hw: $author$project$Elm$Review$Reporter$Global, hK: ''};
		} else {
			var fileSource = function () {
				if (path === 'elm.json') {
					return A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.dM;
						},
						$jfmengels$elm_review$Review$Project$elmJson(project));
				} else {
					if (path === 'README.md') {
						return A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.db;
							},
							$jfmengels$elm_review$Review$Project$readme(project));
					} else {
						var _v0 = A2(
							$author$project$Elm$Review$Main$find,
							function (module_) {
								return _Utils_eq(module_.hw, path);
							},
							$jfmengels$elm_review$Review$Project$modules(project));
						if (!_v0.$) {
							var source = _v0.a.hK;
							return $elm$core$Maybe$Just(source);
						} else {
							return A2(
								$elm$core$Dict$get,
								path,
								$jfmengels$elm_review$Review$Project$extraFiles(project));
						}
					}
				}
			}();
			return {
				hw: $author$project$Elm$Review$Reporter$FilePath(path),
				hK: A2($elm$core$Maybe$withDefault, '', fileSource)
			};
		}
	});
var $author$project$Elm$Review$Reporter$formatFileDiff = F3(
	function (fileRemovalFixesEnabled, errorsForFile, _v0) {
		var path = _v0.hw;
		var diff = _v0.cK;
		return A2(
			$author$project$Elm$Review$Text$join,
			'\n\n',
			_List_fromArray(
				[
					_List_fromArray(
					[
						$author$project$Elm$Review$Text$inBlue(
						$author$project$Elm$Review$Text$from(
							A3($elm$core$String$padLeft, 80, '-', ' ' + path)))
					]),
					A2(
					$elm$core$List$cons,
					$author$project$Elm$Review$Text$from('Modified by the following error fixes:'),
					A2(
						$elm$core$List$concatMap,
						function (error) {
							return A2(
								$elm$core$List$cons,
								$author$project$Elm$Review$Text$from('\n'),
								A2(
									$author$project$Elm$Review$Reporter$formatErrorTitle,
									$author$project$Elm$Review$Reporter$Fixing(fileRemovalFixesEnabled),
									error));
						},
						$elm$core$List$reverse(
							A2(
								$elm$core$Maybe$withDefault,
								_List_Nil,
								A2($elm$core$Dict$get, path, errorsForFile))))),
					function () {
					if (!diff.$) {
						var before = diff.a.gy;
						var after = diff.a.d1;
						return A2($author$project$Elm$Review$Reporter$formatDiff, before, after);
					} else {
						return _List_fromArray(
							[
								$author$project$Elm$Review$Text$inRed(
								$author$project$Elm$Review$Text$from('    REMOVE FILE'))
							]);
					}
				}()
				]));
	});
var $author$project$Elm$Review$Reporter$formatFileDiffs = F3(
	function (fileRemovalFixesEnabled, errorsForFile, diffs) {
		if (!diffs.b) {
			return _List_Nil;
		} else {
			if (!diffs.b.b) {
				var diff = diffs.a;
				return A3($author$project$Elm$Review$Reporter$formatFileDiff, fileRemovalFixesEnabled, errorsForFile, diff);
			} else {
				var firstDiff = diffs.a;
				var _v1 = diffs.b;
				var secondDiff = _v1.a;
				var restOfDiffs = _v1.b;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A3($author$project$Elm$Review$Reporter$formatFileDiff, fileRemovalFixesEnabled, errorsForFile, firstDiff),
							_List_fromArray(
							[
								$author$project$Elm$Review$Text$from('\n')
							]),
							A2(
							$author$project$Elm$Review$Reporter$fileSeparator,
							$author$project$Elm$Review$Reporter$FilePath(firstDiff.hw),
							$author$project$Elm$Review$Reporter$FilePath(secondDiff.hw)),
							A3(
							$author$project$Elm$Review$Reporter$formatFileDiffs,
							fileRemovalFixesEnabled,
							errorsForFile,
							A2($elm$core$List$cons, secondDiff, restOfDiffs))
						]));
			}
		}
	});
var $elm$core$String$padRight = F3(
	function (n, _char, string) {
		return _Utils_ap(
			string,
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)));
	});
var $author$project$Elm$Review$Reporter$formatFixProposals = F3(
	function (fileRemovalFixesEnabled, errorsForFile, unsortedDiffs) {
		var fixAllHeader = $author$project$Elm$Review$Text$inBlue(
			$author$project$Elm$Review$Text$from(
				A3($elm$core$String$padRight, 80, '-', '-- ELM-REVIEW FIX-ALL PROPOSAL ')));
		var diffs = A2(
			$elm$core$List$sortBy,
			function (_v1) {
				var path = _v1.hw;
				var diff = _v1.cK;
				if (!diff.$) {
					return _Utils_Tuple2(0, path);
				} else {
					return _Utils_Tuple2(1, path);
				}
			},
			unsortedDiffs);
		var filesListing = A2(
			$elm$core$List$cons,
			$author$project$Elm$Review$Text$from('I found fixable errors for the following files:'),
			A2(
				$elm$core$List$concatMap,
				function (_v0) {
					var path = _v0.hw;
					return _List_fromArray(
						[
							$author$project$Elm$Review$Text$from('\n  '),
							$author$project$Elm$Review$Text$inYellow(
							$author$project$Elm$Review$Text$from('- ' + path))
						]);
				},
				diffs));
		var body = A2(
			$author$project$Elm$Review$Text$join,
			'\n\n',
			_List_fromArray(
				[
					_List_fromArray(
					[fixAllHeader]),
					filesListing,
					_List_fromArray(
					[
						$author$project$Elm$Review$Text$from('Here is how the code would change if you applied each fix.')
					]),
					A3($author$project$Elm$Review$Reporter$formatFileDiffs, fileRemovalFixesEnabled, errorsForFile, diffs)
				]));
		return A2(
			$elm$core$List$map,
			$author$project$Elm$Review$Text$toRecord,
			_Utils_ap(
				body,
				_List_fromArray(
					[
						$author$project$Elm$Review$Text$from('\n')
					])));
	});
var $author$project$Elm$Review$Main$sendFixPromptForMultipleFixes = F4(
	function (fileRemovalFixesEnabled, model, diffs, numberOfFixedErrors) {
		var removedFiles = A2(
			$elm$core$List$filterMap,
			function (_v7) {
				var path = _v7.hw;
				var diff = _v7.cK;
				if (!diff.$) {
					return $elm$core$Maybe$Nothing;
				} else {
					return $elm$core$Maybe$Just(path);
				}
			},
			diffs);
		var errorsForFile = A3(
			$elm$core$Dict$foldl,
			F3(
				function (_v3, errors, acc) {
					return A3(
						$elm$core$List$foldl,
						F2(
							function (error, subAcc) {
								var _v4 = $jfmengels$elm_review$Review$Rule$errorFixesV2(error);
								if (!_v4.$) {
									if (!_v4.a.$) {
										var fixedFiles = _v4.a.a;
										return A3(
											$elm$core$List$foldl,
											F2(
												function (_v5, subSubAcc) {
													var fixedFile = _v5.a;
													return A3(
														$elm$core$Dict$update,
														fixedFile,
														function (previousErrors) {
															return $elm$core$Maybe$Just(
																A2(
																	$elm$core$List$cons,
																	A3($author$project$Elm$Review$Main$fromReviewError, model.R, model.bS, error),
																	A2($elm$core$Maybe$withDefault, _List_Nil, previousErrors)));
														},
														subSubAcc);
												}),
											subAcc,
											fixedFiles);
									} else {
										var _v6 = _v4.a;
										return subAcc;
									}
								} else {
									return subAcc;
								}
							}),
						acc,
						errors);
				}),
			$elm$core$Dict$empty,
			model.aD);
		var confirmationMessage = $author$project$Elm$Review$Main$encodeReport(
			A3($author$project$Elm$Review$Reporter$formatFixProposals, fileRemovalFixesEnabled, errorsForFile, diffs));
		var changedFiles = A2(
			$elm$core$List$filterMap,
			function (_v1) {
				var path = _v1.hw;
				var diff = _v1.cK;
				if (!diff.$) {
					var after = diff.a.d1;
					return $elm$core$Maybe$Just(
						{
							hw: $author$project$Elm$Review$Reporter$FilePath(path),
							hK: after
						});
				} else {
					return $elm$core$Maybe$Nothing;
				}
			},
			diffs);
		return $author$project$Elm$Review$Main$askConfirmationToFix(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2('confirmationMessage', confirmationMessage),
						_Utils_Tuple2(
						'changedFiles',
						A2($elm$json$Json$Encode$list, $author$project$Elm$Review$Main$encodeChangedFile, changedFiles)),
						_Utils_Tuple2(
						'removedFiles',
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, removedFiles)),
						_Utils_Tuple2(
						'count',
						$elm$json$Json$Encode$int(numberOfFixedErrors)),
						_Utils_Tuple2(
						'clearFixLine',
						$elm$json$Json$Encode$bool(
							function () {
								var _v0 = model.aj;
								switch (_v0.$) {
									case 0:
										return false;
									case 1:
										return false;
									default:
										return true;
								}
							}()))
					])));
	});
var $author$project$Elm$Review$Main$sendFixPrompt = F3(
	function (fileRemovalFixesEnabled, model, diffs) {
		var _v0 = $author$project$Elm$Review$Main$numberOfErrors(model.aD);
		switch (_v0.$) {
			case 0:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 1:
				var filePath = _v0.a;
				var error = _v0.b;
				var removedFiles = A2(
					$elm$core$List$filterMap,
					function (_v3) {
						var path = _v3.hw;
						var diff = _v3.cK;
						if (!diff.$) {
							return $elm$core$Maybe$Nothing;
						} else {
							return $elm$core$Maybe$Just(path);
						}
					},
					diffs);
				var changedFiles = A2(
					$elm$core$List$filterMap,
					function (_v1) {
						var path = _v1.hw;
						var diff = _v1.cK;
						if (!diff.$) {
							var after = diff.a.d1;
							return $elm$core$Maybe$Just(
								{
									hw: $author$project$Elm$Review$Reporter$FilePath(path),
									hK: after
								});
						} else {
							return $elm$core$Maybe$Nothing;
						}
					},
					diffs);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							aC: $author$project$Elm$Review$Main$AwaitingError(error)
						}),
					$author$project$Elm$Review$Main$askConfirmationToFix(
						$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'confirmationMessage',
									$author$project$Elm$Review$Main$encodeReport(
										A6(
											$author$project$Elm$Review$Reporter$formatSingleFixProposal,
											model.ag,
											model.aE,
											fileRemovalFixesEnabled,
											A2($author$project$Elm$Review$Main$pathAndSource, model.h, filePath),
											A3($author$project$Elm$Review$Main$fromReviewError, model.R, model.bS, error),
											diffs))),
									_Utils_Tuple2(
									'changedFiles',
									A2($elm$json$Json$Encode$list, $author$project$Elm$Review$Main$encodeChangedFile, changedFiles)),
									_Utils_Tuple2(
									'removedFiles',
									A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, removedFiles)),
									_Utils_Tuple2(
									'count',
									$elm$json$Json$Encode$int(1))
								]))));
			default:
				var numberOfFixedErrors = _v0.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{aC: $author$project$Elm$Review$Main$AwaitingFixAll}),
					A4($author$project$Elm$Review$Main$sendFixPromptForMultipleFixes, fileRemovalFixesEnabled, model, diffs, numberOfFixedErrors));
		}
	});
var $author$project$Elm$Review$Main$applyFixesAfterReview = F3(
	function (model, allowPrintingSingleFix, fileRemovalFixesEnabled) {
		if ($elm$core$Dict$isEmpty(model.aD)) {
			return $author$project$Elm$Review$Main$makeReport(model);
		} else {
			var _v0 = $jfmengels$elm_review$Review$Project$diffV2(
				{d1: model.bG, gy: model.h});
			if (!_v0.b) {
				return $author$project$Elm$Review$Main$makeReport(model);
			} else {
				var diffs = _v0;
				return allowPrintingSingleFix ? A3($author$project$Elm$Review$Main$sendFixPrompt, fileRemovalFixesEnabled, model, diffs) : _Utils_Tuple2(
					_Utils_update(
						model,
						{aC: $author$project$Elm$Review$Main$AwaitingFixAll}),
					A4(
						$author$project$Elm$Review$Main$sendFixPromptForMultipleFixes,
						fileRemovalFixesEnabled,
						model,
						diffs,
						$author$project$Elm$Review$Main$countErrors(model.aD)));
			}
		}
	});
var $author$project$Elm$Review$CliCommunication$sendLoggerMessage = F2(
	function (_v0, message) {
		var hackyJson = _v0;
		return A2(
			$elm$json$Json$Decode$decodeValue,
			A2(
				$elm$json$Json$Decode$field,
				message,
				$elm$json$Json$Decode$null(0)),
			hackyJson);
	});
var $author$project$Elm$Review$CliCommunication$logInPipe = F3(
	function (key, fields, a) {
		return A2(
			$elm$core$Basics$always,
			a,
			A2(
				$author$project$Elm$Review$CliCommunication$sendLoggerMessage,
				key,
				A2(
					$elm$json$Json$Encode$encode,
					0,
					$elm$json$Json$Encode$object(fields))));
	});
var $author$project$Elm$Review$CliCommunication$timerEnd = F3(
	function (key, metric, a) {
		return A3(
			$author$project$Elm$Review$CliCommunication$logInPipe,
			key,
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('timer-end')),
					_Utils_Tuple2(
					'metric',
					$elm$json$Json$Encode$string(metric))
				]),
			a);
	});
var $author$project$Elm$Review$CliCommunication$timerStart = F3(
	function (key, metric, a) {
		return A3(
			$author$project$Elm$Review$CliCommunication$logInPipe,
			key,
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('timer-start')),
					_Utils_Tuple2(
					'metric',
					$elm$json$Json$Encode$string(metric))
				]),
			a);
	});
var $author$project$Elm$Review$Main$reportOrFix = function (model) {
	var _v0 = model.aj;
	switch (_v0.$) {
		case 0:
			return A3(
				$author$project$Elm$Review$CliCommunication$timerEnd,
				model.aV,
				'process-errors',
				$author$project$Elm$Review$Main$makeReport(
					A3($author$project$Elm$Review$CliCommunication$timerStart, model.aV, 'process-errors', model)));
		case 1:
			var fileRemovalFixesEnabled = _v0.a;
			return A3($author$project$Elm$Review$Main$applyFixesAfterReview, model, true, fileRemovalFixesEnabled);
		default:
			var fileRemovalFixesEnabled = _v0.a;
			return A3($author$project$Elm$Review$Main$applyFixesAfterReview, model, false, fileRemovalFixesEnabled);
	}
};
var $jfmengels$elm_review$Review$Options$Internal$ReviewOptionsInternal = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Options$withSuppressedErrors = F2(
	function (suppressions, _v0) {
		var reviewOptions = _v0;
		return _Utils_update(
			reviewOptions,
			{gc: suppressions});
	});
var $author$project$Elm$Review$SuppressedErrors$addToReviewOptions = F2(
	function (_v0, reviewOptions) {
		var suppressedErrors = _v0;
		return A2($jfmengels$elm_review$Review$Options$withSuppressedErrors, suppressedErrors, reviewOptions);
	});
var $jfmengels$elm_review$Review$Options$Internal$Disabled = {$: 0};
var $jfmengels$elm_review$Review$Logger$Logger = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Logger$none = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Options$defaults = {
	fj: false,
	aj: $jfmengels$elm_review$Review$Options$Internal$Disabled,
	ft: $elm$core$Basics$always(false),
	dA: $jfmengels$elm_review$Review$Logger$none,
	ga: false,
	gc: $elm$core$Dict$empty
};
var $author$project$Elm$Review$Main$isFileRemovalFixesEnabled = function (fixMode) {
	switch (fixMode.$) {
		case 0:
			return false;
		case 1:
			var fileRemovalFixesEnabled = fixMode.a;
			return fileRemovalFixesEnabled;
		default:
			var fileRemovalFixesEnabled = fixMode.a;
			return fileRemovalFixesEnabled;
	}
};
var $author$project$Elm$Review$RefusedErrorFixes$errorKeyUsingRecord = function (error) {
	return A2(
		$elm$core$String$join,
		'###',
		_List_fromArray(
			[
				error.eH,
				error.g_,
				error.a_,
				A2($elm$core$String$join, '\n', error.dd),
				A2(
				$elm$core$String$join,
				'-',
				A2(
					$elm$core$List$map,
					$elm$core$String$fromInt,
					_List_fromArray(
						[error.eG.cB.bp, error.eG.cB.a6, error.eG.b9.bp, error.eG.b9.a6])))
			]));
};
var $author$project$Elm$Review$RefusedErrorFixes$memberUsingRecord = F2(
	function (error, _v0) {
		var refusedErrorFixes = _v0;
		return A2(
			$elm$core$Set$member,
			$author$project$Elm$Review$RefusedErrorFixes$errorKeyUsingRecord(error),
			refusedErrorFixes);
	});
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (!result.$) {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $jfmengels$elm_review$Review$Error$Target$Global = {$: 1};
var $jfmengels$elm_review$Review$Error$ReviewError$ReviewError = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Error$Fixes$Edit = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Fix$Edit$InsertAt = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $jfmengels$elm_review$Review$Fix$Internal$comparePosition = F2(
	function (a, b) {
		var _v0 = A2($elm$core$Basics$compare, a.bp, b.bp);
		if (_v0 === 1) {
			return A2($elm$core$Basics$compare, a.a6, b.a6);
		} else {
			var order = _v0;
			return order;
		}
	});
var $jfmengels$elm_review$Review$Fix$Internal$compareRanges = F2(
	function (a, b) {
		var _v0 = A2($jfmengels$elm_review$Review$Fix$Internal$comparePosition, a.cB, b.cB);
		if (_v0 === 1) {
			return A2($jfmengels$elm_review$Review$Fix$Internal$comparePosition, a.b9, b.b9);
		} else {
			var order = _v0;
			return order;
		}
	});
var $jfmengels$elm_review$Review$Fix$FixProblem$EditWithNegativeRange = function (a) {
	return {$: 3, a: a};
};
var $jfmengels$elm_review$Review$Fix$FixProblem$HasCollisionsInEditRanges = function (a) {
	return {$: 4, a: a};
};
var $jfmengels$elm_review$Review$Fix$Edit$Removal = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Fix$Internal$addMaybeRemovalEdit = F2(
	function (previousRemoval, acc) {
		if (!previousRemoval.$) {
			var range = previousRemoval.a;
			return A2(
				$elm$core$List$cons,
				$jfmengels$elm_review$Review$Fix$Edit$Removal(range),
				acc);
		} else {
			return acc;
		}
	});
var $jfmengels$elm_review$Review$Fix$Internal$compileEditsHelp = F6(
	function (filePath, edits, previousStart, previousEdit, previousRemoval, acc) {
		compileEditsHelp:
		while (true) {
			if (!edits.b) {
				return $elm$core$Result$Ok(
					$elm$core$List$reverse(
						A2($jfmengels$elm_review$Review$Fix$Internal$addMaybeRemovalEdit, previousRemoval, acc)));
			} else {
				var edit = edits.a;
				var rest = edits.b;
				switch (edit.$) {
					case 2:
						if (edit.b === '') {
							var $temp$filePath = filePath,
								$temp$edits = rest,
								$temp$previousStart = previousStart,
								$temp$previousEdit = previousEdit,
								$temp$previousRemoval = previousRemoval,
								$temp$acc = acc;
							filePath = $temp$filePath;
							edits = $temp$edits;
							previousStart = $temp$previousStart;
							previousEdit = $temp$previousEdit;
							previousRemoval = $temp$previousRemoval;
							acc = $temp$acc;
							continue compileEditsHelp;
						} else {
							var position = edit.a;
							var _v2 = A2($jfmengels$elm_review$Review$Fix$Internal$comparePosition, position, previousStart);
							if (_v2 === 2) {
								return $elm$core$Result$Err(
									$jfmengels$elm_review$Review$Fix$FixProblem$HasCollisionsInEditRanges(
										{
											de: _List_fromArray(
												[edit, previousEdit]),
											g_: filePath
										}));
							} else {
								var $temp$filePath = filePath,
									$temp$edits = rest,
									$temp$previousStart = position,
									$temp$previousEdit = edit,
									$temp$previousRemoval = $elm$core$Maybe$Nothing,
									$temp$acc = A2(
									$elm$core$List$cons,
									edit,
									A2($jfmengels$elm_review$Review$Fix$Internal$addMaybeRemovalEdit, previousRemoval, acc));
								filePath = $temp$filePath;
								edits = $temp$edits;
								previousStart = $temp$previousStart;
								previousEdit = $temp$previousEdit;
								previousRemoval = $temp$previousRemoval;
								acc = $temp$acc;
								continue compileEditsHelp;
							}
						}
					case 0:
						var range = edit.a;
						var _v3 = A2($jfmengels$elm_review$Review$Fix$Internal$comparePosition, range.cB, range.b9);
						switch (_v3) {
							case 1:
								var $temp$filePath = filePath,
									$temp$edits = rest,
									$temp$previousStart = previousStart,
									$temp$previousEdit = previousEdit,
									$temp$previousRemoval = previousRemoval,
									$temp$acc = acc;
								filePath = $temp$filePath;
								edits = $temp$edits;
								previousStart = $temp$previousStart;
								previousEdit = $temp$previousEdit;
								previousRemoval = $temp$previousRemoval;
								acc = $temp$acc;
								continue compileEditsHelp;
							case 2:
								return $elm$core$Result$Err(
									$jfmengels$elm_review$Review$Fix$FixProblem$EditWithNegativeRange(
										{gR: edit, g_: filePath}));
							default:
								var _v4 = A2($jfmengels$elm_review$Review$Fix$Internal$comparePosition, range.b9, previousStart);
								switch (_v4) {
									case 2:
										if (!previousRemoval.$) {
											var end = previousRemoval.a.b9;
											var $temp$filePath = filePath,
												$temp$edits = rest,
												$temp$previousStart = range.cB,
												$temp$previousEdit = edit,
												$temp$previousRemoval = $elm$core$Maybe$Just(
												{b9: end, cB: range.cB}),
												$temp$acc = acc;
											filePath = $temp$filePath;
											edits = $temp$edits;
											previousStart = $temp$previousStart;
											previousEdit = $temp$previousEdit;
											previousRemoval = $temp$previousRemoval;
											acc = $temp$acc;
											continue compileEditsHelp;
										} else {
											return $elm$core$Result$Err(
												$jfmengels$elm_review$Review$Fix$FixProblem$HasCollisionsInEditRanges(
													{
														de: _List_fromArray(
															[edit, previousEdit]),
														g_: filePath
													}));
										}
									case 1:
										if (!previousRemoval.$) {
											var end = previousRemoval.a.b9;
											var $temp$filePath = filePath,
												$temp$edits = rest,
												$temp$previousStart = range.cB,
												$temp$previousEdit = edit,
												$temp$previousRemoval = $elm$core$Maybe$Just(
												{b9: end, cB: range.cB}),
												$temp$acc = acc;
											filePath = $temp$filePath;
											edits = $temp$edits;
											previousStart = $temp$previousStart;
											previousEdit = $temp$previousEdit;
											previousRemoval = $temp$previousRemoval;
											acc = $temp$acc;
											continue compileEditsHelp;
										} else {
											var $temp$filePath = filePath,
												$temp$edits = rest,
												$temp$previousStart = range.cB,
												$temp$previousEdit = edit,
												$temp$previousRemoval = $elm$core$Maybe$Just(range),
												$temp$acc = A2($jfmengels$elm_review$Review$Fix$Internal$addMaybeRemovalEdit, previousRemoval, acc);
											filePath = $temp$filePath;
											edits = $temp$edits;
											previousStart = $temp$previousStart;
											previousEdit = $temp$previousEdit;
											previousRemoval = $temp$previousRemoval;
											acc = $temp$acc;
											continue compileEditsHelp;
										}
									default:
										var $temp$filePath = filePath,
											$temp$edits = rest,
											$temp$previousStart = range.cB,
											$temp$previousEdit = edit,
											$temp$previousRemoval = $elm$core$Maybe$Just(range),
											$temp$acc = A2($jfmengels$elm_review$Review$Fix$Internal$addMaybeRemovalEdit, previousRemoval, acc);
										filePath = $temp$filePath;
										edits = $temp$edits;
										previousStart = $temp$previousStart;
										previousEdit = $temp$previousEdit;
										previousRemoval = $temp$previousRemoval;
										acc = $temp$acc;
										continue compileEditsHelp;
								}
						}
					default:
						var range = edit.a;
						var _v7 = A2($jfmengels$elm_review$Review$Fix$Internal$comparePosition, range.cB, range.b9);
						if (_v7 === 2) {
							return $elm$core$Result$Err(
								$jfmengels$elm_review$Review$Fix$FixProblem$EditWithNegativeRange(
									{gR: edit, g_: filePath}));
						} else {
							var _v8 = A2($jfmengels$elm_review$Review$Fix$Internal$comparePosition, range.b9, previousStart);
							if (_v8 === 2) {
								return $elm$core$Result$Err(
									$jfmengels$elm_review$Review$Fix$FixProblem$HasCollisionsInEditRanges(
										{
											de: _List_fromArray(
												[edit, previousEdit]),
											g_: filePath
										}));
							} else {
								var $temp$filePath = filePath,
									$temp$edits = rest,
									$temp$previousStart = range.cB,
									$temp$previousEdit = edit,
									$temp$previousRemoval = $elm$core$Maybe$Nothing,
									$temp$acc = A2(
									$elm$core$List$cons,
									edit,
									A2($jfmengels$elm_review$Review$Fix$Internal$addMaybeRemovalEdit, previousRemoval, acc));
								filePath = $temp$filePath;
								edits = $temp$edits;
								previousStart = $temp$previousStart;
								previousEdit = $temp$previousEdit;
								previousRemoval = $temp$previousRemoval;
								acc = $temp$acc;
								continue compileEditsHelp;
							}
						}
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Fix$Internal$getEditRange = function (edit) {
	switch (edit.$) {
		case 1:
			var range = edit.a;
			return range;
		case 0:
			var range = edit.a;
			return range;
		default:
			var position = edit.a;
			return {b9: position, cB: position};
	}
};
var $elm$core$Basics$round = _Basics_round;
var $jfmengels$elm_review$Review$Fix$Internal$infinity = $elm$core$Basics$round(1 / 0);
var $jfmengels$elm_review$Review$Fix$Internal$compileEdits = F2(
	function (filePath, edits) {
		return A6(
			$jfmengels$elm_review$Review$Fix$Internal$compileEditsHelp,
			filePath,
			A2(
				$elm$core$List$sortWith,
				F2(
					function (a, b) {
						return A2(
							$jfmengels$elm_review$Review$Fix$Internal$compareRanges,
							$jfmengels$elm_review$Review$Fix$Internal$getEditRange(b),
							$jfmengels$elm_review$Review$Fix$Internal$getEditRange(a));
					}),
				edits),
			{a6: $jfmengels$elm_review$Review$Fix$Internal$infinity, bp: $jfmengels$elm_review$Review$Fix$Internal$infinity},
			A2(
				$jfmengels$elm_review$Review$Fix$Edit$InsertAt,
				{a6: $jfmengels$elm_review$Review$Fix$Internal$infinity, bp: $jfmengels$elm_review$Review$Fix$Internal$infinity},
				''),
			$elm$core$Maybe$Nothing,
			_List_Nil);
	});
var $jfmengels$elm_review$Review$Error$ReviewError$compileFixesHelp = F2(
	function (fixes, acc) {
		compileFixesHelp:
		while (true) {
			if (!fixes.b) {
				return $elm$core$Result$Ok(acc);
			} else {
				var _v1 = fixes.a;
				var target = _v1.a;
				var fixKind = _v1.b;
				var rest = fixes.b;
				var fix = function () {
					if (!fixKind.$) {
						var edits = fixKind.a;
						return A2(
							$elm$core$Result$map,
							$jfmengels$elm_review$Review$Error$Fixes$Edit,
							A2(
								$jfmengels$elm_review$Review$Fix$Internal$compileEdits,
								$jfmengels$elm_review$Review$Error$FileTarget$filePath(target),
								edits));
					} else {
						return $elm$core$Result$Ok(fixKind);
					}
				}();
				if (!fix.$) {
					var fix_ = fix.a;
					var $temp$fixes = rest,
						$temp$acc = A2(
						$elm$core$List$cons,
						_Utils_Tuple2(target, fix_),
						acc);
					fixes = $temp$fixes;
					acc = $temp$acc;
					continue compileFixesHelp;
				} else {
					var err = fix.a;
					return $elm$core$Result$Err(err);
				}
			}
		}
	});
var $jfmengels$elm_review$SimpleAssocList$isEmpty = function (_v0) {
	var list = _v0;
	return $elm$core$List$isEmpty(list);
};
var $jfmengels$elm_review$Review$Error$Fixes$isEmpty = function (_v0) {
	var dict = _v0;
	return $jfmengels$elm_review$SimpleAssocList$isEmpty(dict);
};
var $jfmengels$elm_review$SimpleAssocList$toList = function (_v0) {
	var list = _v0;
	return list;
};
var $jfmengels$elm_review$Review$Error$Fixes$toList = function (_v0) {
	var dict = _v0;
	return $jfmengels$elm_review$SimpleAssocList$toList(dict);
};
var $jfmengels$elm_review$Review$Error$ReviewError$compileFixes = F2(
	function (fixes, maybeFixProblem) {
		if (!maybeFixProblem.$) {
			var fixProblem = maybeFixProblem.a;
			return $elm$core$Result$Err(fixProblem);
		} else {
			return $jfmengels$elm_review$Review$Error$Fixes$isEmpty(fixes) ? $elm$core$Result$Ok($elm$core$Maybe$Nothing) : A2(
				$elm$core$Result$map,
				$elm$core$Maybe$Just,
				A2(
					$jfmengels$elm_review$Review$Error$ReviewError$compileFixesHelp,
					$jfmengels$elm_review$Review$Error$Fixes$toList(fixes),
					_List_Nil));
		}
	});
var $jfmengels$elm_review$Review$Error$ReviewError$fromBaseError = function (internalError) {
	return {
		dd: internalError.dd,
		g_: internalError.g_,
		fm: internalError.fm,
		cT: A2($jfmengels$elm_review$Review$Error$ReviewError$compileFixes, internalError.cT, internalError.fm),
		a_: internalError.a_,
		eC: internalError.cT,
		dJ: internalError.dJ,
		eG: internalError.eG,
		eH: internalError.eH,
		dX: internalError.dX
	};
};
var $jfmengels$elm_review$Review$Rule$collectConfigurationErrors = function (rules) {
	return A2(
		$elm$core$List$filterMap,
		function (_v0) {
			var rule = _v0;
			var _v1 = rule.as;
			if (_v1.$ === 1) {
				var message = _v1.a.a_;
				var details = _v1.a.dd;
				return $elm$core$Maybe$Just(
					$jfmengels$elm_review$Review$Error$ReviewError$fromBaseError(
						{dd: details, g_: 'CONFIGURATION ERROR', fm: $elm$core$Maybe$Nothing, cT: $jfmengels$elm_review$Review$Error$Fixes$none, a_: message, dJ: false, eG: $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, eH: rule.bV, dX: $jfmengels$elm_review$Review$Error$Target$Global}));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		},
		rules);
};
var $jfmengels$elm_review$Review$Rule$checkForConfigurationErrors = F3(
	function (project, rules, rulesToRunAcc) {
		checkForConfigurationErrors:
		while (true) {
			if (!rules.b) {
				return $elm$core$Result$Ok(rulesToRunAcc);
			} else {
				var rule = rules.a;
				var remainingRules = rules.b;
				var _v1 = rule.as;
				if (!_v1.$) {
					var ruleProjectVisitor = _v1.a;
					var $temp$project = project,
						$temp$rules = remainingRules,
						$temp$rulesToRunAcc = A2(
						$elm$core$List$cons,
						A2(
							ruleProjectVisitor,
							project,
							{w: rule.w, hG: rule.hG, c5: rule.dr}),
						rulesToRunAcc);
					project = $temp$project;
					rules = $temp$rules;
					rulesToRunAcc = $temp$rulesToRunAcc;
					continue checkForConfigurationErrors;
				} else {
					return $elm$core$Result$Err(
						$jfmengels$elm_review$Review$Rule$collectConfigurationErrors(rules));
				}
			}
		}
	});
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $jfmengels$elm_review$Review$Rule$elmReviewGlobalError = function (params) {
	return {dd: params.dd, g_: 'GLOBAL ERROR', fm: $elm$core$Maybe$Nothing, cT: $jfmengels$elm_review$Review$Error$Fixes$none, a_: params.a_, dJ: false, eG: $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, eH: params.eH, dX: $jfmengels$elm_review$Review$Error$Target$Global};
};
var $jfmengels$elm_review$Review$Rule$errorToReviewError = function (_v0) {
	var err = _v0;
	return $jfmengels$elm_review$Review$Error$ReviewError$fromBaseError(err);
};
var $elm$core$List$sort = function (xs) {
	return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
};
var $jfmengels$elm_review$Review$Rule$duplicateModulesGlobalError = function (duplicate) {
	var paths = $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			function (s) {
				return '\n  - ' + s;
			},
			$elm$core$List$sort(duplicate.hx)));
	return $jfmengels$elm_review$Review$Rule$errorToReviewError(
		$jfmengels$elm_review$Review$Rule$elmReviewGlobalError(
			{
				dd: _List_fromArray(
					[
						'I found several modules with the name `' + (A2($elm$core$String$join, '.', duplicate.dE) + '`. Depending on how I choose to resolve this, I might give you different reports. Since this is a compiler error anyway, I require this problem to be solved. Please fix this then try running `elm-review` again.'),
						'Here are the paths to some of the files that share a module name:' + paths,
						'It is possible that you requested me to look at several projects, and that modules from each project share the same name. I don\'t recommend reviewing several projects at the same time, as I can only handle one `elm.json`. I instead suggest running `elm-review` twice, once for each project.'
					]),
				a_: 'Found several modules named `' + (A2($elm$core$String$join, '.', duplicate.dE) + '`'),
				eH: 'Incorrect project'
			}));
};
var $jfmengels$elm_review$Review$ImportCycle$wrapInCycle = function (string) {
	return '    ┌─────┐\n    │    ' + (string + '\n    └─────┘');
};
var $jfmengels$elm_review$Ansi$noColor = '\u001B[39m';
var $jfmengels$elm_review$Ansi$applyColor = F2(
	function (color, string) {
		return $elm$core$String$concat(
			_List_fromArray(
				['\u001B[' + (color + 'm'), string, $jfmengels$elm_review$Ansi$noColor]));
	});
var $jfmengels$elm_review$Ansi$yellow = $jfmengels$elm_review$Ansi$applyColor('33');
var $jfmengels$elm_review$Review$ImportCycle$printCycle = function (moduleNames) {
	return $jfmengels$elm_review$Review$ImportCycle$wrapInCycle(
		A2(
			$elm$core$String$join,
			'\n    │     ↓\n    │    ',
			A2($elm$core$List$map, $jfmengels$elm_review$Ansi$yellow, moduleNames)));
};
var $jfmengels$elm_review$Review$ImportCycle$error = F2(
	function (ruleName, cycle) {
		return {
			dd: _List_fromArray(
				[
					$jfmengels$elm_review$Review$ImportCycle$printCycle(cycle),
					'Learn more about why this is disallowed and how to break cycles here:<https://elm-lang.org/0.19.1/import-cycles>'
				]),
			a_: 'Your module imports form a cycle',
			eH: ruleName
		};
	});
var $jfmengels$elm_review$Review$Rule$importCycleError = function (cycle) {
	return $jfmengels$elm_review$Review$Rule$errorToReviewError(
		$jfmengels$elm_review$Review$Rule$elmReviewGlobalError(
			A2($jfmengels$elm_review$Review$ImportCycle$error, 'Incorrect project', cycle)));
};
var $jfmengels$elm_review$Review$Project$InvalidProjectError$DuplicateModuleNames = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Review$Project$InvalidProjectError$ImportCycleError = function (a) {
	return {$: 2, a: a};
};
var $jfmengels$elm_review$Review$Project$InvalidProjectError$NoModulesError = {$: 3};
var $jfmengels$elm_review$Review$Project$InvalidProjectError$SomeModulesFailedToParse = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Vendor$Graph$Graph = $elm$core$Basics$identity;
var $jfmengels$elm_review$Vendor$Graph$NodeContext = F3(
	function (node, incoming, outgoing) {
		return {g7: incoming, fP: node, m: outgoing};
	});
var $jfmengels$elm_review$Vendor$IntDict$Empty = {$: 0};
var $jfmengels$elm_review$Vendor$IntDict$empty = $jfmengels$elm_review$Vendor$IntDict$Empty;
var $jfmengels$elm_review$Vendor$IntDict$Inner = function (a) {
	return {$: 2, a: a};
};
var $jfmengels$elm_review$Vendor$IntDict$size = function (dict) {
	switch (dict.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		default:
			var i = dict.a;
			return i.bZ;
	}
};
var $jfmengels$elm_review$Vendor$IntDict$inner = F3(
	function (p, l, r) {
		var _v0 = _Utils_Tuple2(l, r);
		if (!_v0.a.$) {
			var _v1 = _v0.a;
			return r;
		} else {
			if (!_v0.b.$) {
				var _v2 = _v0.b;
				return l;
			} else {
				return $jfmengels$elm_review$Vendor$IntDict$Inner(
					{
						g: l,
						l: p,
						i: r,
						bZ: $jfmengels$elm_review$Vendor$IntDict$size(l) + $jfmengels$elm_review$Vendor$IntDict$size(r)
					});
			}
		}
	});
var $jfmengels$elm_review$Vendor$IntDict$lcp = F2(
	function (x, y) {
		var branchingBit = $jfmengels$elm_review$Vendor$IntDict$highestBitSet(x ^ y);
		var mask = $jfmengels$elm_review$Vendor$IntDict$higherBitMask(branchingBit);
		var prefixBits = x & mask;
		return {b3: branchingBit, aN: prefixBits};
	});
var $jfmengels$elm_review$Vendor$IntDict$Leaf = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Vendor$IntDict$leaf = F2(
	function (k, v) {
		return $jfmengels$elm_review$Vendor$IntDict$Leaf(
			{cZ: k, c: v});
	});
var $jfmengels$elm_review$Vendor$IntDict$update = F3(
	function (key, alter, dict) {
		var join = F2(
			function (_v2, _v3) {
				var k1 = _v2.a;
				var l = _v2.b;
				var k2 = _v3.a;
				var r = _v3.b;
				var prefix = A2($jfmengels$elm_review$Vendor$IntDict$lcp, k1, k2);
				return A2($jfmengels$elm_review$Vendor$IntDict$isBranchingBitSet, prefix, k2) ? A3($jfmengels$elm_review$Vendor$IntDict$inner, prefix, l, r) : A3($jfmengels$elm_review$Vendor$IntDict$inner, prefix, r, l);
			});
		var alteredNode = function (mv) {
			var _v1 = alter(mv);
			if (!_v1.$) {
				var v = _v1.a;
				return A2($jfmengels$elm_review$Vendor$IntDict$leaf, key, v);
			} else {
				return $jfmengels$elm_review$Vendor$IntDict$empty;
			}
		};
		switch (dict.$) {
			case 0:
				return alteredNode($elm$core$Maybe$Nothing);
			case 1:
				var l = dict.a;
				return _Utils_eq(l.cZ, key) ? alteredNode(
					$elm$core$Maybe$Just(l.c)) : A2(
					join,
					_Utils_Tuple2(
						key,
						alteredNode($elm$core$Maybe$Nothing)),
					_Utils_Tuple2(l.cZ, dict));
			default:
				var i = dict.a;
				return A2($jfmengels$elm_review$Vendor$IntDict$prefixMatches, i.l, key) ? (A2($jfmengels$elm_review$Vendor$IntDict$isBranchingBitSet, i.l, key) ? A3(
					$jfmengels$elm_review$Vendor$IntDict$inner,
					i.l,
					i.g,
					A3($jfmengels$elm_review$Vendor$IntDict$update, key, alter, i.i)) : A3(
					$jfmengels$elm_review$Vendor$IntDict$inner,
					i.l,
					A3($jfmengels$elm_review$Vendor$IntDict$update, key, alter, i.g),
					i.i)) : A2(
					join,
					_Utils_Tuple2(
						key,
						alteredNode($elm$core$Maybe$Nothing)),
					_Utils_Tuple2(i.l.aN, dict));
		}
	});
var $jfmengels$elm_review$Vendor$IntDict$insert = F3(
	function (key, value, dict) {
		return A3(
			$jfmengels$elm_review$Vendor$IntDict$update,
			key,
			$elm$core$Basics$always(
				$elm$core$Maybe$Just(value)),
			dict);
	});
var $jfmengels$elm_review$Vendor$IntDict$member = F2(
	function (key, dict) {
		var _v0 = A2($jfmengels$elm_review$Vendor$IntDict$get, key, dict);
		if (!_v0.$) {
			return true;
		} else {
			return false;
		}
	});
var $jfmengels$elm_review$Vendor$Graph$fromNodesAndEdges = F2(
	function (nodes_, edges_) {
		var nodeRep = A3(
			$elm$core$List$foldl,
			function (n) {
				return A2(
					$jfmengels$elm_review$Vendor$IntDict$insert,
					n.dr,
					A3($jfmengels$elm_review$Vendor$Graph$NodeContext, n, $jfmengels$elm_review$Vendor$IntDict$empty, $jfmengels$elm_review$Vendor$IntDict$empty));
			},
			$jfmengels$elm_review$Vendor$IntDict$empty,
			nodes_);
		var addEdge = F2(
			function (edge, rep) {
				var updateOutgoing = function (ctx) {
					return _Utils_update(
						ctx,
						{
							m: A3($jfmengels$elm_review$Vendor$IntDict$insert, edge.hT, edge.c_, ctx.m)
						});
				};
				var updateIncoming = function (ctx) {
					return _Utils_update(
						ctx,
						{
							g7: A3($jfmengels$elm_review$Vendor$IntDict$insert, edge.g1, edge.c_, ctx.g7)
						});
				};
				return A3(
					$jfmengels$elm_review$Vendor$IntDict$update,
					edge.hT,
					$elm$core$Maybe$map(updateIncoming),
					A3(
						$jfmengels$elm_review$Vendor$IntDict$update,
						edge.g1,
						$elm$core$Maybe$map(updateOutgoing),
						rep));
			});
		var addEdgeIfValid = F2(
			function (edge, rep) {
				return (A2($jfmengels$elm_review$Vendor$IntDict$member, edge.g1, rep) && A2($jfmengels$elm_review$Vendor$IntDict$member, edge.hT, rep)) ? A2(addEdge, edge, rep) : rep;
			});
		return A3($elm$core$List$foldl, addEdgeIfValid, nodeRep, edges_);
	});
var $jfmengels$elm_review$Review$Project$ProjectModule$moduleName = function (_v0) {
	var module_ = _v0;
	return module_.dE;
};
var $jfmengels$elm_review$Vendor$Graph$Edge = F3(
	function (from, to, label) {
		return {g1: from, c_: label, hT: to};
	});
var $jfmengels$elm_review$Vendor$Graph$Node = F2(
	function (id, label) {
		return {dr: id, c_: label};
	});
var $jfmengels$elm_review$Review$Project$ProjectModule$ast = function (_v0) {
	var module_ = _v0;
	return module_.gv;
};
var $jfmengels$elm_review$Review$Project$Valid$importedModules = function (module_) {
	return A2(
		$elm$core$List$map,
		A2(
			$elm$core$Basics$composeR,
			$stil4m$elm_syntax$Elm$Syntax$Node$value,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.dE;
				},
				$stil4m$elm_syntax$Elm$Syntax$Node$value)),
		$jfmengels$elm_review$Review$Project$ProjectModule$ast(module_).g4);
};
var $jfmengels$elm_review$Review$Project$Valid$nodesAndEdges = F3(
	function (getModuleId, module_, moduleId) {
		return _Utils_Tuple2(
			A2(
				$jfmengels$elm_review$Vendor$Graph$Node,
				moduleId,
				$jfmengels$elm_review$Review$Project$ProjectModule$path(module_)),
			A2(
				$elm$core$List$map,
				function (importedModuleId) {
					return A3($jfmengels$elm_review$Vendor$Graph$Edge, importedModuleId, moduleId, 0);
				},
				A2(
					$elm$core$List$filterMap,
					getModuleId,
					$jfmengels$elm_review$Review$Project$Valid$importedModules(module_))));
	});
var $jfmengels$elm_review$Review$Project$Valid$buildModuleGraph = function (mods) {
	var moduleIds = A3(
		$elm$core$Dict$foldl,
		F3(
			function (_v5, module_, _v6) {
				var index = _v6.a;
				var dict = _v6.b;
				return _Utils_Tuple2(
					index + 1,
					A3(
						$elm$core$Dict$insert,
						$jfmengels$elm_review$Review$Project$ProjectModule$moduleName(module_),
						index,
						dict));
			}),
		_Utils_Tuple2(0, $elm$core$Dict$empty),
		mods).b;
	var getModuleId = function (moduleName) {
		getModuleId:
		while (true) {
			var _v0 = A2($elm$core$Dict$get, moduleName, moduleIds);
			if (!_v0.$) {
				var moduleId = _v0.a;
				return moduleId;
			} else {
				var $temp$moduleName = moduleName;
				moduleName = $temp$moduleName;
				continue getModuleId;
			}
		}
	};
	var _v1 = A3(
		$elm$core$Dict$foldl,
		F3(
			function (_v2, module_, _v3) {
				var resNodes = _v3.a;
				var resEdges = _v3.b;
				var _v4 = A3(
					$jfmengels$elm_review$Review$Project$Valid$nodesAndEdges,
					function (moduleName) {
						return A2($elm$core$Dict$get, moduleName, moduleIds);
					},
					module_,
					getModuleId(
						$jfmengels$elm_review$Review$Project$ProjectModule$moduleName(module_)));
				var moduleNode = _v4.a;
				var modulesEdges = _v4.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, moduleNode, resNodes),
					_Utils_ap(modulesEdges, resEdges));
			}),
		_Utils_Tuple2(_List_Nil, _List_Nil),
		mods);
	var nodes = _v1.a;
	var edges = _v1.b;
	return A2($jfmengels$elm_review$Vendor$Graph$fromNodesAndEdges, nodes, edges);
};
var $jfmengels$elm_review$Vendor$Graph$AcyclicGraph = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review$Vendor$IntDict$findMin = function (dict) {
	findMin:
	while (true) {
		switch (dict.$) {
			case 0:
				return $elm$core$Maybe$Nothing;
			case 1:
				var l = dict.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(l.cZ, l.c));
			default:
				var i = dict.a;
				var $temp$dict = i.g;
				dict = $temp$dict;
				continue findMin;
		}
	}
};
var $jfmengels$elm_review$Vendor$IntDict$Disjunct = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $jfmengels$elm_review$Vendor$IntDict$Left = 0;
var $jfmengels$elm_review$Vendor$IntDict$Parent = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $jfmengels$elm_review$Vendor$IntDict$Right = 1;
var $jfmengels$elm_review$Vendor$IntDict$SamePrefix = {$: 0};
var $jfmengels$elm_review$Vendor$IntDict$combineBits = F3(
	function (a, b, mask) {
		return (a & (~mask)) | (b & mask);
	});
var $jfmengels$elm_review$Vendor$IntDict$mostSignificantBranchingBit = F2(
	function (a, b) {
		return (_Utils_eq(a, $jfmengels$elm_review$Vendor$IntDict$signBit) || _Utils_eq(b, $jfmengels$elm_review$Vendor$IntDict$signBit)) ? $jfmengels$elm_review$Vendor$IntDict$signBit : A2($elm$core$Basics$max, a, b);
	});
var $jfmengels$elm_review$Vendor$IntDict$determineBranchRelation = F2(
	function (l, r) {
		var rp = r.l;
		var lp = l.l;
		var mask = $jfmengels$elm_review$Vendor$IntDict$highestBitSet(
			A2($jfmengels$elm_review$Vendor$IntDict$mostSignificantBranchingBit, lp.b3, rp.b3));
		var modifiedRightPrefix = A3($jfmengels$elm_review$Vendor$IntDict$combineBits, rp.aN, ~lp.aN, mask);
		var prefix = A2($jfmengels$elm_review$Vendor$IntDict$lcp, lp.aN, modifiedRightPrefix);
		var childEdge = F2(
			function (branchPrefix, c) {
				return A2($jfmengels$elm_review$Vendor$IntDict$isBranchingBitSet, branchPrefix, c.l.aN) ? 1 : 0;
			});
		return _Utils_eq(lp, rp) ? $jfmengels$elm_review$Vendor$IntDict$SamePrefix : (_Utils_eq(prefix, lp) ? A2(
			$jfmengels$elm_review$Vendor$IntDict$Parent,
			0,
			A2(childEdge, l.l, r)) : (_Utils_eq(prefix, rp) ? A2(
			$jfmengels$elm_review$Vendor$IntDict$Parent,
			1,
			A2(childEdge, r.l, l)) : A2(
			$jfmengels$elm_review$Vendor$IntDict$Disjunct,
			prefix,
			A2(childEdge, prefix, l))));
	});
var $jfmengels$elm_review$Vendor$IntDict$intersect = F2(
	function (l, r) {
		intersect:
		while (true) {
			var _v0 = _Utils_Tuple2(l, r);
			_v0$1:
			while (true) {
				_v0$2:
				while (true) {
					switch (_v0.a.$) {
						case 0:
							var _v1 = _v0.a;
							return $jfmengels$elm_review$Vendor$IntDict$Empty;
						case 1:
							switch (_v0.b.$) {
								case 0:
									break _v0$1;
								case 1:
									break _v0$2;
								default:
									break _v0$2;
							}
						default:
							switch (_v0.b.$) {
								case 0:
									break _v0$1;
								case 1:
									var lr = _v0.b.a;
									var _v3 = A2($jfmengels$elm_review$Vendor$IntDict$get, lr.cZ, l);
									if (!_v3.$) {
										var v = _v3.a;
										return A2($jfmengels$elm_review$Vendor$IntDict$leaf, lr.cZ, v);
									} else {
										return $jfmengels$elm_review$Vendor$IntDict$Empty;
									}
								default:
									var il = _v0.a.a;
									var ir = _v0.b.a;
									var _v4 = A2($jfmengels$elm_review$Vendor$IntDict$determineBranchRelation, il, ir);
									switch (_v4.$) {
										case 0:
											return A3(
												$jfmengels$elm_review$Vendor$IntDict$inner,
												il.l,
												A2($jfmengels$elm_review$Vendor$IntDict$intersect, il.g, ir.g),
												A2($jfmengels$elm_review$Vendor$IntDict$intersect, il.i, ir.i));
										case 1:
											if (!_v4.a) {
												if (_v4.b === 1) {
													var _v5 = _v4.a;
													var _v6 = _v4.b;
													var $temp$l = il.i,
														$temp$r = r;
													l = $temp$l;
													r = $temp$r;
													continue intersect;
												} else {
													var _v9 = _v4.a;
													var _v10 = _v4.b;
													var $temp$l = il.g,
														$temp$r = r;
													l = $temp$l;
													r = $temp$r;
													continue intersect;
												}
											} else {
												if (_v4.b === 1) {
													var _v7 = _v4.a;
													var _v8 = _v4.b;
													var $temp$l = l,
														$temp$r = ir.i;
													l = $temp$l;
													r = $temp$r;
													continue intersect;
												} else {
													var _v11 = _v4.a;
													var _v12 = _v4.b;
													var $temp$l = l,
														$temp$r = ir.g;
													l = $temp$l;
													r = $temp$r;
													continue intersect;
												}
											}
										default:
											return $jfmengels$elm_review$Vendor$IntDict$Empty;
									}
							}
					}
				}
				var ll = _v0.a.a;
				return A2($jfmengels$elm_review$Vendor$IntDict$member, ll.cZ, r) ? l : $jfmengels$elm_review$Vendor$IntDict$Empty;
			}
			var _v2 = _v0.b;
			return $jfmengels$elm_review$Vendor$IntDict$Empty;
		}
	});
var $jfmengels$elm_review$Vendor$Graph$crashHack = function (msg) {
	crashHack:
	while (true) {
		var $temp$msg = msg;
		msg = $temp$msg;
		continue crashHack;
	}
};
var $jfmengels$elm_review$Vendor$Graph$unsafeGet = F3(
	function (msg, id, graph) {
		var _v0 = A2($jfmengels$elm_review$Vendor$Graph$get, id, graph);
		if (_v0.$ === 1) {
			return $jfmengels$elm_review$Vendor$Graph$crashHack(msg);
		} else {
			var ctx = _v0.a;
			return ctx;
		}
	});
var $jfmengels$elm_review$Vendor$Graph$checkForBackEdges = F2(
	function (ordering, graph) {
		var success = function (_v3) {
			return A2($jfmengels$elm_review$Vendor$Graph$AcyclicGraph, graph, ordering);
		};
		var check = F2(
			function (id, _v2) {
				var backSet = _v2.a;
				var error = 'Graph.checkForBackEdges: `ordering` didn\'t contain `id`';
				var ctx = A3($jfmengels$elm_review$Vendor$Graph$unsafeGet, error, id, graph);
				var backSetWithId = A3($jfmengels$elm_review$Vendor$IntDict$insert, id, 0, backSet);
				var backEdges = A2($jfmengels$elm_review$Vendor$IntDict$intersect, ctx.m, backSetWithId);
				var _v0 = $jfmengels$elm_review$Vendor$IntDict$findMin(backEdges);
				if (_v0.$ === 1) {
					return $elm$core$Result$Ok(
						_Utils_Tuple2(backSetWithId, 0));
				} else {
					var _v1 = _v0.a;
					var to = _v1.a;
					var label = _v1.b;
					return $elm$core$Result$Err(
						A3($jfmengels$elm_review$Vendor$Graph$Edge, id, to, label));
				}
			});
		return A2(
			$elm$core$Result$map,
			success,
			A3(
				$elm$core$List$foldl,
				F2(
					function (id, res) {
						return A2(
							$elm$core$Result$andThen,
							check(id),
							res);
					}),
				$elm$core$Result$Ok(
					_Utils_Tuple2($jfmengels$elm_review$Vendor$IntDict$empty, 0)),
				ordering));
	});
var $jfmengels$elm_review$Vendor$IntDict$foldr = F3(
	function (f, acc, dict) {
		foldr:
		while (true) {
			switch (dict.$) {
				case 0:
					return acc;
				case 1:
					var l = dict.a;
					return A3(f, l.cZ, l.c, acc);
				default:
					var i = dict.a;
					var $temp$f = f,
						$temp$acc = A3($jfmengels$elm_review$Vendor$IntDict$foldr, f, acc, i.i),
						$temp$dict = i.g;
					f = $temp$f;
					acc = $temp$acc;
					dict = $temp$dict;
					continue foldr;
			}
		}
	});
var $jfmengels$elm_review$Vendor$IntDict$keys = function (dict) {
	return A3(
		$jfmengels$elm_review$Vendor$IntDict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $jfmengels$elm_review$Vendor$Graph$alongOutgoingEdges = function (ctx) {
	return $jfmengels$elm_review$Vendor$IntDict$keys(ctx.m);
};
var $jfmengels$elm_review$Vendor$Graph$applyEdgeDiff = F3(
	function (nodeId, diff, graphRep) {
		var updateOutgoingEdge = F2(
			function (upd, node) {
				return _Utils_update(
					node,
					{
						m: A3($jfmengels$elm_review$Vendor$IntDict$update, nodeId, upd, node.m)
					});
			});
		var updateIncomingEdge = F2(
			function (upd, node) {
				return _Utils_update(
					node,
					{
						g7: A3($jfmengels$elm_review$Vendor$IntDict$update, nodeId, upd, node.g7)
					});
			});
		var flippedFoldl = F3(
			function (f, dict, acc) {
				return A3($jfmengels$elm_review$Vendor$IntDict$foldl, f, acc, dict);
			});
		var edgeUpdateToMaybe = function (edgeUpdate) {
			if (!edgeUpdate.$) {
				var lbl = edgeUpdate.a;
				return $elm$core$Maybe$Just(lbl);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var updateAdjacency = F3(
			function (updateEdge, updatedId, edgeUpdate) {
				var updateLbl = updateEdge(
					$elm$core$Basics$always(
						edgeUpdateToMaybe(edgeUpdate)));
				return A2(
					$jfmengels$elm_review$Vendor$IntDict$update,
					updatedId,
					$elm$core$Maybe$map(updateLbl));
			});
		return A3(
			flippedFoldl,
			updateAdjacency(updateOutgoingEdge),
			diff.m,
			A3(
				flippedFoldl,
				updateAdjacency(updateIncomingEdge),
				diff.g7,
				graphRep));
	});
var $jfmengels$elm_review$Vendor$Graph$Insert = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Vendor$Graph$Remove = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Vendor$Graph$emptyDiff = {g7: $jfmengels$elm_review$Vendor$IntDict$empty, m: $jfmengels$elm_review$Vendor$IntDict$empty};
var $jfmengels$elm_review$Vendor$Graph$computeEdgeDiff = F2(
	function (old, _new) {
		var collectUpdates = F3(
			function (edgeUpdate, updatedId, label) {
				var replaceUpdate = function (old_) {
					var _v5 = _Utils_Tuple2(
						old_,
						edgeUpdate(label));
					if (!_v5.a.$) {
						if (_v5.a.a.$ === 1) {
							if (!_v5.b.$) {
								var oldLbl = _v5.a.a.a;
								var newLbl = _v5.b.a;
								return _Utils_eq(oldLbl, newLbl) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
									$jfmengels$elm_review$Vendor$Graph$Insert(newLbl));
							} else {
								return $jfmengels$elm_review$Vendor$Graph$crashHack('Graph.computeEdgeDiff: Collected two removals for the same edge. This is an error in the implementation of Graph and you should file a bug report!');
							}
						} else {
							return $jfmengels$elm_review$Vendor$Graph$crashHack('Graph.computeEdgeDiff: Collected inserts before removals. This is an error in the implementation of Graph and you should file a bug report!');
						}
					} else {
						var _v6 = _v5.a;
						var eu = _v5.b;
						return $elm$core$Maybe$Just(eu);
					}
				};
				return A2($jfmengels$elm_review$Vendor$IntDict$update, updatedId, replaceUpdate);
			});
		var collect = F3(
			function (edgeUpdate, adj, updates) {
				return A3(
					$jfmengels$elm_review$Vendor$IntDict$foldl,
					collectUpdates(edgeUpdate),
					updates,
					adj);
			});
		var _v0 = _Utils_Tuple2(old, _new);
		if (_v0.a.$ === 1) {
			if (_v0.b.$ === 1) {
				var _v1 = _v0.a;
				var _v2 = _v0.b;
				return $jfmengels$elm_review$Vendor$Graph$emptyDiff;
			} else {
				var _v4 = _v0.a;
				var ins = _v0.b.a;
				return {
					g7: A3(collect, $jfmengels$elm_review$Vendor$Graph$Insert, ins.m, $jfmengels$elm_review$Vendor$IntDict$empty),
					m: A3(collect, $jfmengels$elm_review$Vendor$Graph$Insert, ins.g7, $jfmengels$elm_review$Vendor$IntDict$empty)
				};
			}
		} else {
			if (_v0.b.$ === 1) {
				var rem = _v0.a.a;
				var _v3 = _v0.b;
				return {
					g7: A3(collect, $jfmengels$elm_review$Vendor$Graph$Remove, rem.m, $jfmengels$elm_review$Vendor$IntDict$empty),
					m: A3(collect, $jfmengels$elm_review$Vendor$Graph$Remove, rem.g7, $jfmengels$elm_review$Vendor$IntDict$empty)
				};
			} else {
				var rem = _v0.a.a;
				var ins = _v0.b.a;
				return _Utils_eq(rem, ins) ? $jfmengels$elm_review$Vendor$Graph$emptyDiff : {
					g7: A3(
						collect,
						$jfmengels$elm_review$Vendor$Graph$Insert,
						ins.m,
						A3(collect, $jfmengels$elm_review$Vendor$Graph$Remove, rem.m, $jfmengels$elm_review$Vendor$IntDict$empty)),
					m: A3(
						collect,
						$jfmengels$elm_review$Vendor$Graph$Insert,
						ins.g7,
						A3(collect, $jfmengels$elm_review$Vendor$Graph$Remove, rem.g7, $jfmengels$elm_review$Vendor$IntDict$empty))
				};
			}
		}
	});
var $jfmengels$elm_review$Vendor$IntDict$filter = F2(
	function (predicate, dict) {
		var add = F3(
			function (k, v, d) {
				return A2(predicate, k, v) ? A3($jfmengels$elm_review$Vendor$IntDict$insert, k, v, d) : d;
			});
		return A3($jfmengels$elm_review$Vendor$IntDict$foldl, add, $jfmengels$elm_review$Vendor$IntDict$empty, dict);
	});
var $jfmengels$elm_review$Vendor$Graph$update = F2(
	function (nodeId, updater) {
		var wrappedUpdater = function (rep) {
			var old = A2($jfmengels$elm_review$Vendor$IntDict$get, nodeId, rep);
			var filterInvalidEdges = function (ctx) {
				return $jfmengels$elm_review$Vendor$IntDict$filter(
					F2(
						function (id, _v0) {
							return _Utils_eq(id, ctx.fP.dr) || A2($jfmengels$elm_review$Vendor$IntDict$member, id, rep);
						}));
			};
			var cleanUpEdges = function (ctx) {
				return _Utils_update(
					ctx,
					{
						g7: A2(filterInvalidEdges, ctx, ctx.g7),
						m: A2(filterInvalidEdges, ctx, ctx.m)
					});
			};
			var _new = A2(
				$elm$core$Maybe$map,
				cleanUpEdges,
				updater(old));
			var diff = A2($jfmengels$elm_review$Vendor$Graph$computeEdgeDiff, old, _new);
			return A3(
				$jfmengels$elm_review$Vendor$IntDict$update,
				nodeId,
				$elm$core$Basics$always(_new),
				A3($jfmengels$elm_review$Vendor$Graph$applyEdgeDiff, nodeId, diff, rep));
		};
		return A2(
			$elm$core$Basics$composeR,
			$jfmengels$elm_review$Vendor$Graph$unGraph,
			A2($elm$core$Basics$composeR, wrappedUpdater, $elm$core$Basics$identity));
	});
var $jfmengels$elm_review$Vendor$Graph$remove = F2(
	function (nodeId, graph) {
		return A3(
			$jfmengels$elm_review$Vendor$Graph$update,
			nodeId,
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			graph);
	});
var $jfmengels$elm_review$Vendor$Graph$guidedDfs = F5(
	function (selectNeighbors, visitNode, startingSeeds, startingAcc, startingGraph) {
		var go = F3(
			function (seeds, acc, graph) {
				go:
				while (true) {
					if (!seeds.b) {
						return _Utils_Tuple2(acc, graph);
					} else {
						var next = seeds.a;
						var seeds1 = seeds.b;
						var _v1 = A2($jfmengels$elm_review$Vendor$Graph$get, next, graph);
						if (_v1.$ === 1) {
							var $temp$seeds = seeds1,
								$temp$acc = acc,
								$temp$graph = graph;
							seeds = $temp$seeds;
							acc = $temp$acc;
							graph = $temp$graph;
							continue go;
						} else {
							var ctx = _v1.a;
							var _v2 = A2(visitNode, ctx, acc);
							var accAfterDiscovery = _v2.a;
							var finishNode = _v2.b;
							var _v3 = A3(
								go,
								selectNeighbors(ctx),
								accAfterDiscovery,
								A2($jfmengels$elm_review$Vendor$Graph$remove, next, graph));
							var accBeforeFinish = _v3.a;
							var graph1 = _v3.b;
							var accAfterFinish = finishNode(accBeforeFinish);
							var $temp$seeds = seeds1,
								$temp$acc = accAfterFinish,
								$temp$graph = graph1;
							seeds = $temp$seeds;
							acc = $temp$acc;
							graph = $temp$graph;
							continue go;
						}
					}
				}
			});
		return A3(go, startingSeeds, startingAcc, startingGraph);
	});
var $jfmengels$elm_review$Vendor$Graph$nodeIds = A2($elm$core$Basics$composeR, $jfmengels$elm_review$Vendor$Graph$unGraph, $jfmengels$elm_review$Vendor$IntDict$keys);
var $jfmengels$elm_review$Vendor$Graph$dfs = F3(
	function (visitNode, acc, graph) {
		return A5(
			$jfmengels$elm_review$Vendor$Graph$guidedDfs,
			$jfmengels$elm_review$Vendor$Graph$alongOutgoingEdges,
			visitNode,
			$jfmengels$elm_review$Vendor$Graph$nodeIds(graph),
			acc,
			graph).a;
	});
var $jfmengels$elm_review$Vendor$Graph$onFinish = F3(
	function (visitor, ctx, acc) {
		return _Utils_Tuple2(
			acc,
			visitor(ctx));
	});
var $jfmengels$elm_review$Vendor$Graph$checkAcyclic = function (graph) {
	var reversePostOrder = A3(
		$jfmengels$elm_review$Vendor$Graph$dfs,
		$jfmengels$elm_review$Vendor$Graph$onFinish(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.fP;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.dr;
					},
					$elm$core$List$cons))),
		_List_Nil,
		graph);
	return A2($jfmengels$elm_review$Vendor$Graph$checkForBackEdges, reversePostOrder, graph);
};
var $jfmengels$elm_review$Review$Project$Valid$duplicateModuleNames = F2(
	function (visitedModules, projectModules) {
		duplicateModuleNames:
		while (true) {
			if (!projectModules.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var projectModule = projectModules.a;
				var restOfModules = projectModules.b;
				var projectModulePath = $jfmengels$elm_review$Review$Project$ProjectModule$path(projectModule);
				var moduleName = $jfmengels$elm_review$Review$Project$ProjectModule$moduleName(projectModule);
				var _v1 = A2($elm$core$Dict$get, moduleName, visitedModules);
				if (_v1.$ === 1) {
					var $temp$visitedModules = A3($elm$core$Dict$insert, moduleName, projectModulePath, visitedModules),
						$temp$projectModules = restOfModules;
					visitedModules = $temp$visitedModules;
					projectModules = $temp$projectModules;
					continue duplicateModuleNames;
				} else {
					var path = _v1.a;
					return $elm$core$Maybe$Just(
						{
							dE: moduleName,
							hx: A2(
								$elm$core$List$cons,
								path,
								A2(
									$elm$core$List$cons,
									projectModulePath,
									A2(
										$elm$core$List$map,
										$jfmengels$elm_review$Review$Project$ProjectModule$path,
										A2(
											$elm$core$List$filter,
											function (p) {
												return _Utils_eq(
													$jfmengels$elm_review$Review$Project$ProjectModule$moduleName(p),
													moduleName);
											},
											restOfModules))))
						});
				}
			}
		}
	});
var $jfmengels$elm_review$Vendor$Graph$alongIncomingEdges = function (ctx) {
	return $jfmengels$elm_review$Vendor$IntDict$keys(ctx.g7);
};
var $jfmengels$elm_review$Review$ImportCycle$filePathToModuleName = F2(
	function (modules, _v0) {
		var label = _v0.c_;
		var _v1 = A2($elm$core$Dict$get, label, modules);
		if (!_v1.$) {
			var mod = _v1.a;
			return A2(
				$elm$core$String$join,
				'.',
				$jfmengels$elm_review$Review$Project$ProjectModule$moduleName(mod));
		} else {
			return label;
		}
	});
var $jfmengels$elm_review$Vendor$Fifo$Fifo = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review$Vendor$Fifo$empty = A2($jfmengels$elm_review$Vendor$Fifo$Fifo, _List_Nil, _List_Nil);
var $jfmengels$elm_review$Vendor$Fifo$insert = F2(
	function (a, _v0) {
		var front = _v0.a;
		var back = _v0.b;
		return A2(
			$jfmengels$elm_review$Vendor$Fifo$Fifo,
			front,
			A2($elm$core$List$cons, a, back));
	});
var $jfmengels$elm_review$Vendor$Fifo$remove = function (fifo) {
	if (!fifo.a.b) {
		if (!fifo.b.b) {
			return _Utils_Tuple2($elm$core$Maybe$Nothing, $jfmengels$elm_review$Vendor$Fifo$empty);
		} else {
			var back = fifo.b;
			return $jfmengels$elm_review$Vendor$Fifo$remove(
				A2(
					$jfmengels$elm_review$Vendor$Fifo$Fifo,
					$elm$core$List$reverse(back),
					_List_Nil));
		}
	} else {
		var _v1 = fifo.a;
		var next = _v1.a;
		var rest = _v1.b;
		var back = fifo.b;
		return _Utils_Tuple2(
			$elm$core$Maybe$Just(next),
			A2($jfmengels$elm_review$Vendor$Fifo$Fifo, rest, back));
	}
};
var $jfmengels$elm_review$Vendor$Graph$guidedBfs = F5(
	function (selectNeighbors, visitNode, startingSeeds, startingAcc, startingGraph) {
		var enqueueMany = F4(
			function (distance, parentPath, nodeIds_, queue) {
				return A3(
					$elm$core$List$foldl,
					$jfmengels$elm_review$Vendor$Fifo$insert,
					queue,
					A2(
						$elm$core$List$map,
						function (id) {
							return _Utils_Tuple3(id, parentPath, distance);
						},
						nodeIds_));
			});
		var go = F3(
			function (seeds, acc, graph) {
				go:
				while (true) {
					var _v0 = $jfmengels$elm_review$Vendor$Fifo$remove(seeds);
					if (_v0.a.$ === 1) {
						var _v1 = _v0.a;
						return _Utils_Tuple2(acc, graph);
					} else {
						var _v2 = _v0.a.a;
						var next = _v2.a;
						var parentPath = _v2.b;
						var distance = _v2.c;
						var seeds1 = _v0.b;
						var _v3 = A2($jfmengels$elm_review$Vendor$Graph$get, next, graph);
						if (_v3.$ === 1) {
							var $temp$seeds = seeds1,
								$temp$acc = acc,
								$temp$graph = graph;
							seeds = $temp$seeds;
							acc = $temp$acc;
							graph = $temp$graph;
							continue go;
						} else {
							var ctx = _v3.a;
							var path = A2($elm$core$List$cons, ctx, parentPath);
							var seeds2 = A4(
								enqueueMany,
								distance + 1,
								path,
								selectNeighbors(ctx),
								seeds1);
							var accAfterVisit = A3(visitNode, path, distance, acc);
							var $temp$seeds = seeds2,
								$temp$acc = accAfterVisit,
								$temp$graph = A2($jfmengels$elm_review$Vendor$Graph$remove, next, graph);
							seeds = $temp$seeds;
							acc = $temp$acc;
							graph = $temp$graph;
							continue go;
						}
					}
				}
			});
		return A3(
			go,
			A4(enqueueMany, 0, _List_Nil, startingSeeds, $jfmengels$elm_review$Vendor$Fifo$empty),
			startingAcc,
			startingGraph);
	});
var $jfmengels$elm_review$Review$ImportCycle$reachedTarget = F2(
	function (targetNode, path) {
		var _v0 = $elm$core$List$head(path);
		if (!_v0.$) {
			var node = _v0.a;
			return _Utils_eq(node.fP.dr, targetNode);
		} else {
			return false;
		}
	});
var $jfmengels$elm_review$Review$ImportCycle$visitorDiscoverCycle = F4(
	function (targetNode, path, distance, acc) {
		if ($elm$core$List$isEmpty(acc)) {
			if (!distance) {
				var _v0 = $elm$core$List$head(path);
				if (!_v0.$) {
					var head = _v0.a;
					return A2($jfmengels$elm_review$Vendor$IntDict$member, head.fP.dr, head.g7) ? _List_fromArray(
						[head.fP]) : acc;
				} else {
					return acc;
				}
			} else {
				if (A2($jfmengels$elm_review$Review$ImportCycle$reachedTarget, targetNode, path)) {
					return A2(
						$elm$core$List$map,
						function ($) {
							return $.fP;
						},
						path);
				} else {
					return _List_Nil;
				}
			}
		} else {
			return acc;
		}
	});
var $jfmengels$elm_review$Review$ImportCycle$findSmallerCycle = F3(
	function (graph, currentBest, nodesToVisit) {
		findSmallerCycle:
		while (true) {
			if (!nodesToVisit.b) {
				return currentBest;
			} else {
				var startingNode = nodesToVisit.a;
				var restOfNodes = nodesToVisit.b;
				var cycle = A5(
					$jfmengels$elm_review$Vendor$Graph$guidedBfs,
					$jfmengels$elm_review$Vendor$Graph$alongIncomingEdges,
					$jfmengels$elm_review$Review$ImportCycle$visitorDiscoverCycle(startingNode.dr),
					_List_fromArray(
						[startingNode.dr]),
					_List_Nil,
					graph).a;
				var newBest = (($elm$core$List$length(cycle) > 0) && (_Utils_cmp(
					$elm$core$List$length(cycle),
					$elm$core$List$length(currentBest)) < 0)) ? cycle : currentBest;
				if ($elm$core$List$length(newBest) === 1) {
					return newBest;
				} else {
					var $temp$graph = graph,
						$temp$currentBest = newBest,
						$temp$nodesToVisit = restOfNodes;
					graph = $temp$graph;
					currentBest = $temp$currentBest;
					nodesToVisit = $temp$nodesToVisit;
					continue findSmallerCycle;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$ImportCycle$findCycle = F3(
	function (modules, graph, edge) {
		var initialCycle = A5(
			$jfmengels$elm_review$Vendor$Graph$guidedBfs,
			$jfmengels$elm_review$Vendor$Graph$alongIncomingEdges,
			$jfmengels$elm_review$Review$ImportCycle$visitorDiscoverCycle(edge.hT),
			_List_fromArray(
				[edge.g1]),
			_List_Nil,
			graph).a;
		return A2(
			$elm$core$List$map,
			$jfmengels$elm_review$Review$ImportCycle$filePathToModuleName(modules),
			A3($jfmengels$elm_review$Review$ImportCycle$findSmallerCycle, graph, initialCycle, initialCycle));
	});
var $jfmengels$elm_review$Review$Project$Valid$ValidProject = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Cache$ContentHash$combine = function (dict) {
	return A3(
		$elm$core$Dict$foldl,
		F3(
			function (_v0, _v1, acc) {
				var n = _v1;
				return n + acc;
			}),
		0,
		dict);
};
var $jfmengels$elm_review$Review$Project$Dependency$modules = function (_v0) {
	var dependency = _v0;
	return dependency.av;
};
var $jfmengels$elm_review$Review$Project$Valid$computeDependencyModules = function (directDependencies_) {
	return A3(
		$elm$core$Dict$foldl,
		F3(
			function (_v0, v, acc) {
				return A3(
					$elm$core$List$foldl,
					F2(
						function (mod, subAcc) {
							return A2(
								$elm$core$Set$insert,
								A2($elm$core$String$split, '.', mod.bV),
								subAcc);
						}),
					acc,
					$jfmengels$elm_review$Review$Project$Dependency$modules(v));
			}),
		$elm$core$Set$empty,
		directDependencies_);
};
var $jfmengels$elm_review$Review$Project$Valid$computeDirectDependencies = function (project) {
	var _v0 = A2(
		$elm$core$Maybe$map,
		function (_v1) {
			var elmJson_ = _v1.a;
			return elmJson_.h;
		},
		project.ba);
	if (!_v0.$) {
		if (!_v0.a.$) {
			var depsDirect = _v0.a.a.e9;
			var testDepsDirect = _v0.a.a.gg;
			var allDeps = A2(
				$elm$core$List$map,
				function (_v3) {
					var name = _v3.a;
					return $elm$project_metadata_utils$Elm$Package$toString(name);
				},
				_Utils_ap(depsDirect, testDepsDirect));
			return A2(
				$elm$core$Dict$filter,
				F2(
					function (depName, _v2) {
						return A2($elm$core$List$member, depName, allDeps);
					}),
				project.e6);
		} else {
			var deps = _v0.a.a.e8;
			var testDeps = _v0.a.a.gf;
			var allDeps = A2(
				$elm$core$List$map,
				function (_v5) {
					var name = _v5.a;
					return $elm$project_metadata_utils$Elm$Package$toString(name);
				},
				_Utils_ap(deps, testDeps));
			return A2(
				$elm$core$Dict$filter,
				F2(
					function (depName, _v4) {
						return A2($elm$core$List$member, depName, allDeps);
					}),
				project.e6);
		}
	} else {
		return project.e6;
	}
};
var $jfmengels$elm_review$Review$Project$Valid$computeModulesByModuleName = function (modules) {
	return A3(
		$elm$core$Dict$foldl,
		F3(
			function (_v0, module_, acc) {
				return A3(
					$elm$core$Dict$insert,
					$jfmengels$elm_review$Review$Project$ProjectModule$moduleName(module_),
					module_,
					acc);
			}),
		$elm$core$Dict$empty,
		modules);
};
var $jfmengels$elm_review$Vendor$Graph$topologicalSort = function (_v0) {
	var graph = _v0.a;
	var ordering = _v0.b;
	var error = 'Graph.topologicalSort: Invalid `AcyclicGraph`, where the ordering contained nodes not present in the graph';
	return A2(
		$elm$core$List$map,
		function (id) {
			return A3($jfmengels$elm_review$Vendor$Graph$unsafeGet, error, id, graph);
		},
		ordering);
};
var $jfmengels$elm_review$Review$Project$Valid$fromProjectAndGraph = F3(
	function (moduleGraph_, acyclicGraph, _v0) {
		var project = _v0;
		var directDependencies_ = $jfmengels$elm_review$Review$Project$Valid$computeDirectDependencies(project);
		return {
			e6: project.e6,
			dc: $jfmengels$elm_review$Review$Project$Valid$computeDependencyModules(directDependencies_),
			ec: directDependencies_,
			ba: project.ba,
			ap: project.ap,
			cR: $jfmengels$elm_review$Review$Cache$ContentHash$combine(project.K),
			K: project.K,
			fI: moduleGraph_,
			ez: $jfmengels$elm_review$Review$Project$Valid$computeModulesByModuleName(project.av),
			ac: project.av,
			c3: project.gC,
			bX: project.bX,
			cA: $jfmengels$elm_review$Vendor$Graph$topologicalSort(acyclicGraph),
			eP: project.eP
		};
	});
var $jfmengels$elm_review$Review$Project$Valid$parse = function (project) {
	var p = project;
	if (!$elm$core$List$isEmpty(p.cr)) {
		return $elm$core$Result$Err(
			$jfmengels$elm_review$Review$Project$InvalidProjectError$SomeModulesFailedToParse(
				A2(
					$elm$core$List$map,
					function ($) {
						return $.hw;
					},
					p.cr)));
	} else {
		if ($elm$core$Dict$isEmpty(p.av)) {
			return $elm$core$Result$Err($jfmengels$elm_review$Review$Project$InvalidProjectError$NoModulesError);
		} else {
			var projectModules = $elm$core$Dict$values(p.av);
			var _v0 = A2($jfmengels$elm_review$Review$Project$Valid$duplicateModuleNames, $elm$core$Dict$empty, projectModules);
			if (!_v0.$) {
				var duplicate = _v0.a;
				return $elm$core$Result$Err(
					$jfmengels$elm_review$Review$Project$InvalidProjectError$DuplicateModuleNames(duplicate));
			} else {
				var graph = $jfmengels$elm_review$Review$Project$Valid$buildModuleGraph(p.av);
				var _v1 = $jfmengels$elm_review$Vendor$Graph$checkAcyclic(graph);
				if (_v1.$ === 1) {
					var edge = _v1.a;
					return $elm$core$Result$Err(
						$jfmengels$elm_review$Review$Project$InvalidProjectError$ImportCycleError(
							A3($jfmengels$elm_review$Review$ImportCycle$findCycle, p.av, graph, edge)));
				} else {
					var acyclicGraph = _v1.a;
					return $elm$core$Result$Ok(
						A3($jfmengels$elm_review$Review$Project$Valid$fromProjectAndGraph, graph, acyclicGraph, project));
				}
			}
		}
	}
};
var $jfmengels$elm_review$Review$Rule$parsingError = function (path) {
	return $jfmengels$elm_review$Review$Error$ReviewError$fromBaseError(
		{
			dd: _List_fromArray(
				['I could not understand the content of this file, and this prevents me from analyzing it. It is highly likely that the contents of the file is not correct Elm code.', 'I need this file to be fixed before analyzing the rest of the project. If I didn\'t, I would potentially report incorrect things.', 'Hint: Try running `elm make`. The compiler should give you better hints on how to resolve the problem.']),
			g_: path,
			fm: $elm$core$Maybe$Nothing,
			cT: $jfmengels$elm_review$Review$Error$Fixes$none,
			a_: path + ' is not a correct Elm module',
			dJ: false,
			eG: $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			eH: 'ParsingError',
			dX: $jfmengels$elm_review$Review$Error$Target$module_(path)
		});
};
var $jfmengels$elm_review$Review$Rule$getModulesSortedByImport = function (project) {
	var _v0 = $jfmengels$elm_review$Review$Project$Valid$parse(project);
	if (_v0.$ === 1) {
		switch (_v0.a.$) {
			case 0:
				var pathsThatFailedToParse = _v0.a.a;
				return $elm$core$Result$Err(
					A2($elm$core$List$map, $jfmengels$elm_review$Review$Rule$parsingError, pathsThatFailedToParse));
			case 1:
				var duplicate = _v0.a.a;
				return $elm$core$Result$Err(
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Rule$duplicateModulesGlobalError(duplicate)
						]));
			case 2:
				var cycle = _v0.a.a;
				return $elm$core$Result$Err(
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Rule$importCycleError(cycle)
						]));
			default:
				var _v1 = _v0.a;
				return $elm$core$Result$Err(
					_List_fromArray(
						[
							$jfmengels$elm_review$Review$Rule$errorToReviewError(
							$jfmengels$elm_review$Review$Rule$elmReviewGlobalError(
								{
									dd: _List_fromArray(
										['I need to look at some Elm modules. Maybe you have specified folders that do not exist?']),
									a_: 'This project does not contain any Elm modules',
									eH: 'Incorrect project'
								}))
						]));
		}
	} else {
		var result = _v0.a;
		return $elm$core$Result$Ok(result);
	}
};
var $jfmengels$elm_review$Review$Rule$getValidProjectAndRules = F2(
	function (project, rules) {
		return A2(
			$elm$core$Result$andThen,
			function (validProject) {
				return A2(
					$elm$core$Result$map,
					$elm$core$Tuple$pair(validProject),
					A3($jfmengels$elm_review$Review$Rule$checkForConfigurationErrors, validProject, rules, _List_Nil));
			},
			$jfmengels$elm_review$Review$Rule$getModulesSortedByImport(project));
	});
var $jfmengels$elm_review$Review$Rule$computeErrorsAndRulesAndExtracts = F2(
	function (reviewOptions, ruleProjectVisitors) {
		return reviewOptions.fj ? A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, _v1) {
					var rule = _v0;
					var errors = _v1.ca;
					var rules = _v1.aQ;
					var extracts = _v1.cS;
					var _v2 = A3(
						$elm$core$List$foldl,
						F2(
							function (_v3, _v4) {
								var err = _v3;
								var accErrors = _v4.a;
								var canComputeExtract_ = _v4.b;
								return _Utils_Tuple2(
									A2(
										$elm$core$List$cons,
										$jfmengels$elm_review$Review$Error$ReviewError$fromBaseError(err),
										accErrors),
									canComputeExtract_ && (!err.dJ));
							}),
						_Utils_Tuple2(errors, true),
						rule.dq(0));
					var newErrors = _v2.a;
					var canComputeExtract = _v2.b;
					var _v5 = canComputeExtract ? A2(rule.ea, reviewOptions, extracts) : _Utils_Tuple2(extracts, rule);
					var newExtracts = _v5.a;
					var newRule = _v5.b;
					return {
						ca: newErrors,
						cS: newExtracts,
						aQ: A2(
							$elm$core$List$cons,
							newRule.c8(0),
							rules)
					};
				}),
			{ca: _List_Nil, cS: $elm$core$Dict$empty, aQ: _List_Nil},
			ruleProjectVisitors) : {
			ca: A2(
				$elm$core$List$concatMap,
				function (_v6) {
					var rule = _v6;
					return A2(
						$elm$core$List$map,
						$jfmengels$elm_review$Review$Rule$errorToReviewError,
						rule.dq(0));
				},
				ruleProjectVisitors),
			cS: $elm$core$Dict$empty,
			aQ: A2(
				$elm$core$List$map,
				function (_v7) {
					var rule = _v7;
					return rule.c8(0);
				},
				ruleProjectVisitors)
		};
	});
var $jfmengels$elm_review$Review$Fix$FixedErrors$FixedErrors = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Fix$FixedErrors$empty = {e2: 0, ca: $elm$core$Dict$empty, dU: false};
var $jfmengels$elm_review$Review$Rule$ElmJson = {$: 0};
var $jfmengels$elm_review$Review$Rule$ElmJsonKey = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Rule$ExtraFileKey = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Rule$ReadmeKey = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Rule$Modules = function (a) {
	return {$: 4, a: a};
};
var $jfmengels$elm_review$Vendor$NonEmpty$fromList = function (xs) {
	if (xs.b) {
		var h = xs.a;
		var t = xs.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(h, t));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review$Vendor$Zipper$Zipper = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $jfmengels$elm_review$Vendor$Zipper$fromNonEmpty = function (_v0) {
	var h = _v0.a;
	var t = _v0.b;
	return A3($jfmengels$elm_review$Vendor$Zipper$Zipper, _List_Nil, h, t);
};
var $jfmengels$elm_review$Vendor$Zipper$fromList = A2(
	$elm$core$Basics$composeL,
	$elm$core$Maybe$map($jfmengels$elm_review$Vendor$Zipper$fromNonEmpty),
	$jfmengels$elm_review$Vendor$NonEmpty$fromList);
var $jfmengels$elm_review$Review$Project$Valid$unsafeCreateZipper = function (sortedModules) {
	unsafeCreateZipper:
	while (true) {
		var _v0 = $jfmengels$elm_review$Vendor$Zipper$fromList(sortedModules);
		if (!_v0.$) {
			var zipper = _v0.a;
			return zipper;
		} else {
			var $temp$sortedModules = sortedModules;
			sortedModules = $temp$sortedModules;
			continue unsafeCreateZipper;
		}
	}
};
var $jfmengels$elm_review$Review$Project$Valid$moduleZipper = function (_v0) {
	var project = _v0;
	return $jfmengels$elm_review$Review$Project$Valid$unsafeCreateZipper(project.cA);
};
var $jfmengels$elm_review$Review$Rule$EndAnalysis = {$: 6};
var $jfmengels$elm_review$Review$Rule$ExtraFiles = {$: 2};
var $jfmengels$elm_review$Review$Rule$FoundFixStandard = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Review$Rule$FoundNoFixesStandard = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Rule$Readme = {$: 1};
var $jfmengels$elm_review$Review$Rule$FoundFix = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $jfmengels$elm_review$Review$Rule$FoundNoFixes = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Rule$ShouldAbort = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Rule$ShouldContinue = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Review$Rule$FoundFixHelp = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $jfmengels$elm_review$Review$Rule$FoundNoFixesHelp = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Rule$FixedElmJson = {$: 2};
var $jfmengels$elm_review$Review$Project$Valid$addElmJson = F2(
	function (elmJson_, _v0) {
		var project = _v0;
		return _Utils_update(
			project,
			{
				ba: $elm$core$Maybe$Just(
					_Utils_Tuple2(
						elmJson_,
						$jfmengels$elm_review$Review$Cache$ContentHash$hash(elmJson_.dM)))
			});
	});
var $jfmengels$elm_review$Review$Fix$FixProblem$InvalidJson = function (a) {
	return {$: 2, a: a};
};
var $jfmengels$elm_review$Review$Fix$FixProblem$Unchanged = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Unicode$dropLeft = F2(
	function (n, string) {
		return $elm$core$String$fromList(
			A2(
				$elm$core$List$drop,
				n,
				$elm$core$String$toList(string)));
	});
var $elm$core$String$trim = _String_trim;
var $jfmengels$elm_review$Review$Fix$Internal$getRowAtLine = F2(
	function (lines, rowIndex) {
		var _v0 = A2(
			$elm$core$Array$get,
			rowIndex,
			$elm$core$Array$fromList(lines));
		if (!_v0.$) {
			var line = _v0.a;
			return ($elm$core$String$trim(line) !== '') ? line : '';
		} else {
			return '';
		}
	});
var $jfmengels$elm_review$Unicode$left = F2(
	function (n, string) {
		return $elm$core$String$fromList(
			A2(
				$elm$core$List$take,
				n,
				$elm$core$String$toList(string)));
	});
var $jfmengels$elm_review$Review$Fix$Internal$applyReplace = F3(
	function (range, replacement, lines) {
		var startLine = A2(
			$jfmengels$elm_review$Unicode$left,
			range.cB.a6 - 1,
			A2($jfmengels$elm_review$Review$Fix$Internal$getRowAtLine, lines, range.cB.bp - 1));
		var linesBefore = A2($elm$core$List$take, range.cB.bp - 1, lines);
		var linesAfter = A2($elm$core$List$drop, range.b9.bp, lines);
		var endLine = A2(
			$jfmengels$elm_review$Unicode$dropLeft,
			range.b9.a6 - 1,
			A2($jfmengels$elm_review$Review$Fix$Internal$getRowAtLine, lines, range.b9.bp - 1));
		return _Utils_Tuple2(
			$elm$core$List$concat(
				_List_fromArray(
					[
						linesBefore,
						$elm$core$String$lines(
						_Utils_ap(
							startLine,
							_Utils_ap(replacement, endLine)))
					])),
			linesAfter);
	});
var $jfmengels$elm_review$Review$Fix$Internal$applyIndividualEdits = F3(
	function (lines, linesAfter, edits) {
		applyIndividualEdits:
		while (true) {
			if (!edits.b) {
				return _Utils_ap(lines, linesAfter);
			} else {
				var edit = edits.a;
				var restOfEdits = edits.b;
				var _v1 = function () {
					switch (edit.$) {
						case 1:
							var range = edit.a;
							var replacement_ = edit.b;
							return _Utils_Tuple2(range, replacement_);
						case 0:
							var range = edit.a;
							return _Utils_Tuple2(range, '');
						default:
							var position = edit.a;
							var insertion = edit.b;
							return _Utils_Tuple2(
								{b9: position, cB: position},
								insertion);
					}
				}();
				var rangeToReplace = _v1.a;
				var replacement = _v1.b;
				var _v3 = A3($jfmengels$elm_review$Review$Fix$Internal$applyReplace, rangeToReplace, replacement, lines);
				var newLines = _v3.a;
				var newLinesAfter = _v3.b;
				var $temp$lines = newLines,
					$temp$linesAfter = _Utils_ap(newLinesAfter, linesAfter),
					$temp$edits = restOfEdits;
				lines = $temp$lines;
				linesAfter = $temp$linesAfter;
				edits = $temp$edits;
				continue applyIndividualEdits;
			}
		}
	});
var $jfmengels$elm_review$Review$Fix$Internal$applyEdits = F3(
	function (filePath, edits, sourceCode) {
		var resultAfterEdit = A2(
			$elm$core$String$join,
			'\n',
			A3(
				$jfmengels$elm_review$Review$Fix$Internal$applyIndividualEdits,
				$elm$core$String$lines(sourceCode),
				_List_Nil,
				edits));
		return _Utils_eq(sourceCode, resultAfterEdit) ? $elm$core$Result$Err(
			$jfmengels$elm_review$Review$Fix$FixProblem$Unchanged(
				{de: edits, g_: filePath})) : $elm$core$Result$Ok(resultAfterEdit);
	});
var $jfmengels$elm_review$Review$Fix$Internal$editElmJson = F2(
	function (edits, originalSourceCode) {
		var _v0 = A3($jfmengels$elm_review$Review$Fix$Internal$applyEdits, 'elm.json', edits, originalSourceCode);
		if (!_v0.$) {
			var resultAfterFix = _v0.a;
			var _v1 = A2($elm$json$Json$Decode$decodeString, $elm$project_metadata_utils$Elm$Project$decoder, resultAfterFix);
			if (!_v1.$) {
				var project = _v1.a;
				return $elm$core$Result$Ok(
					{h: project, dM: resultAfterFix});
			} else {
				var decodingError = _v1.a;
				return $elm$core$Result$Err(
					$jfmengels$elm_review$Review$Fix$FixProblem$InvalidJson(
						{gO: decodingError, de: edits, g_: 'elm.json', hK: resultAfterFix}));
			}
		} else {
			var err = _v0.a;
			return $elm$core$Result$Err(err);
		}
	});
var $jfmengels$elm_review$Review$Project$Valid$elmJson = function (_v0) {
	var project = _v0;
	return A2($elm$core$Maybe$map, $elm$core$Tuple$first, project.ba);
};
var $jfmengels$elm_review$Review$Rule$markFixesAsProblem = F2(
	function (fixProblem, error_) {
		return _Utils_update(
			error_,
			{
				fm: $elm$core$Maybe$Just(fixProblem)
			});
	});
var $jfmengels$elm_review$Review$Rule$applyElmJsonFix = F3(
	function (project, err, fixes) {
		var headError = err;
		var _v0 = $jfmengels$elm_review$Review$Project$Valid$elmJson(project);
		if (_v0.$ === 1) {
			return $elm$core$Result$Err(err);
		} else {
			var elmJson = _v0.a;
			var _v1 = A2(
				$elm$core$Result$map,
				function (fixResult) {
					return A2(
						$jfmengels$elm_review$Review$Project$Valid$addElmJson,
						{hw: elmJson.hw, h: fixResult.h, dM: fixResult.dM},
						project);
				},
				A2($jfmengels$elm_review$Review$Fix$Internal$editElmJson, fixes, elmJson.dM));
			if (_v1.$ === 1) {
				var fixProblem = _v1.a;
				return $elm$core$Result$Err(
					A2($jfmengels$elm_review$Review$Rule$markFixesAsProblem, fixProblem, headError));
			} else {
				var newProject = _v1.a;
				return $elm$core$Result$Ok(
					{P: $jfmengels$elm_review$Review$Rule$FixedElmJson, h: newProject});
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$FixedExtraFile = {$: 4};
var $jfmengels$elm_review$Review$Project$Valid$addExtraFile = F2(
	function (file, _v0) {
		var project = _v0;
		var extraFilesContentHashes = A3(
			$elm$core$Dict$insert,
			file.hw,
			$jfmengels$elm_review$Review$Cache$ContentHash$hash(file.db),
			project.K);
		return _Utils_update(
			project,
			{
				ap: A3($elm$core$Dict$insert, file.hw, file.db, project.ap),
				cR: $jfmengels$elm_review$Review$Cache$ContentHash$combine(extraFilesContentHashes),
				K: extraFilesContentHashes
			});
	});
var $jfmengels$elm_review$Review$Project$Valid$extraFilesWithoutKeys = function (_v0) {
	var project = _v0;
	return project.ap;
};
var $jfmengels$elm_review$Review$Rule$applyExtraFileFix = F4(
	function (project, err, targetPath, edits) {
		var headError = err;
		var _v0 = A2(
			$elm$core$Dict$get,
			targetPath,
			$jfmengels$elm_review$Review$Project$Valid$extraFilesWithoutKeys(project));
		if (_v0.$ === 1) {
			return $elm$core$Result$Err(err);
		} else {
			var content = _v0.a;
			var _v1 = A3($jfmengels$elm_review$Review$Fix$Internal$applyEdits, targetPath, edits, content);
			if (_v1.$ === 1) {
				var fixProblem = _v1.a;
				return $elm$core$Result$Err(
					A2($jfmengels$elm_review$Review$Rule$markFixesAsProblem, fixProblem, headError));
			} else {
				var newFileContent = _v1.a;
				if (A2($elm$core$String$endsWith, '.json', targetPath)) {
					var _v2 = A2($elm$json$Json$Decode$decodeString, $elm$json$Json$Decode$value, newFileContent);
					if (!_v2.$) {
						return $elm$core$Result$Ok(
							{
								P: $jfmengels$elm_review$Review$Rule$FixedExtraFile,
								h: A2(
									$jfmengels$elm_review$Review$Project$Valid$addExtraFile,
									{db: newFileContent, hw: targetPath},
									project)
							});
					} else {
						var decodingError = _v2.a;
						var fixProblem = $jfmengels$elm_review$Review$Fix$FixProblem$InvalidJson(
							{gO: decodingError, de: edits, g_: targetPath, hK: newFileContent});
						return $elm$core$Result$Err(
							A2($jfmengels$elm_review$Review$Rule$markFixesAsProblem, fixProblem, headError));
					}
				} else {
					return $elm$core$Result$Ok(
						{
							P: $jfmengels$elm_review$Review$Rule$FixedExtraFile,
							h: A2(
								$jfmengels$elm_review$Review$Project$Valid$addExtraFile,
								{db: newFileContent, hw: targetPath},
								project)
						});
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$FixedReadme = {$: 3};
var $jfmengels$elm_review$Review$Project$Valid$addReadme = F2(
	function (readme_, _v0) {
		var project = _v0;
		return _Utils_update(
			project,
			{
				bX: $elm$core$Maybe$Just(
					_Utils_Tuple2(
						readme_,
						$jfmengels$elm_review$Review$Cache$ContentHash$hash(readme_.db)))
			});
	});
var $jfmengels$elm_review$Review$Project$Valid$readme = function (_v0) {
	var project = _v0;
	return A2($elm$core$Maybe$map, $elm$core$Tuple$first, project.bX);
};
var $jfmengels$elm_review$Review$Rule$applyReadmeFix = F3(
	function (project, err, fixes) {
		var headError = err;
		var _v0 = $jfmengels$elm_review$Review$Project$Valid$readme(project);
		if (_v0.$ === 1) {
			return $elm$core$Result$Err(err);
		} else {
			var readme = _v0.a;
			var _v1 = A3($jfmengels$elm_review$Review$Fix$Internal$applyEdits, 'README.md', fixes, readme.db);
			if (_v1.$ === 1) {
				var fixProblem = _v1.a;
				return $elm$core$Result$Err(
					A2($jfmengels$elm_review$Review$Rule$markFixesAsProblem, fixProblem, headError));
			} else {
				var content = _v1.a;
				return $elm$core$Result$Ok(
					{
						P: $jfmengels$elm_review$Review$Rule$FixedReadme,
						h: A2(
							$jfmengels$elm_review$Review$Project$Valid$addReadme,
							{db: content, hw: readme.hw},
							project)
					});
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$FixedElmModule = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review$Review$Fix$FixProblem$CreatesImportCycle = function (a) {
	return {$: 5, a: a};
};
var $jfmengels$elm_review$Vendor$Zipper$current = function (_v0) {
	var f = _v0.b;
	return f;
};
var $jfmengels$elm_review$Vendor$Zipper$next = function (_v0) {
	var p = _v0.a;
	var f = _v0.b;
	var n = _v0.c;
	if (!n.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var h = n.a;
		var t = n.b;
		return $elm$core$Maybe$Just(
			A3(
				$jfmengels$elm_review$Vendor$Zipper$Zipper,
				A2($elm$core$List$cons, f, p),
				h,
				t));
	}
};
var $jfmengels$elm_review$Review$Project$Valid$advanceZipper = F3(
	function (path, oldZipper, newZipper) {
		advanceZipper:
		while (true) {
			var current = $jfmengels$elm_review$Vendor$Zipper$current(newZipper).fP.c_;
			if (_Utils_eq(current, path) || (!_Utils_eq(
				current,
				$jfmengels$elm_review$Vendor$Zipper$current(oldZipper).fP.c_))) {
				return newZipper;
			} else {
				var _v0 = A3(
					$elm$core$Maybe$map2,
					$elm$core$Tuple$pair,
					$jfmengels$elm_review$Vendor$Zipper$next(oldZipper),
					$jfmengels$elm_review$Vendor$Zipper$next(newZipper));
				if (!_v0.$) {
					var _v1 = _v0.a;
					var old = _v1.a;
					var _new = _v1.b;
					var $temp$path = path,
						$temp$oldZipper = old,
						$temp$newZipper = _new;
					path = $temp$path;
					oldZipper = $temp$oldZipper;
					newZipper = $temp$newZipper;
					continue advanceZipper;
				} else {
					return newZipper;
				}
			}
		}
	});
var $jfmengels$elm_review$Vendor$Zipper$focusr = F2(
	function (fc, zipper) {
		focusr:
		while (true) {
			if (fc(
				$jfmengels$elm_review$Vendor$Zipper$current(zipper))) {
				return $elm$core$Maybe$Just(zipper);
			} else {
				var _v0 = $jfmengels$elm_review$Vendor$Zipper$next(zipper);
				if (!_v0.$) {
					var z = _v0.a;
					var $temp$fc = fc,
						$temp$zipper = z;
					fc = $temp$fc;
					zipper = $temp$zipper;
					continue focusr;
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Project$Valid$importedModulesSet = F2(
	function (ast, dependencyModules) {
		return A2(
			$elm$core$Set$diff,
			A3(
				$elm$core$List$foldl,
				F2(
					function (import_, set) {
						return A2(
							$elm$core$Set$insert,
							$stil4m$elm_syntax$Elm$Syntax$Node$value(
								$stil4m$elm_syntax$Elm$Syntax$Node$value(import_).dE),
							set);
					}),
				$elm$core$Set$empty,
				ast.g4),
			dependencyModules);
	});
var $jfmengels$elm_review$Vendor$Zipper$prev = function (_v0) {
	var p = _v0.a;
	var f = _v0.b;
	var n = _v0.c;
	if (!p.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var h = p.a;
		var t = p.b;
		return $elm$core$Maybe$Just(
			A3(
				$jfmengels$elm_review$Vendor$Zipper$Zipper,
				t,
				h,
				A2($elm$core$List$cons, f, n)));
	}
};
var $jfmengels$elm_review$Vendor$Zipper$toEndHelper = F2(
	function (f, acc) {
		toEndHelper:
		while (true) {
			var _v0 = f(acc);
			if (!_v0.$) {
				var val = _v0.a;
				var $temp$f = f,
					$temp$acc = val;
				f = $temp$f;
				acc = $temp$acc;
				continue toEndHelper;
			} else {
				return acc;
			}
		}
	});
var $jfmengels$elm_review$Vendor$Zipper$start = $jfmengels$elm_review$Vendor$Zipper$toEndHelper($jfmengels$elm_review$Vendor$Zipper$prev);
var $jfmengels$elm_review$Review$Project$Valid$addParsedModule = F3(
	function (_v0, maybeModuleZipper, _v1) {
		var path = _v0.hw;
		var source = _v0.hK;
		var ast = _v0.gv;
		var project = _v1;
		var _v2 = A2($elm$core$Dict$get, path, project.ac);
		if (!_v2.$) {
			var existingModule = _v2.a;
			var osAgnosticPath = $jfmengels$elm_review$Path$makeOSAgnostic(path);
			var module_ = $jfmengels$elm_review$Review$Project$ProjectModule$create(
				{
					gv: ast,
					fy: A2(
						$elm$core$List$any,
						function (dir) {
							return A2(
								$elm$core$String$startsWith,
								$jfmengels$elm_review$Path$makeOSAgnostic(dir),
								osAgnosticPath);
						},
						project.eP),
					hw: path,
					hK: source
				});
			var newProject = _Utils_update(
				project,
				{
					ac: A3($elm$core$Dict$insert, path, module_, project.ac)
				});
			if (_Utils_eq(
				A2(
					$jfmengels$elm_review$Review$Project$Valid$importedModulesSet,
					$jfmengels$elm_review$Review$Project$ProjectModule$ast(existingModule),
					project.dc),
				A2($jfmengels$elm_review$Review$Project$Valid$importedModulesSet, ast, project.dc))) {
				var newModuleZipper = function () {
					if (!maybeModuleZipper.$) {
						var moduleZipper_ = maybeModuleZipper.a;
						return moduleZipper_;
					} else {
						var moduleZipper_ = $jfmengels$elm_review$Review$Project$Valid$unsafeCreateZipper(newProject.cA);
						return A2(
							$elm$core$Maybe$withDefault,
							moduleZipper_,
							A2(
								$jfmengels$elm_review$Vendor$Zipper$focusr,
								function (mod) {
									return _Utils_eq(mod.fP.c_, path);
								},
								moduleZipper_));
					}
				}();
				return $elm$core$Result$Ok(
					_Utils_Tuple2(newProject, newModuleZipper));
			} else {
				var graph = $jfmengels$elm_review$Review$Project$Valid$buildModuleGraph(newProject.ac);
				var _v4 = $jfmengels$elm_review$Vendor$Graph$checkAcyclic(graph);
				if (_v4.$ === 1) {
					var edge = _v4.a;
					return $elm$core$Result$Err(
						$jfmengels$elm_review$Review$Fix$FixProblem$CreatesImportCycle(
							A3($jfmengels$elm_review$Review$ImportCycle$findCycle, newProject.ac, graph, edge)));
				} else {
					var acyclicGraph = _v4.a;
					var sortedModules = $jfmengels$elm_review$Vendor$Graph$topologicalSort(acyclicGraph);
					var moduleZipper_ = $jfmengels$elm_review$Review$Project$Valid$unsafeCreateZipper(sortedModules);
					var newModuleZipper = function () {
						if (!maybeModuleZipper.$) {
							var prevModuleZipper = maybeModuleZipper.a;
							return A3(
								$jfmengels$elm_review$Review$Project$Valid$advanceZipper,
								path,
								$jfmengels$elm_review$Vendor$Zipper$start(prevModuleZipper),
								moduleZipper_);
						} else {
							return A2(
								$elm$core$Maybe$withDefault,
								moduleZipper_,
								A2(
									$jfmengels$elm_review$Vendor$Zipper$focusr,
									function (mod) {
										return _Utils_eq(mod.fP.c_, path);
									},
									moduleZipper_));
						}
					}();
					return $elm$core$Result$Ok(
						_Utils_Tuple2(
							_Utils_update(
								newProject,
								{fI: graph, cA: sortedModules}),
							newModuleZipper));
				}
			}
		} else {
			return $elm$core$Result$Err(
				$jfmengels$elm_review$Review$Fix$FixProblem$Unchanged(
					{de: _List_Nil, g_: path}));
		}
	});
var $jfmengels$elm_review$Review$Fix$FixProblem$InvalidElm = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Review$Fix$Internal$editModule = F3(
	function (edits, filePath, originalSourceCode) {
		var _v0 = A3($jfmengels$elm_review$Review$Fix$Internal$applyEdits, filePath, edits, originalSourceCode);
		if (!_v0.$) {
			var fixedSourceCode = _v0.a;
			var _v1 = $stil4m$elm_syntax$Elm$Parser$parseToFile(fixedSourceCode);
			if (!_v1.$) {
				var ast = _v1.a;
				return $elm$core$Result$Ok(
					{gv: ast, hK: fixedSourceCode});
			} else {
				var parsingErrors = _v1.a;
				return $elm$core$Result$Err(
					$jfmengels$elm_review$Review$Fix$FixProblem$InvalidElm(
						{de: edits, g_: filePath, fT: parsingErrors, hK: fixedSourceCode}));
			}
		} else {
			var err = _v0.a;
			return $elm$core$Result$Err(err);
		}
	});
var $jfmengels$elm_review$Review$Project$Valid$getModuleByPath = F2(
	function (path, _v0) {
		var project = _v0;
		return A2($elm$core$Dict$get, path, project.ac);
	});
var $jfmengels$elm_review$Review$Rule$applySingleModuleFix = F5(
	function (project, maybeModuleZipper, err, targetPath, edits) {
		var headError = err;
		var _v0 = A2($jfmengels$elm_review$Review$Project$Valid$getModuleByPath, targetPath, project);
		if (_v0.$ === 1) {
			return $elm$core$Result$Err(err);
		} else {
			var file = _v0.a;
			var _v1 = A2(
				$elm$core$Result$andThen,
				function (fixResult) {
					return A2(
						$elm$core$Result$map,
						function (_v2) {
							var newProject = _v2.a;
							var newModuleZipper = _v2.b;
							return {
								P: A2($jfmengels$elm_review$Review$Rule$FixedElmModule, fixResult, newModuleZipper),
								h: newProject
							};
						},
						A3(
							$jfmengels$elm_review$Review$Project$Valid$addParsedModule,
							{gv: fixResult.gv, hw: targetPath, hK: fixResult.hK},
							maybeModuleZipper,
							project));
				},
				A3(
					$jfmengels$elm_review$Review$Fix$Internal$editModule,
					edits,
					$jfmengels$elm_review$Review$Project$ProjectModule$path(file),
					$jfmengels$elm_review$Review$Project$ProjectModule$source(file)));
			if (_v1.$ === 1) {
				var fixProblem = _v1.a;
				return $elm$core$Result$Err(
					A2($jfmengels$elm_review$Review$Rule$markFixesAsProblem, fixProblem, headError));
			} else {
				var fixResult = _v1.a;
				return $elm$core$Result$Ok(fixResult);
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$applyEditFix = F5(
	function (project, maybeModuleZipper, err, target, fixes) {
		switch (target.$) {
			case 0:
				var targetPath = target.a;
				return A5($jfmengels$elm_review$Review$Rule$applySingleModuleFix, project, maybeModuleZipper, err, targetPath, fixes);
			case 1:
				return A3($jfmengels$elm_review$Review$Rule$applyElmJsonFix, project, err, fixes);
			case 2:
				return A3($jfmengels$elm_review$Review$Rule$applyReadmeFix, project, err, fixes);
			default:
				var targetPath = target.a;
				return A4($jfmengels$elm_review$Review$Rule$applyExtraFileFix, project, err, targetPath, fixes);
		}
	});
var $jfmengels$elm_review$Review$Rule$RemovedElmModule = {$: 1};
var $jfmengels$elm_review$Review$Project$Valid$removeExtraFile = F2(
	function (path, _v0) {
		var project = _v0;
		var extraFilesContentHashes = A2($elm$core$Dict$remove, path, project.K);
		return _Utils_update(
			project,
			{
				ap: A2($elm$core$Dict$remove, path, project.ap),
				cR: $jfmengels$elm_review$Review$Cache$ContentHash$combine(extraFilesContentHashes),
				K: extraFilesContentHashes
			});
	});
var $jfmengels$elm_review$Review$Fix$FixProblem$RemovesUnknownFile = function (a) {
	return {$: 6, a: a};
};
var $jfmengels$elm_review$Review$Project$Valid$removeModule = F2(
	function (path, _v0) {
		var project = _v0;
		if (A2($elm$core$Dict$member, path, project.ac)) {
			var modulesByPath = A2($elm$core$Dict$remove, path, project.ac);
			var graph = $jfmengels$elm_review$Review$Project$Valid$buildModuleGraph(modulesByPath);
			var _v1 = A2(
				$elm$core$Result$map,
				$jfmengels$elm_review$Vendor$Graph$topologicalSort,
				$jfmengels$elm_review$Vendor$Graph$checkAcyclic(graph));
			if (_v1.$ === 1) {
				var edge = _v1.a;
				return $elm$core$Result$Err(
					$jfmengels$elm_review$Review$Fix$FixProblem$CreatesImportCycle(
						A3($jfmengels$elm_review$Review$ImportCycle$findCycle, project.ac, graph, edge)));
			} else {
				var sortedModules = _v1.a;
				return $elm$core$Result$Ok(
					_Utils_update(
						project,
						{fI: graph, ac: modulesByPath, cA: sortedModules}));
			}
		} else {
			return $elm$core$Result$Err(
				$jfmengels$elm_review$Review$Fix$FixProblem$RemovesUnknownFile(path));
		}
	});
var $jfmengels$elm_review$Review$Rule$applyFileDeletionFix = F3(
	function (project, _v0, target) {
		var err = _v0;
		switch (target.$) {
			case 0:
				var targetPath = target.a;
				var _v2 = A2($jfmengels$elm_review$Review$Project$Valid$removeModule, targetPath, project);
				if (!_v2.$) {
					var newProject = _v2.a;
					return $elm$core$Result$Ok(
						{P: $jfmengels$elm_review$Review$Rule$RemovedElmModule, h: newProject});
				} else {
					var fixProblem = _v2.a;
					return $elm$core$Result$Err(
						A2($jfmengels$elm_review$Review$Rule$markFixesAsProblem, fixProblem, err));
				}
			case 3:
				var targetPath = target.a;
				return $elm$core$Result$Ok(
					{
						P: $jfmengels$elm_review$Review$Rule$FixedExtraFile,
						h: A2($jfmengels$elm_review$Review$Project$Valid$removeExtraFile, targetPath, project)
					});
			case 1:
				return $elm$core$Result$Ok(
					{P: $jfmengels$elm_review$Review$Rule$FixedElmJson, h: project});
			default:
				return $elm$core$Result$Ok(
					{P: $jfmengels$elm_review$Review$Rule$FixedReadme, h: project});
		}
	});
var $jfmengels$elm_review$Review$Rule$applyFix = F4(
	function (project, maybeModuleZipper, err, _v0) {
		var target = _v0.a;
		var fixes = _v0.b;
		if (!fixes.$) {
			var edits = fixes.a;
			return A5($jfmengels$elm_review$Review$Rule$applyEditFix, project, maybeModuleZipper, err, target, edits);
		} else {
			return A3($jfmengels$elm_review$Review$Rule$applyFileDeletionFix, project, err, target);
		}
	});
var $jfmengels$elm_review$Vendor$Zipper$position = function (_v0) {
	var previous = _v0.a;
	return $elm$core$List$length(previous);
};
var $jfmengels$elm_review$Review$Rule$earlierFixedFile = F2(
	function (a, b) {
		var _v0 = _Utils_Tuple2(a, b);
		_v0$1:
		while (true) {
			_v0$2:
			while (true) {
				_v0$3:
				while (true) {
					_v0$4:
					while (true) {
						_v0$5:
						while (true) {
							_v0$6:
							while (true) {
								switch (_v0.a.$) {
									case 2:
										var _v1 = _v0.a;
										return $jfmengels$elm_review$Review$Rule$FixedElmJson;
									case 3:
										switch (_v0.b.$) {
											case 2:
												break _v0$1;
											case 3:
												break _v0$2;
											case 4:
												break _v0$2;
											case 1:
												break _v0$2;
											default:
												break _v0$2;
										}
									case 4:
										switch (_v0.b.$) {
											case 2:
												break _v0$1;
											case 3:
												break _v0$3;
											case 4:
												break _v0$4;
											case 1:
												break _v0$4;
											default:
												break _v0$4;
										}
									case 1:
										switch (_v0.b.$) {
											case 2:
												break _v0$1;
											case 3:
												break _v0$3;
											case 4:
												break _v0$5;
											case 1:
												break _v0$6;
											default:
												break _v0$6;
										}
									default:
										switch (_v0.b.$) {
											case 2:
												break _v0$1;
											case 3:
												break _v0$3;
											case 4:
												break _v0$5;
											case 1:
												var _v8 = _v0.b;
												return $jfmengels$elm_review$Review$Rule$RemovedElmModule;
											default:
												var _v9 = _v0.a;
												var zipperA = _v9.b;
												var _v10 = _v0.b;
												var zipperB = _v10.b;
												return (_Utils_cmp(
													$jfmengels$elm_review$Vendor$Zipper$position(zipperA),
													$jfmengels$elm_review$Vendor$Zipper$position(zipperB)) < 1) ? a : b;
										}
								}
							}
							var _v7 = _v0.a;
							return $jfmengels$elm_review$Review$Rule$RemovedElmModule;
						}
						var _v6 = _v0.b;
						return $jfmengels$elm_review$Review$Rule$FixedExtraFile;
					}
					var _v5 = _v0.a;
					return $jfmengels$elm_review$Review$Rule$FixedExtraFile;
				}
				var _v4 = _v0.b;
				return $jfmengels$elm_review$Review$Rule$FixedReadme;
			}
			var _v3 = _v0.a;
			return $jfmengels$elm_review$Review$Rule$FixedReadme;
		}
		var _v2 = _v0.b;
		return $jfmengels$elm_review$Review$Rule$FixedElmJson;
	});
var $jfmengels$elm_review$Review$Rule$applyFixes = F4(
	function (maybeModuleZipper, err, fixes, acc) {
		applyFixes:
		while (true) {
			if (!fixes.b) {
				return $elm$core$Result$Ok(acc);
			} else {
				var fix = fixes.a;
				var rest = fixes.b;
				var _v1 = A4($jfmengels$elm_review$Review$Rule$applyFix, acc.h, maybeModuleZipper, err, fix);
				if (!_v1.$) {
					var fixResult = _v1.a;
					var $temp$maybeModuleZipper = maybeModuleZipper,
						$temp$err = err,
						$temp$fixes = rest,
						$temp$acc = {
						P: A2($jfmengels$elm_review$Review$Rule$earlierFixedFile, fixResult.P, acc.P),
						h: fixResult.h
					};
					maybeModuleZipper = $temp$maybeModuleZipper;
					err = $temp$err;
					fixes = $temp$fixes;
					acc = $temp$acc;
					continue applyFixes;
				} else {
					var fixResultErr = _v1;
					return fixResultErr;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$fixTriesToDeleteFiles = function (list) {
	return A2(
		$elm$core$List$any,
		function (_v0) {
			var fix = _v0.b;
			if (!fix.$) {
				return false;
			} else {
				return true;
			}
		},
		list);
};
var $jfmengels$elm_review$Review$Rule$isFixable = F3(
	function (supportsFileDeletion, predicate, untouchedError) {
		var err = untouchedError;
		var _v0 = err.fm;
		if (!_v0.$) {
			return $elm$core$Result$Err(untouchedError);
		} else {
			if (predicate(
				{dd: err.dd, g_: err.g_, a_: err.a_, eG: err.eG, eH: err.eH})) {
				var _v1 = A2($jfmengels$elm_review$Review$Error$ReviewError$compileFixes, err.cT, err.fm);
				if (!_v1.$) {
					if (!_v1.a.$) {
						var list = _v1.a.a;
						return ((!supportsFileDeletion) && $jfmengels$elm_review$Review$Rule$fixTriesToDeleteFiles(list)) ? $elm$core$Result$Err(untouchedError) : $elm$core$Result$Ok(list);
					} else {
						var _v2 = _v1.a;
						return $elm$core$Result$Err(untouchedError);
					}
				} else {
					var fixProblem = _v1.a;
					return $elm$core$Result$Err(
						A2($jfmengels$elm_review$Review$Rule$markFixesAsProblem, fixProblem, err));
				}
			} else {
				return $elm$core$Result$Err(untouchedError);
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$findFixHelp = F6(
	function (project, supportsFileDeletion, fixablePredicate, errors, accErrors, maybeModuleZipper) {
		findFixHelp:
		while (true) {
			if (!errors.b) {
				return $jfmengels$elm_review$Review$Rule$FoundNoFixesHelp(accErrors);
			} else {
				var err = errors.a;
				var restOfErrors = errors.b;
				var _v1 = A3($jfmengels$elm_review$Review$Rule$isFixable, supportsFileDeletion, fixablePredicate, err);
				if (_v1.$ === 1) {
					var updatedError = _v1.a;
					var $temp$project = project,
						$temp$supportsFileDeletion = supportsFileDeletion,
						$temp$fixablePredicate = fixablePredicate,
						$temp$errors = restOfErrors,
						$temp$accErrors = A2($elm$core$List$cons, updatedError, accErrors),
						$temp$maybeModuleZipper = maybeModuleZipper;
					project = $temp$project;
					supportsFileDeletion = $temp$supportsFileDeletion;
					fixablePredicate = $temp$fixablePredicate;
					errors = $temp$errors;
					accErrors = $temp$accErrors;
					maybeModuleZipper = $temp$maybeModuleZipper;
					continue findFixHelp;
				} else {
					var fixes = _v1.a;
					if (!fixes.b) {
						var $temp$project = project,
							$temp$supportsFileDeletion = supportsFileDeletion,
							$temp$fixablePredicate = fixablePredicate,
							$temp$errors = restOfErrors,
							$temp$accErrors = A2($elm$core$List$cons, err, accErrors),
							$temp$maybeModuleZipper = maybeModuleZipper;
						project = $temp$project;
						supportsFileDeletion = $temp$supportsFileDeletion;
						fixablePredicate = $temp$fixablePredicate;
						errors = $temp$errors;
						accErrors = $temp$accErrors;
						maybeModuleZipper = $temp$maybeModuleZipper;
						continue findFixHelp;
					} else {
						var firstFix = fixes.a;
						var restOfFixes = fixes.b;
						var _v3 = A2(
							$elm$core$Result$andThen,
							function (fixResult) {
								return A4($jfmengels$elm_review$Review$Rule$applyFixes, maybeModuleZipper, err, restOfFixes, fixResult);
							},
							A4($jfmengels$elm_review$Review$Rule$applyFix, project, maybeModuleZipper, err, firstFix));
						if (!_v3.$) {
							var fixResult = _v3.a;
							return A2(
								$jfmengels$elm_review$Review$Rule$FoundFixHelp,
								_Utils_ap(errors, accErrors),
								{
									bb: $jfmengels$elm_review$Review$Rule$errorToReviewError(err),
									P: fixResult.P,
									h: fixResult.h
								});
						} else {
							var nonAppliedError = _v3.a;
							var $temp$project = project,
								$temp$supportsFileDeletion = supportsFileDeletion,
								$temp$fixablePredicate = fixablePredicate,
								$temp$errors = restOfErrors,
								$temp$accErrors = A2($elm$core$List$cons, nonAppliedError, accErrors),
								$temp$maybeModuleZipper = maybeModuleZipper;
							project = $temp$project;
							supportsFileDeletion = $temp$supportsFileDeletion;
							fixablePredicate = $temp$fixablePredicate;
							errors = $temp$errors;
							accErrors = $temp$accErrors;
							maybeModuleZipper = $temp$maybeModuleZipper;
							continue findFixHelp;
						}
					}
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Fix$FixedErrors$count = function (_v0) {
	var fixedErrors = _v0;
	return fixedErrors.e2;
};
var $jfmengels$elm_review$Review$Rule$fixedError = F2(
	function (fixedErrors, data) {
		return _List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('apply-fix')),
				_Utils_Tuple2(
				'ruleName',
				$elm$json$Json$Encode$string(data.eH)),
				_Utils_Tuple2(
				'filePath',
				$elm$json$Json$Encode$string(data.g_)),
				_Utils_Tuple2(
				'count',
				$elm$json$Json$Encode$int(
					$jfmengels$elm_review$Review$Fix$FixedErrors$count(fixedErrors)))
			]);
	});
var $jfmengels$elm_review$Review$Error$FileTarget$ElmJson = {$: 1};
var $jfmengels$elm_review$Review$Error$Target$elmJson = $jfmengels$elm_review$Review$Error$Target$FileTarget($jfmengels$elm_review$Review$Error$FileTarget$ElmJson);
var $jfmengels$elm_review$Review$Fix$FixedErrors$insert = F2(
	function (error, _v0) {
		var filePath = error.g_;
		var target = error.dX;
		var fixedErrors = _v0;
		return {
			e2: fixedErrors.e2 + 1,
			ca: A3(
				$elm$core$Dict$update,
				filePath,
				function (errors) {
					return $elm$core$Maybe$Just(
						A2(
							$elm$core$List$cons,
							error,
							A2($elm$core$Maybe$withDefault, _List_Nil, errors)));
				},
				fixedErrors.ca),
			dU: fixedErrors.dU || _Utils_eq(target, $jfmengels$elm_review$Review$Error$Target$elmJson)
		};
	});
var $jfmengels$elm_review$Review$Logger$log = F3(
	function (_v0, message, data) {
		var logFn = _v0;
		return A2(
			$elm$core$Basics$always,
			data,
			logFn(message));
	});
var $jfmengels$elm_review$Review$Options$Internal$shouldApplyFix = function (reviewOptionsData) {
	var _v0 = reviewOptionsData.aj;
	if (_v0.$ === 1) {
		return $elm$core$Dict$isEmpty(reviewOptionsData.gc) ? $elm$core$Maybe$Just(
			function (err) {
				return !reviewOptionsData.ft(err);
			}) : $elm$core$Maybe$Just(
			function (err) {
				return (!A2(
					$elm$core$Dict$member,
					_Utils_Tuple2(err.eH, err.g_),
					reviewOptionsData.gc)) && (!reviewOptionsData.ft(err));
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jfmengels$elm_review$Review$Fix$FixedErrors$shouldAbort = function (_v0) {
	var fixedErrors = _v0;
	return fixedErrors.dU;
};
var $jfmengels$elm_review$Review$Options$Internal$shouldContinueLookingForFixes = F2(
	function (reviewOptionsData, fixedErrors) {
		var _v0 = reviewOptionsData.aj;
		if (_v0.$ === 1) {
			if (!_v0.a.$) {
				var fixLimit = _v0.a.a;
				return (!$jfmengels$elm_review$Review$Fix$FixedErrors$shouldAbort(fixedErrors)) && (_Utils_cmp(
					fixLimit,
					$jfmengels$elm_review$Review$Fix$FixedErrors$count(fixedErrors)) > 0);
			} else {
				var _v1 = _v0.a;
				return !$jfmengels$elm_review$Review$Fix$FixedErrors$shouldAbort(fixedErrors);
			}
		} else {
			return false;
		}
	});
var $jfmengels$elm_review$Review$Rule$findFix = F6(
	function (reviewOptions, project, updateErrors, errors, fixedErrors, maybeModuleZipper) {
		var _v0 = $jfmengels$elm_review$Review$Options$Internal$shouldApplyFix(reviewOptions);
		if (_v0.$ === 1) {
			return $jfmengels$elm_review$Review$Rule$FoundNoFixes(
				updateErrors(errors));
		} else {
			var fixablePredicate = _v0.a;
			var _v1 = A6($jfmengels$elm_review$Review$Rule$findFixHelp, project, reviewOptions.ga, fixablePredicate, errors, _List_Nil, maybeModuleZipper);
			if (!_v1.$) {
				var errorsWithFailedFixes = _v1.a;
				return $jfmengels$elm_review$Review$Rule$FoundNoFixes(
					updateErrors(errorsWithFailedFixes));
			} else {
				var errorsWithFailedFixes = _v1.a;
				var fixResult = _v1.b;
				var newFixedErrors = A2($jfmengels$elm_review$Review$Fix$FixedErrors$insert, fixResult.bb, fixedErrors);
				var nextStep = A2($jfmengels$elm_review$Review$Options$Internal$shouldContinueLookingForFixes, reviewOptions, newFixedErrors) ? $jfmengels$elm_review$Review$Rule$ShouldContinue(newFixedErrors) : $jfmengels$elm_review$Review$Rule$ShouldAbort(newFixedErrors);
				return A3(
					$jfmengels$elm_review$Review$Logger$log,
					reviewOptions.dA,
					A2(
						$jfmengels$elm_review$Review$Rule$fixedError,
						newFixedErrors,
						{
							g_: $jfmengels$elm_review$Review$Rule$errorFilePath(fixResult.bb),
							eH: $jfmengels$elm_review$Review$Rule$errorRuleName(fixResult.bb)
						}),
					A2(
						$jfmengels$elm_review$Review$Rule$FoundFix,
						updateErrors(errorsWithFailedFixes),
						_Utils_Tuple2(nextStep, fixResult)));
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$standardFindFix = F5(
	function (reviewOptions, project, fixedErrors, updateErrors, errors) {
		var _v0 = A6($jfmengels$elm_review$Review$Rule$findFix, reviewOptions, project, updateErrors, errors, fixedErrors, $elm$core$Maybe$Nothing);
		if (!_v0.$) {
			var newRule = _v0.a;
			return $jfmengels$elm_review$Review$Rule$FoundNoFixesStandard(newRule);
		} else {
			var newRule = _v0.a;
			var _v1 = _v0.b;
			var postFixStatus = _v1.a;
			var fixResult = _v1.b;
			var _v2 = function () {
				if (!postFixStatus.$) {
					var newFixedErrors_ = postFixStatus.a;
					return _Utils_Tuple2(newFixedErrors_, $jfmengels$elm_review$Review$Rule$EndAnalysis);
				} else {
					var newFixedErrors_ = postFixStatus.a;
					return _Utils_Tuple2(
						newFixedErrors_,
						function () {
							var _v4 = fixResult.P;
							switch (_v4.$) {
								case 2:
									return $jfmengels$elm_review$Review$Rule$ElmJson;
								case 3:
									return $jfmengels$elm_review$Review$Rule$Readme;
								case 4:
									return $jfmengels$elm_review$Review$Rule$ExtraFiles;
								case 0:
									var zipper = _v4.b;
									return $jfmengels$elm_review$Review$Rule$Modules(
										$elm$core$Maybe$Just(zipper));
								default:
									return $jfmengels$elm_review$Review$Rule$Modules($elm$core$Maybe$Nothing);
							}
						}());
				}
			}();
			var newFixedErrors = _v2.a;
			var step = _v2.b;
			return $jfmengels$elm_review$Review$Rule$FoundFixStandard(
				{cs: newFixedErrors, ct: fixResult.h, cu: newRule, t: step});
		}
	});
var $jfmengels$elm_review$Review$Rule$computeDependencies = F6(
	function (reviewOptions, project, fixedErrors, dependenciesData, remainingRules, accRules) {
		computeDependencies:
		while (true) {
			if (!remainingRules.b) {
				return {
					g0: fixedErrors,
					h: project,
					f: accRules,
					t: $jfmengels$elm_review$Review$Rule$Modules(
						$elm$core$Maybe$Just(
							$jfmengels$elm_review$Review$Project$Valid$moduleZipper(project)))
				};
			} else {
				var untouched = remainingRules.a;
				var rule = untouched;
				var rest = remainingRules.b;
				var _v1 = rule.I;
				if (!_v1.$) {
					var visitor = _v1.a;
					var _v2 = A2(visitor, project, dependenciesData);
					var errors = _v2.a;
					var updatedRule = _v2.b;
					var _v3 = A5($jfmengels$elm_review$Review$Rule$standardFindFix, reviewOptions, project, fixedErrors, updatedRule.eJ, errors);
					if (_v3.$ === 1) {
						var newProject = _v3.a.ct;
						var newRule = _v3.a.cu;
						var newFixedErrors = _v3.a.cs;
						var step = _v3.a.t;
						return {
							g0: newFixedErrors,
							h: newProject,
							f: A2(
								$elm$core$List$cons,
								newRule,
								_Utils_ap(rest, accRules)),
							t: step
						};
					} else {
						var newRule = _v3.a;
						var $temp$reviewOptions = reviewOptions,
							$temp$project = project,
							$temp$fixedErrors = fixedErrors,
							$temp$dependenciesData = dependenciesData,
							$temp$remainingRules = rest,
							$temp$accRules = A2($elm$core$List$cons, newRule, accRules);
						reviewOptions = $temp$reviewOptions;
						project = $temp$project;
						fixedErrors = $temp$fixedErrors;
						dependenciesData = $temp$dependenciesData;
						remainingRules = $temp$remainingRules;
						accRules = $temp$accRules;
						continue computeDependencies;
					}
				} else {
					var $temp$reviewOptions = reviewOptions,
						$temp$project = project,
						$temp$fixedErrors = fixedErrors,
						$temp$dependenciesData = dependenciesData,
						$temp$remainingRules = rest,
						$temp$accRules = A2($elm$core$List$cons, untouched, accRules);
					reviewOptions = $temp$reviewOptions;
					project = $temp$project;
					fixedErrors = $temp$fixedErrors;
					dependenciesData = $temp$dependenciesData;
					remainingRules = $temp$remainingRules;
					accRules = $temp$accRules;
					continue computeDependencies;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$computeElmJson = F6(
	function (reviewOptions, project, fixedErrors, elmJsonData, remainingRules, accRules) {
		computeElmJson:
		while (true) {
			if (!remainingRules.b) {
				return {g0: fixedErrors, h: project, f: accRules, t: $jfmengels$elm_review$Review$Rule$Readme};
			} else {
				var untouched = remainingRules.a;
				var rule = untouched;
				var rest = remainingRules.b;
				var _v1 = rule.J;
				if (!_v1.$) {
					var visitor = _v1.a;
					var _v2 = A2(visitor, project, elmJsonData);
					var errors = _v2.a;
					var updatedRule = _v2.b;
					var _v3 = A5($jfmengels$elm_review$Review$Rule$standardFindFix, reviewOptions, project, fixedErrors, updatedRule.eK, errors);
					if (_v3.$ === 1) {
						var newProject = _v3.a.ct;
						var newRule = _v3.a.cu;
						var newFixedErrors = _v3.a.cs;
						var step = _v3.a.t;
						return {
							g0: newFixedErrors,
							h: newProject,
							f: A2(
								$elm$core$List$cons,
								newRule,
								_Utils_ap(rest, accRules)),
							t: step
						};
					} else {
						var newRule = _v3.a;
						var $temp$reviewOptions = reviewOptions,
							$temp$project = project,
							$temp$fixedErrors = fixedErrors,
							$temp$elmJsonData = elmJsonData,
							$temp$remainingRules = rest,
							$temp$accRules = A2($elm$core$List$cons, newRule, accRules);
						reviewOptions = $temp$reviewOptions;
						project = $temp$project;
						fixedErrors = $temp$fixedErrors;
						elmJsonData = $temp$elmJsonData;
						remainingRules = $temp$remainingRules;
						accRules = $temp$accRules;
						continue computeElmJson;
					}
				} else {
					var $temp$reviewOptions = reviewOptions,
						$temp$project = project,
						$temp$fixedErrors = fixedErrors,
						$temp$elmJsonData = elmJsonData,
						$temp$remainingRules = rest,
						$temp$accRules = A2($elm$core$List$cons, untouched, accRules);
					reviewOptions = $temp$reviewOptions;
					project = $temp$project;
					fixedErrors = $temp$fixedErrors;
					elmJsonData = $temp$elmJsonData;
					remainingRules = $temp$remainingRules;
					accRules = $temp$accRules;
					continue computeElmJson;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$Dependencies = {$: 3};
var $jfmengels$elm_review$Review$Rule$computeExtraFiles = F6(
	function (reviewOptions, project, fixedErrors, extraFiles, remainingRules, accRules) {
		computeExtraFiles:
		while (true) {
			if (!remainingRules.b) {
				return {g0: fixedErrors, h: project, f: accRules, t: $jfmengels$elm_review$Review$Rule$Dependencies};
			} else {
				var untouched = remainingRules.a;
				var rule = untouched;
				var rest = remainingRules.b;
				var _v1 = rule.L;
				if (!_v1.$) {
					var visitor = _v1.a;
					var _v2 = A2(visitor, project, extraFiles);
					var errors = _v2.a;
					var updatedRule = _v2.b;
					var _v3 = A5($jfmengels$elm_review$Review$Rule$standardFindFix, reviewOptions, project, fixedErrors, updatedRule.eL, errors);
					if (_v3.$ === 1) {
						var newProject = _v3.a.ct;
						var newRule = _v3.a.cu;
						var newFixedErrors = _v3.a.cs;
						var step = _v3.a.t;
						return {
							g0: newFixedErrors,
							h: newProject,
							f: A2(
								$elm$core$List$cons,
								newRule,
								_Utils_ap(rest, accRules)),
							t: step
						};
					} else {
						var newRule = _v3.a;
						var $temp$reviewOptions = reviewOptions,
							$temp$project = project,
							$temp$fixedErrors = fixedErrors,
							$temp$extraFiles = extraFiles,
							$temp$remainingRules = rest,
							$temp$accRules = A2($elm$core$List$cons, newRule, accRules);
						reviewOptions = $temp$reviewOptions;
						project = $temp$project;
						fixedErrors = $temp$fixedErrors;
						extraFiles = $temp$extraFiles;
						remainingRules = $temp$remainingRules;
						accRules = $temp$accRules;
						continue computeExtraFiles;
					}
				} else {
					var $temp$reviewOptions = reviewOptions,
						$temp$project = project,
						$temp$fixedErrors = fixedErrors,
						$temp$extraFiles = extraFiles,
						$temp$remainingRules = rest,
						$temp$accRules = A2($elm$core$List$cons, untouched, accRules);
					reviewOptions = $temp$reviewOptions;
					project = $temp$project;
					fixedErrors = $temp$fixedErrors;
					extraFiles = $temp$extraFiles;
					remainingRules = $temp$remainingRules;
					accRules = $temp$accRules;
					continue computeExtraFiles;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$computeFinalProjectEvaluation = F5(
	function (reviewOptions, project, fixedErrors, remainingRules, accRules) {
		computeFinalProjectEvaluation:
		while (true) {
			if (!remainingRules.b) {
				return {g0: fixedErrors, h: project, f: accRules, t: $jfmengels$elm_review$Review$Rule$EndAnalysis};
			} else {
				var untouched = remainingRules.a;
				var rule = untouched;
				var rest = remainingRules.b;
				var _v1 = rule.ek;
				if (!_v1.$) {
					var visitor = _v1.a;
					var _v2 = visitor(0);
					var errors = _v2.a;
					var updatedRule = _v2.b;
					var _v3 = A5($jfmengels$elm_review$Review$Rule$standardFindFix, reviewOptions, project, fixedErrors, updatedRule.eM, errors);
					if (_v3.$ === 1) {
						var newProject = _v3.a.ct;
						var newRule = _v3.a.cu;
						var newFixedErrors = _v3.a.cs;
						var step = _v3.a.t;
						return {
							g0: newFixedErrors,
							h: newProject,
							f: A2(
								$elm$core$List$cons,
								newRule,
								_Utils_ap(rest, accRules)),
							t: step
						};
					} else {
						var newRule = _v3.a;
						var $temp$reviewOptions = reviewOptions,
							$temp$project = project,
							$temp$fixedErrors = fixedErrors,
							$temp$remainingRules = rest,
							$temp$accRules = A2($elm$core$List$cons, newRule, accRules);
						reviewOptions = $temp$reviewOptions;
						project = $temp$project;
						fixedErrors = $temp$fixedErrors;
						remainingRules = $temp$remainingRules;
						accRules = $temp$accRules;
						continue computeFinalProjectEvaluation;
					}
				} else {
					var $temp$reviewOptions = reviewOptions,
						$temp$project = project,
						$temp$fixedErrors = fixedErrors,
						$temp$remainingRules = rest,
						$temp$accRules = A2($elm$core$List$cons, untouched, accRules);
					reviewOptions = $temp$reviewOptions;
					project = $temp$project;
					fixedErrors = $temp$fixedErrors;
					remainingRules = $temp$remainingRules;
					accRules = $temp$accRules;
					continue computeFinalProjectEvaluation;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$FinalProjectEvaluation = {$: 5};
var $jfmengels$elm_review$Review$Rule$ModuleVisitStep = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$toRangeLike = function (_v0) {
	var start = _v0.cB;
	return (start.bp << 16) + start.a6;
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$add = F3(
	function (range, moduleName, _v0) {
		var currentModuleName = _v0.a;
		var moduleNameLookupTable = _v0.b;
		return A2(
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$ModuleNameLookupTable,
			currentModuleName,
			A3(
				$elm$core$Dict$insert,
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$toRangeLike(range),
				moduleName,
				moduleNameLookupTable));
	});
var $jfmengels$elm_review$Vendor$ListExtra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return $elm$core$Maybe$Just(first);
				} else {
					var $temp$predicate = predicate,
						$temp$list = rest;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $jfmengels$elm_review$NonEmpty$any = F2(
	function (f, _v0) {
		var x = _v0.a;
		var xs = _v0.b;
		return f(x) || A2($elm$core$List$any, f, xs);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$isInScope = F2(
	function (name, scopes) {
		return A2(
			$jfmengels$elm_review$NonEmpty$any,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.a0;
				},
				$elm$core$Dict$member(name)),
			scopes);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$isValueDeclaredInModule = F2(
	function (valueName, module_) {
		return A2(
			$elm$core$List$any,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.bV;
				},
				$elm$core$Basics$eq(valueName)),
			module_.gm) || (A2(
			$elm$core$List$any,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.bV;
				},
				$elm$core$Basics$eq(valueName)),
			module_.eV) || A2(
			$elm$core$List$any,
			function (union) {
				return A2(
					$elm$core$List$any,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Tuple$first,
						$elm$core$Basics$eq(valueName)),
					union.hS);
			},
			module_.gl));
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForValue = F3(
	function (context, valueName, moduleName) {
		if (!moduleName.b) {
			return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$isInScope, valueName, context.v) ? _List_Nil : A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Dict$get, valueName, context.bL));
		} else {
			if (!moduleName.b.b) {
				var moduleNameOrAlias = moduleName.a;
				var _v1 = A2($elm$core$Dict$get, moduleNameOrAlias, context.bg);
				if (!_v1.$) {
					if (_v1.a.b && (!_v1.a.b.b)) {
						var _v2 = _v1.a;
						var aliasedModuleName = _v2.a;
						return aliasedModuleName;
					} else {
						var aliases = _v1.a;
						var _v3 = A2(
							$jfmengels$elm_review$Vendor$ListExtra$find,
							function (aliasedModuleName) {
								var _v4 = A2($elm$core$Dict$get, aliasedModuleName, context.av);
								if (!_v4.$) {
									var module_ = _v4.a;
									return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$isValueDeclaredInModule, valueName, module_);
								} else {
									return false;
								}
							},
							aliases);
						if (!_v3.$) {
							var aliasedModuleName = _v3.a;
							return aliasedModuleName;
						} else {
							return A2(
								$elm$core$Maybe$withDefault,
								moduleName,
								$elm$core$List$head(aliases));
						}
					}
				} else {
					return moduleName;
				}
			} else {
				return moduleName;
			}
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromPattern = F3(
	function (context, patternsToVisit, acc) {
		collectModuleNamesFromPattern:
		while (true) {
			if (patternsToVisit.b) {
				var pattern = patternsToVisit.a;
				var restOfPatternsToVisit = patternsToVisit.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(pattern);
				switch (_v1.$) {
					case 12:
						var moduleName = _v1.a.dE;
						var name = _v1.a.bV;
						var subPatterns = _v1.b;
						var $temp$context = context,
							$temp$patternsToVisit = A2($elm$core$List$append, subPatterns, restOfPatternsToVisit),
							$temp$acc = A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$add,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(pattern),
							A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForValue, context, name, moduleName),
							acc);
						context = $temp$context;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromPattern;
					case 9:
						var left = _v1.a;
						var right = _v1.b;
						var $temp$context = context,
							$temp$patternsToVisit = A2(
							$elm$core$List$cons,
							left,
							A2($elm$core$List$cons, right, restOfPatternsToVisit)),
							$temp$acc = acc;
						context = $temp$context;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromPattern;
					case 7:
						var subPatterns = _v1.a;
						var $temp$context = context,
							$temp$patternsToVisit = A2($elm$core$List$append, subPatterns, restOfPatternsToVisit),
							$temp$acc = acc;
						context = $temp$context;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromPattern;
					case 14:
						var subPattern = _v1.a;
						var $temp$context = context,
							$temp$patternsToVisit = A2($elm$core$List$cons, subPattern, restOfPatternsToVisit),
							$temp$acc = acc;
						context = $temp$context;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromPattern;
					case 13:
						var subPattern = _v1.a;
						var $temp$context = context,
							$temp$patternsToVisit = A2($elm$core$List$cons, subPattern, restOfPatternsToVisit),
							$temp$acc = acc;
						context = $temp$context;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromPattern;
					case 10:
						var subPatterns = _v1.a;
						var $temp$context = context,
							$temp$patternsToVisit = A2($elm$core$List$append, subPatterns, restOfPatternsToVisit),
							$temp$acc = acc;
						context = $temp$context;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromPattern;
					default:
						var $temp$context = context,
							$temp$patternsToVisit = restOfPatternsToVisit,
							$temp$acc = acc;
						context = $temp$context;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromPattern;
				}
			} else {
				return acc;
			}
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$isTypeDeclaredInModule = F2(
	function (typeName, module_) {
		return A2(
			$elm$core$List$any,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.bV;
				},
				$elm$core$Basics$eq(typeName)),
			module_.eV) || A2(
			$elm$core$List$any,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.bV;
				},
				$elm$core$Basics$eq(typeName)),
			module_.gl);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$joinModuleName = function (name) {
	return A2($elm$core$String$join, '.', name);
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForType = F3(
	function (context, typeName, moduleName) {
		if (!moduleName.b) {
			return A2($elm$core$Set$member, typeName, context.bT) ? _List_Nil : A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Dict$get, typeName, context.bN));
		} else {
			if (!moduleName.b.b) {
				var _v1 = A2(
					$elm$core$Dict$get,
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$joinModuleName(moduleName),
					context.bg);
				if (!_v1.$) {
					if (_v1.a.b && (!_v1.a.b.b)) {
						var _v2 = _v1.a;
						var aliasedModuleName = _v2.a;
						return aliasedModuleName;
					} else {
						var aliases = _v1.a;
						var _v3 = A2(
							$jfmengels$elm_review$Vendor$ListExtra$find,
							function (aliasedModuleName) {
								var _v4 = A2($elm$core$Dict$get, aliasedModuleName, context.av);
								if (!_v4.$) {
									var module_ = _v4.a;
									return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$isTypeDeclaredInModule, typeName, module_);
								} else {
									return false;
								}
							},
							aliases);
						if (!_v3.$) {
							var aliasedModuleName = _v3.a;
							return aliasedModuleName;
						} else {
							return A2(
								$elm$core$Maybe$withDefault,
								moduleName,
								$elm$core$List$head(aliases));
						}
					}
				} else {
					return moduleName;
				}
			} else {
				return moduleName;
			}
		}
	});
var $jfmengels$elm_review$Vendor$ListExtra$orderIndependentMapAppend = F3(
	function (fn, left, right) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (element, acc) {
					return A2(
						$elm$core$List$cons,
						fn(element),
						acc);
				}),
			right,
			left);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromTypeAnnotation = F3(
	function (context, typeAnnotationsToVisit, acc) {
		collectModuleNamesFromTypeAnnotation:
		while (true) {
			if (typeAnnotationsToVisit.b) {
				var typeAnnotationNode = typeAnnotationsToVisit.a;
				var remainingTypeAnnotationsToVisit = typeAnnotationsToVisit.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(typeAnnotationNode);
				switch (_v1.$) {
					case 1:
						var _v2 = _v1.a;
						var range = _v2.a;
						var _v3 = _v2.b;
						var moduleName = _v3.a;
						var name = _v3.b;
						var args = _v1.b;
						var $temp$context = context,
							$temp$typeAnnotationsToVisit = A2($elm$core$List$append, args, remainingTypeAnnotationsToVisit),
							$temp$acc = A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$add,
							range,
							A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForType, context, name, moduleName),
							acc);
						context = $temp$context;
						typeAnnotationsToVisit = $temp$typeAnnotationsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromTypeAnnotation;
					case 3:
						var nodes = _v1.a;
						var $temp$context = context,
							$temp$typeAnnotationsToVisit = A2($elm$core$List$append, nodes, remainingTypeAnnotationsToVisit),
							$temp$acc = acc;
						context = $temp$context;
						typeAnnotationsToVisit = $temp$typeAnnotationsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromTypeAnnotation;
					case 4:
						var fields = _v1.a;
						var $temp$context = context,
							$temp$typeAnnotationsToVisit = A3(
							$jfmengels$elm_review$Vendor$ListExtra$orderIndependentMapAppend,
							function (field) {
								return $stil4m$elm_syntax$Elm$Syntax$Node$value(field).b;
							},
							fields,
							remainingTypeAnnotationsToVisit),
							$temp$acc = acc;
						context = $temp$context;
						typeAnnotationsToVisit = $temp$typeAnnotationsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromTypeAnnotation;
					case 5:
						var fields = _v1.b;
						var $temp$context = context,
							$temp$typeAnnotationsToVisit = A3(
							$jfmengels$elm_review$Vendor$ListExtra$orderIndependentMapAppend,
							function (field) {
								return $stil4m$elm_syntax$Elm$Syntax$Node$value(field).b;
							},
							$stil4m$elm_syntax$Elm$Syntax$Node$value(fields),
							remainingTypeAnnotationsToVisit),
							$temp$acc = acc;
						context = $temp$context;
						typeAnnotationsToVisit = $temp$typeAnnotationsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromTypeAnnotation;
					case 6:
						var left = _v1.a;
						var right = _v1.b;
						var $temp$context = context,
							$temp$typeAnnotationsToVisit = A2(
							$elm$core$List$cons,
							left,
							A2($elm$core$List$cons, right, remainingTypeAnnotationsToVisit)),
							$temp$acc = acc;
						context = $temp$context;
						typeAnnotationsToVisit = $temp$typeAnnotationsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromTypeAnnotation;
					default:
						var $temp$context = context,
							$temp$typeAnnotationsToVisit = remainingTypeAnnotationsToVisit,
							$temp$acc = acc;
						context = $temp$context;
						typeAnnotationsToVisit = $temp$typeAnnotationsToVisit;
						acc = $temp$acc;
						continue collectModuleNamesFromTypeAnnotation;
				}
			} else {
				return acc;
			}
		}
	});
var $jfmengels$elm_review$NonEmpty$Nonempty = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $jfmengels$elm_review$NonEmpty$cons = F2(
	function (y, _v0) {
		var x = _v0.a;
		var xs = _v0.b;
		return A2(
			$jfmengels$elm_review$NonEmpty$Nonempty,
			y,
			A2($elm$core$List$cons, x, xs));
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$emptyScope = {
	c9: A2(
		$stil4m$elm_syntax$Elm$Syntax$Node$Node,
		$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
		$stil4m$elm_syntax$Elm$Syntax$Expression$Literal('root')),
	gE: _List_Nil,
	a0: $elm$core$Dict$empty
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$FunctionParameter = 2;
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectNamesFromPattern = F3(
	function (variableType, patternsToVisit, acc) {
		collectNamesFromPattern:
		while (true) {
			if (patternsToVisit.b) {
				var pattern = patternsToVisit.a;
				var restOfPatternsToVisit = patternsToVisit.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(pattern);
				switch (_v1.$) {
					case 11:
						var name = _v1.a;
						var $temp$variableType = variableType,
							$temp$patternsToVisit = restOfPatternsToVisit,
							$temp$acc = A3(
							$elm$core$Dict$insert,
							name,
							{
								fP: A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									$stil4m$elm_syntax$Elm$Syntax$Node$range(pattern),
									name),
								a4: variableType
							},
							acc);
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
					case 12:
						var subPatterns = _v1.b;
						var $temp$variableType = variableType,
							$temp$patternsToVisit = A2($elm$core$List$append, subPatterns, restOfPatternsToVisit),
							$temp$acc = acc;
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
					case 8:
						var names = _v1.a;
						var $temp$variableType = variableType,
							$temp$patternsToVisit = restOfPatternsToVisit,
							$temp$acc = A3(
							$elm$core$List$foldl,
							F2(
								function (nameNode, subAcc) {
									return A3(
										$elm$core$Dict$insert,
										$stil4m$elm_syntax$Elm$Syntax$Node$value(nameNode),
										{fP: nameNode, a4: variableType},
										subAcc);
								}),
							acc,
							names);
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
					case 14:
						var subPattern = _v1.a;
						var $temp$variableType = variableType,
							$temp$patternsToVisit = A2($elm$core$List$cons, subPattern, restOfPatternsToVisit),
							$temp$acc = acc;
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
					case 13:
						var subPattern = _v1.a;
						var alias = _v1.b;
						var $temp$variableType = variableType,
							$temp$patternsToVisit = A2($elm$core$List$cons, subPattern, restOfPatternsToVisit),
							$temp$acc = A3(
							$elm$core$Dict$insert,
							$stil4m$elm_syntax$Elm$Syntax$Node$value(alias),
							{fP: alias, a4: variableType},
							acc);
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
					case 7:
						var subPatterns = _v1.a;
						var $temp$variableType = variableType,
							$temp$patternsToVisit = A2($elm$core$List$append, subPatterns, restOfPatternsToVisit),
							$temp$acc = acc;
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
					case 9:
						var left = _v1.a;
						var right = _v1.b;
						var $temp$variableType = variableType,
							$temp$patternsToVisit = A2(
							$elm$core$List$cons,
							left,
							A2($elm$core$List$cons, right, restOfPatternsToVisit)),
							$temp$acc = acc;
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
					case 10:
						var subPatterns = _v1.a;
						var $temp$variableType = variableType,
							$temp$patternsToVisit = A2($elm$core$List$append, subPatterns, restOfPatternsToVisit),
							$temp$acc = acc;
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
					default:
						var $temp$variableType = variableType,
							$temp$patternsToVisit = restOfPatternsToVisit,
							$temp$acc = acc;
						variableType = $temp$variableType;
						patternsToVisit = $temp$patternsToVisit;
						acc = $temp$acc;
						continue collectNamesFromPattern;
				}
			} else {
				return acc;
			}
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$parameters = function (patterns) {
	return A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectNamesFromPattern, 2, patterns, $elm$core$Dict$empty);
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$updateScope = F2(
	function (innerContext, scopes) {
		return _Utils_update(
			innerContext,
			{v: scopes});
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationEnterVisitor = F2(
	function (node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 0:
				var _function = _v0.a;
				var newScope = _Utils_update(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$emptyScope,
					{
						a0: $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$parameters(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.gM).eY)
					});
				var newContext = A2(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$updateScope,
					context,
					A2($jfmengels$elm_review$NonEmpty$cons, newScope, context.v));
				var lookupTableAfterArguments = A3(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromPattern,
					newContext,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.gM).eY,
					newContext.n);
				var finalLookupTable = function () {
					var _v1 = _function.hJ;
					if (!_v1.$) {
						var signature = _v1.a;
						return A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromTypeAnnotation,
							context,
							_List_fromArray(
								[
									$stil4m$elm_syntax$Elm$Syntax$Node$value(signature).gk
								]),
							lookupTableAfterArguments);
					} else {
						return lookupTableAfterArguments;
					}
				}();
				return _Utils_update(
					newContext,
					{n: finalLookupTable});
			case 2:
				var constructors = _v0.a.gK;
				return _Utils_update(
					context,
					{
						n: A3(
							$elm$core$List$foldl,
							F2(
								function (_v2, acc) {
									var constructor = _v2.b;
									return A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromTypeAnnotation, context, constructor.eY, acc);
								}),
							context.n,
							constructors)
					});
			case 1:
				var typeAnnotation = _v0.a.gk;
				return _Utils_update(
					context,
					{
						n: A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromTypeAnnotation,
							context,
							_List_fromArray(
								[typeAnnotation]),
							context.n)
					});
			case 3:
				var signature = _v0.a;
				return _Utils_update(
					context,
					{
						n: A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromTypeAnnotation,
							context,
							_List_fromArray(
								[signature.gk]),
							context.n)
					});
			default:
				return context;
		}
	});
var $jfmengels$elm_review$NonEmpty$pop = function (_v0) {
	var x = _v0.a;
	var xs = _v0.b;
	if (!xs.b) {
		return A2($jfmengels$elm_review$NonEmpty$Nonempty, x, xs);
	} else {
		var y = xs.a;
		var ys = xs.b;
		return A2($jfmengels$elm_review$NonEmpty$Nonempty, y, ys);
	}
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationExitVisitor = F2(
	function (node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		if (!_v0.$) {
			return _Utils_update(
				context,
				{
					v: $jfmengels$elm_review$NonEmpty$pop(context.v)
				});
		} else {
			return context;
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$functionToExpression = function (_function) {
	return $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.gM).dm;
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$expressionChildren = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	switch (_v0.$) {
		case 1:
			var expressions = _v0.a;
			return expressions;
		case 19:
			var elements = _v0.a;
			return elements;
		case 18:
			var fields = _v0.a;
			return A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$stil4m$elm_syntax$Elm$Syntax$Node$value,
					function (_v1) {
						var expr = _v1.b;
						return expr;
					}),
				fields);
		case 22:
			var setters = _v0.b;
			return A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$stil4m$elm_syntax$Elm$Syntax$Node$value,
					function (_v2) {
						var expr = _v2.b;
						return expr;
					}),
				setters);
		case 14:
			var expr = _v0.a;
			return _List_fromArray(
				[expr]);
		case 2:
			var direction = _v0.b;
			var left = _v0.c;
			var right = _v0.d;
			switch (direction) {
				case 0:
					return _List_fromArray(
						[left, right]);
				case 1:
					return _List_fromArray(
						[right, left]);
				default:
					return _List_fromArray(
						[left, right]);
			}
		case 4:
			var cond = _v0.a;
			var then_ = _v0.b;
			var else_ = _v0.c;
			return _List_fromArray(
				[cond, then_, else_]);
		case 15:
			var expression = _v0.a.dm;
			var declarations = _v0.a.e4;
			return A3(
				$elm$core$List$foldr,
				F2(
					function (declaration, acc) {
						var _v4 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
						if (!_v4.$) {
							var _function = _v4.a;
							return A2(
								$elm$core$List$cons,
								$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$functionToExpression(_function),
								acc);
						} else {
							var expr = _v4.b;
							return A2($elm$core$List$cons, expr, acc);
						}
					}),
				_List_fromArray(
					[expression]),
				declarations);
		case 16:
			var expression = _v0.a.dm;
			var cases = _v0.a.gE;
			return A2(
				$elm$core$List$cons,
				expression,
				A2(
					$elm$core$List$map,
					function (_v5) {
						var caseExpression = _v5.b;
						return caseExpression;
					},
					cases));
		case 17:
			var expression = _v0.a.dm;
			return _List_fromArray(
				[expression]);
		case 13:
			var expressions = _v0.a;
			return expressions;
		case 10:
			var expr = _v0.a;
			return _List_fromArray(
				[expr]);
		case 20:
			var expr = _v0.a;
			return _List_fromArray(
				[expr]);
		default:
			return _List_Nil;
	}
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$LetVariable = 3;
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$PatternVariable = 4;
var $jfmengels$elm_review$NonEmpty$mapHead = F2(
	function (fn, _v0) {
		var x = _v0.a;
		var xs = _v0.b;
		return A2(
			$jfmengels$elm_review$NonEmpty$Nonempty,
			fn(x),
			xs);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerVariable = F2(
	function (variableInfo, scopes) {
		return A2(
			$jfmengels$elm_review$NonEmpty$mapHead,
			function (scope) {
				return _Utils_update(
					scope,
					{
						a0: A3(
							$elm$core$Dict$insert,
							$stil4m$elm_syntax$Elm$Syntax$Node$value(variableInfo.fP),
							variableInfo,
							scope.a0)
					});
			},
			scopes);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$expressionEnterVisitor = F2(
	function (node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 15:
				var letExpression = _v0.a;
				var newContext = A2(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$updateScope,
					context,
					A3(
						$elm$core$List$foldl,
						F2(
							function (declaration, scopes) {
								var _v3 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
								if (!_v3.$) {
									var _function = _v3.a;
									var _v4 = $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.gM);
									var name = _v4.bV;
									var expression = _v4.dm;
									var _arguments = _v4.eY;
									var withLetVariable = A2(
										$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerVariable,
										{fP: name, a4: 3},
										scopes);
									if ($elm$core$List$isEmpty(_arguments)) {
										return withLetVariable;
									} else {
										var names = A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectNamesFromPattern, 4, _arguments, $elm$core$Dict$empty);
										return A2(
											$jfmengels$elm_review$NonEmpty$mapHead,
											function (scope) {
												return _Utils_update(
													scope,
													{
														gE: A2(
															$elm$core$List$cons,
															_Utils_Tuple2(expression, names),
															scope.gE)
													});
											},
											withLetVariable);
									}
								} else {
									var pattern = _v3.a;
									return A2(
										$jfmengels$elm_review$NonEmpty$mapHead,
										function (scope) {
											return _Utils_update(
												scope,
												{
													a0: A3(
														$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectNamesFromPattern,
														3,
														_List_fromArray(
															[pattern]),
														scope.a0)
												});
										},
										scopes);
								}
							}),
						A2($jfmengels$elm_review$NonEmpty$cons, $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$emptyScope, context.v),
						letExpression.e4));
				var lookupTable = A3(
					$elm$core$List$foldl,
					F2(
						function (declaration, acc) {
							var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
							if (!_v1.$) {
								var _function = _v1.a;
								var withDeclarationModuleName = A3(
									$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromPattern,
									newContext,
									$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.gM).eY,
									acc);
								var _v2 = _function.hJ;
								if (!_v2.$) {
									var signature = _v2.a;
									return A3(
										$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromTypeAnnotation,
										context,
										_List_fromArray(
											[
												$stil4m$elm_syntax$Elm$Syntax$Node$value(signature).gk
											]),
										withDeclarationModuleName);
								} else {
									return withDeclarationModuleName;
								}
							} else {
								var pattern = _v1.a;
								return A3(
									$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromPattern,
									newContext,
									_List_fromArray(
										[pattern]),
									acc);
							}
						}),
					newContext.n,
					letExpression.e4);
				return _Utils_update(
					newContext,
					{n: lookupTable});
			case 16:
				var caseBlock = _v0.a;
				var _v5 = A3(
					$elm$core$List$foldl,
					F2(
						function (_v6, _v7) {
							var pattern = _v6.a;
							var expression = _v6.b;
							var casesAcc = _v7.a;
							var lookupTableAcc = _v7.b;
							return _Utils_Tuple2(
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										expression,
										A3(
											$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectNamesFromPattern,
											4,
											_List_fromArray(
												[pattern]),
											$elm$core$Dict$empty)),
									casesAcc),
								A3(
									$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromPattern,
									context,
									_List_fromArray(
										[pattern]),
									lookupTableAcc));
						}),
					_Utils_Tuple2(_List_Nil, context.n),
					caseBlock.gE);
				var cases = _v5.a;
				var lookupTable = _v5.b;
				return _Utils_update(
					context,
					{
						n: lookupTable,
						v: A2(
							$jfmengels$elm_review$NonEmpty$mapHead,
							function (scope) {
								return _Utils_update(
									scope,
									{gE: cases});
							},
							context.v)
					});
			case 3:
				var moduleName = _v0.a;
				var name = _v0.b;
				return _Utils_update(
					context,
					{
						n: A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$add,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
							A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForValue, context, name, moduleName),
							context.n)
					});
			case 22:
				var _v8 = _v0.a;
				var range = _v8.a;
				var name = _v8.b;
				return _Utils_update(
					context,
					{
						n: A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$add,
							range,
							A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForValue, context, name, _List_Nil),
							context.n)
					});
			case 17:
				var args = _v0.a.gt;
				return _Utils_update(
					context,
					{
						n: A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleNamesFromPattern, context, args, context.n)
					});
			case 5:
				var op = _v0.a;
				return _Utils_update(
					context,
					{
						n: A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$add,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
							A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForValue, context, op, _List_Nil),
							context.n)
					});
			case 2:
				var op = _v0.a;
				return _Utils_update(
					context,
					{
						n: A3(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$add,
							$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
							A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForValue, context, op, _List_Nil),
							context.n)
					});
			default:
				return context;
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$expressionExitVisitor = F2(
	function (node, context) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v0.$) {
			case 15:
				return _Utils_update(
					context,
					{
						v: $jfmengels$elm_review$NonEmpty$pop(context.v)
					});
			case 16:
				return _Utils_update(
					context,
					{
						v: A2(
							$jfmengels$elm_review$NonEmpty$mapHead,
							function (scope) {
								return _Utils_update(
									scope,
									{gE: _List_Nil});
							},
							context.v)
					});
			default:
				return context;
		}
	});
var $jfmengels$elm_review$NonEmpty$head = function (_v0) {
	var x = _v0.a;
	return x;
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$popScopeEnter = F2(
	function (node, context) {
		var currentScope = $jfmengels$elm_review$NonEmpty$head(context.v);
		var caseExpression = A2(
			$jfmengels$elm_review$Vendor$ListExtra$find,
			function (_v2) {
				var expressionNode = _v2.a;
				return _Utils_eq(node, expressionNode);
			},
			currentScope.gE);
		if (caseExpression.$ === 1) {
			return context;
		} else {
			var _v1 = caseExpression.a;
			var names = _v1.b;
			return _Utils_update(
				context,
				{
					v: A2(
						$jfmengels$elm_review$NonEmpty$cons,
						_Utils_update(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$emptyScope,
							{c9: node, a0: names}),
						context.v)
				});
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$popScopeExit = F2(
	function (node, context) {
		var currentScope = $jfmengels$elm_review$NonEmpty$head(context.v);
		return _Utils_eq(node, currentScope.c9) ? _Utils_update(
			context,
			{
				v: $jfmengels$elm_review$NonEmpty$pop(context.v)
			}) : context;
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$visitExpressions = F2(
	function (node, context) {
		var newContext = A2(
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$expressionEnterVisitor,
			node,
			A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$popScopeEnter, node, context));
		return A2(
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$expressionExitVisitor,
			node,
			A2(
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$popScopeExit,
				node,
				A3(
					$elm$core$List$foldl,
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$visitExpressions,
					newContext,
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$expressionChildren(node))));
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectLookupTable = F2(
	function (declarations, context) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (declaration, ctx) {
					var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
					if (!_v0.$) {
						var _function = _v0.a;
						return A2(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationExitVisitor,
							declaration,
							A2(
								$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$visitExpressions,
								$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.gM).dm,
								A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationEnterVisitor, declaration, ctx)));
					} else {
						return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationEnterVisitor, declaration, ctx);
					}
				}),
			context,
			declarations);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$CustomTypeConstructor = 1;
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$Port = 5;
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$TopLevelVariable = 0;
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$addToScope = F2(
	function (variableData, innerContext) {
		var newScopes = A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerVariable, variableData, innerContext.v);
		return _Utils_update(
			innerContext,
			{v: newScopes});
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedCustomType = F3(
	function (constructors, name, innerContext) {
		return _Utils_update(
			innerContext,
			{
				cf: A2(
					$elm$core$List$cons,
					{
						gt: _List_Nil,
						b5: '',
						bV: name,
						hS: A2(
							$elm$core$List$map,
							function (constructor) {
								return _Utils_Tuple2(
									$stil4m$elm_syntax$Elm$Syntax$Node$value(
										$stil4m$elm_syntax$Elm$Syntax$Node$value(constructor).bV),
									_List_Nil);
							},
							constructors)
					},
					innerContext.cf)
			});
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedTypeAlias = F2(
	function (name, innerContext) {
		return _Utils_update(
			innerContext,
			{
				cd: A2(
					$elm$core$List$cons,
					{
						gt: _List_Nil,
						b5: '',
						bV: name,
						eT: $elm$project_metadata_utils$Elm$Type$Tuple(_List_Nil)
					},
					innerContext.cd)
			});
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$recordUpdateToDocsType = F2(
	function (innerContext, updates) {
		return A2(
			$elm$core$List$map,
			function (_v6) {
				var _v7 = _v6.b;
				var name = _v7.a;
				var typeAnnotation = _v7.b;
				return _Utils_Tuple2(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$syntaxTypeAnnotationToDocsType, innerContext, typeAnnotation));
			},
			updates);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$syntaxTypeAnnotationToDocsType = F2(
	function (innerContext, _v0) {
		var typeAnnotation = _v0.b;
		switch (typeAnnotation.$) {
			case 0:
				var name = typeAnnotation.a;
				return $elm$project_metadata_utils$Elm$Type$Var(name);
			case 1:
				var _v2 = typeAnnotation.a;
				var _v3 = _v2.b;
				var moduleName = _v3.a;
				var typeName = _v3.b;
				var typeParameters = typeAnnotation.b;
				var realModuleName = A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleNameForType, innerContext, typeName, moduleName);
				return A2(
					$elm$project_metadata_utils$Elm$Type$Type,
					A2($elm$core$String$join, '.', realModuleName) + ('.' + typeName),
					A2(
						$elm$core$List$map,
						function (node) {
							return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$syntaxTypeAnnotationToDocsType, innerContext, node);
						},
						typeParameters));
			case 2:
				return $elm$project_metadata_utils$Elm$Type$Tuple(_List_Nil);
			case 3:
				var list = typeAnnotation.a;
				return $elm$project_metadata_utils$Elm$Type$Tuple(
					A2(
						$elm$core$List$map,
						function (node) {
							return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$syntaxTypeAnnotationToDocsType, innerContext, node);
						},
						list));
			case 4:
				var updates = typeAnnotation.a;
				return A2(
					$elm$project_metadata_utils$Elm$Type$Record,
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$recordUpdateToDocsType, innerContext, updates),
					$elm$core$Maybe$Nothing);
			case 5:
				var _v4 = typeAnnotation.a;
				var generic = _v4.b;
				var _v5 = typeAnnotation.b;
				var updates = _v5.b;
				return A2(
					$elm$project_metadata_utils$Elm$Type$Record,
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$recordUpdateToDocsType, innerContext, updates),
					$elm$core$Maybe$Just(generic));
			default:
				var left = typeAnnotation.a;
				var right = typeAnnotation.b;
				return A2(
					$elm$project_metadata_utils$Elm$Type$Lambda,
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$syntaxTypeAnnotationToDocsType, innerContext, left),
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$syntaxTypeAnnotationToDocsType, innerContext, right));
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$convertTypeSignatureToDocsType = F2(
	function (innerContext, maybeSignature) {
		if (!maybeSignature.$) {
			var signature = maybeSignature.a;
			return A2(
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$syntaxTypeAnnotationToDocsType,
				innerContext,
				$stil4m$elm_syntax$Elm$Syntax$Node$value(signature).gk);
		} else {
			return $elm$project_metadata_utils$Elm$Type$Tuple(_List_Nil);
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedValue = F3(
	function (_function, name, innerContext) {
		return _Utils_update(
			innerContext,
			{
				cg: A2(
					$elm$core$List$cons,
					{
						b5: function () {
							var _v0 = _function.ed;
							if (!_v0.$) {
								var strNode = _v0.a;
								return $stil4m$elm_syntax$Elm$Syntax$Node$value(strNode);
							} else {
								return '';
							}
						}(),
						bV: name,
						eT: A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$convertTypeSignatureToDocsType, innerContext, _function.hJ)
					},
					innerContext.cg)
			});
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerIfExposed = F3(
	function (registerFn, name, innerContext) {
		return (innerContext.dl || A2($elm$core$Set$member, name, innerContext.dk)) ? A2(registerFn, name, innerContext) : innerContext;
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerDeclaration = F2(
	function (declaration, innerContext) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
		switch (_v0.$) {
			case 0:
				var _function = _v0.a;
				var nameNode = $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.gM).bV;
				return A3(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerIfExposed,
					F2(
						function (name, ctx) {
							return A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedValue, _function, name, ctx);
						}),
					$stil4m$elm_syntax$Elm$Syntax$Node$value(nameNode),
					A2(
						$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$addToScope,
						{fP: nameNode, a4: 0},
						innerContext));
			case 1:
				var alias = _v0.a;
				var registerAlias = function (ctx) {
					var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(alias.gk);
					if (_v1.$ === 4) {
						return A2(
							$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$addToScope,
							{fP: alias.bV, a4: 0},
							ctx);
					} else {
						return ctx;
					}
				};
				return A3(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerIfExposed,
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedTypeAlias,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(alias.bV),
					registerAlias(
						_Utils_update(
							innerContext,
							{
								bT: A2(
									$elm$core$Set$insert,
									$stil4m$elm_syntax$Elm$Syntax$Node$value(alias.bV),
									innerContext.bT)
							})));
			case 2:
				var name = _v0.a.bV;
				var constructors = _v0.a.gK;
				return A3(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerIfExposed,
					F2(
						function (customTypeName, ctx) {
							return A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedCustomType, constructors, customTypeName, ctx);
						}),
					$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
					A3(
						$elm$core$List$foldl,
						F2(
							function (constructor, innerContext_) {
								var constructorName = $stil4m$elm_syntax$Elm$Syntax$Node$value(constructor).bV;
								return A2(
									$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$addToScope,
									{fP: constructorName, a4: 1},
									innerContext_);
							}),
						_Utils_update(
							innerContext,
							{
								bT: A2(
									$elm$core$Set$insert,
									$stil4m$elm_syntax$Elm$Syntax$Node$value(name),
									innerContext.bT)
							}),
						constructors));
			case 3:
				var signature = _v0.a;
				return A3(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerIfExposed,
					F2(
						function (name, ctx) {
							return A3(
								$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerExposedValue,
								{
									ed: $elm$core$Maybe$Nothing,
									hJ: $elm$core$Maybe$Just(
										A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											$stil4m$elm_syntax$Elm$Syntax$Node$range(declaration),
											signature))
								},
								name,
								ctx);
						}),
					$stil4m$elm_syntax$Elm$Syntax$Node$value(signature.bV),
					A2(
						$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$addToScope,
						{fP: signature.bV, a4: 5},
						innerContext));
			case 4:
				return innerContext;
			default:
				return innerContext;
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationListVisitor = F2(
	function (declarations, innerContext) {
		return A3($elm$core$List$foldl, $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerDeclaration, innerContext, declarations);
	});
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport = function (_v0) {
	var moduleName = _v0.dE;
	var moduleAlias = _v0.hh;
	var exposingList = _v0.ef;
	return A2(
		$stil4m$elm_syntax$Elm$Syntax$Node$Node,
		$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
		{
			ef: A2(
				$elm$core$Maybe$map,
				$stil4m$elm_syntax$Elm$Syntax$Node$Node($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange),
				exposingList),
			hh: A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$List$singleton,
					$stil4m$elm_syntax$Elm$Syntax$Node$Node($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange)),
				moduleAlias),
			dE: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, moduleName)
		});
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$elmCorePrelude = function () {
	var explicit = function (exposed) {
		return $elm$core$Maybe$Just(
			$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
				A2(
					$elm$core$List$map,
					$stil4m$elm_syntax$Elm$Syntax$Node$Node($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange),
					exposed)));
	};
	return _List_fromArray(
		[
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				ef: $elm$core$Maybe$Just(
					$stil4m$elm_syntax$Elm$Syntax$Exposing$All($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange)),
				hh: $elm$core$Maybe$Nothing,
				dE: _List_fromArray(
					['Basics'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				ef: explicit(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
							{bV: 'List', ht: $elm$core$Maybe$Nothing}),
							$stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose('::')
						])),
				hh: $elm$core$Maybe$Nothing,
				dE: _List_fromArray(
					['List'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				ef: explicit(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
							{
								bV: 'Maybe',
								ht: $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange)
							})
						])),
				hh: $elm$core$Maybe$Nothing,
				dE: _List_fromArray(
					['Maybe'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				ef: explicit(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
							{
								bV: 'Result',
								ht: $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange)
							})
						])),
				hh: $elm$core$Maybe$Nothing,
				dE: _List_fromArray(
					['Result'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				ef: explicit(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
							{bV: 'String', ht: $elm$core$Maybe$Nothing})
						])),
				hh: $elm$core$Maybe$Nothing,
				dE: _List_fromArray(
					['String'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				ef: explicit(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
							{bV: 'Char', ht: $elm$core$Maybe$Nothing})
						])),
				hh: $elm$core$Maybe$Nothing,
				dE: _List_fromArray(
					['Char'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				ef: $elm$core$Maybe$Nothing,
				hh: $elm$core$Maybe$Nothing,
				dE: _List_fromArray(
					['Tuple'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				ef: $elm$core$Maybe$Nothing,
				hh: $elm$core$Maybe$Nothing,
				dE: _List_fromArray(
					['Debug'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				ef: explicit(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
							{bV: 'Program', ht: $elm$core$Maybe$Nothing})
						])),
				hh: $elm$core$Maybe$Nothing,
				dE: _List_fromArray(
					['Platform'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				ef: explicit(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
							{bV: 'Cmd', ht: $elm$core$Maybe$Nothing})
						])),
				hh: $elm$core$Maybe$Just('Cmd'),
				dE: _List_fromArray(
					['Platform', 'Cmd'])
			}),
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$createFakeImport(
			{
				ef: explicit(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
							{bV: 'Sub', ht: $elm$core$Maybe$Nothing})
						])),
				hh: $elm$core$Maybe$Just('Sub'),
				dE: _List_fromArray(
					['Platform', 'Sub'])
			})
		]);
}();
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerImportAlias = F2(
	function (import_, innerContext) {
		var _v0 = import_.hh;
		if (_v0.$ === 1) {
			var moduleName = $stil4m$elm_syntax$Elm$Syntax$Node$value(import_.dE);
			if (moduleName.b && (!moduleName.b.b)) {
				var singleSegmentModuleName = moduleName.a;
				return _Utils_update(
					innerContext,
					{
						bg: A3(
							$elm$core$Dict$update,
							singleSegmentModuleName,
							function (previousValue) {
								return $elm$core$Maybe$Just(
									A2(
										$elm$core$List$cons,
										moduleName,
										A2($elm$core$Maybe$withDefault, _List_Nil, previousValue)));
							},
							innerContext.bg)
					});
			} else {
				return innerContext;
			}
		} else {
			var alias = _v0.a;
			return _Utils_update(
				innerContext,
				{
					bg: A3(
						$elm$core$Dict$update,
						$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$joinModuleName(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(alias)),
						function (previousValue) {
							return $elm$core$Maybe$Just(
								A2(
									$elm$core$List$cons,
									$stil4m$elm_syntax$Elm$Syntax$Node$value(import_.dE),
									A2($elm$core$Maybe$withDefault, _List_Nil, previousValue)));
						},
						innerContext.bg)
				});
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$typesFromExposingList = function (topLevelExpose) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(topLevelExpose);
	switch (_v0.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			return $elm$core$Maybe$Nothing;
		case 2:
			var name = _v0.a;
			return $elm$core$Maybe$Just(name);
		default:
			var name = _v0.a.bV;
			return $elm$core$Maybe$Just(name);
	}
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$valuesFromExposingList = F4(
	function (moduleName, module_, topLevelExposeList, acc) {
		valuesFromExposingList:
		while (true) {
			if (!topLevelExposeList.b) {
				return acc;
			} else {
				var topLevelExpose = topLevelExposeList.a;
				var rest = topLevelExposeList.b;
				var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(topLevelExpose);
				switch (_v1.$) {
					case 0:
						var operator = _v1.a;
						var $temp$moduleName = moduleName,
							$temp$module_ = module_,
							$temp$topLevelExposeList = rest,
							$temp$acc = A3($elm$core$Dict$insert, operator, moduleName, acc);
						moduleName = $temp$moduleName;
						module_ = $temp$module_;
						topLevelExposeList = $temp$topLevelExposeList;
						acc = $temp$acc;
						continue valuesFromExposingList;
					case 1:
						var _function = _v1.a;
						var $temp$moduleName = moduleName,
							$temp$module_ = module_,
							$temp$topLevelExposeList = rest,
							$temp$acc = A3($elm$core$Dict$insert, _function, moduleName, acc);
						moduleName = $temp$moduleName;
						module_ = $temp$module_;
						topLevelExposeList = $temp$topLevelExposeList;
						acc = $temp$acc;
						continue valuesFromExposingList;
					case 2:
						var name = _v1.a;
						if (A2(
							$elm$core$List$any,
							function (alias) {
								return _Utils_eq(alias.bV, name);
							},
							module_.eV)) {
							var $temp$moduleName = moduleName,
								$temp$module_ = module_,
								$temp$topLevelExposeList = rest,
								$temp$acc = A3($elm$core$Dict$insert, name, moduleName, acc);
							moduleName = $temp$moduleName;
							module_ = $temp$module_;
							topLevelExposeList = $temp$topLevelExposeList;
							acc = $temp$acc;
							continue valuesFromExposingList;
						} else {
							var $temp$moduleName = moduleName,
								$temp$module_ = module_,
								$temp$topLevelExposeList = rest,
								$temp$acc = acc;
							moduleName = $temp$moduleName;
							module_ = $temp$module_;
							topLevelExposeList = $temp$topLevelExposeList;
							acc = $temp$acc;
							continue valuesFromExposingList;
						}
					default:
						var name = _v1.a.bV;
						var open = _v1.a.ht;
						if (!open.$) {
							var newAcc = A3(
								$elm$core$List$foldl,
								F2(
									function (union, subAcc) {
										return _Utils_eq(union.bV, name) ? A3(
											$elm$core$List$foldl,
											F2(
												function (_v3, subSubAcc) {
													var tag = _v3.a;
													return A3($elm$core$Dict$insert, tag, moduleName, subSubAcc);
												}),
											subAcc,
											union.hS) : subAcc;
									}),
								acc,
								module_.gl);
							var $temp$moduleName = moduleName,
								$temp$module_ = module_,
								$temp$topLevelExposeList = rest,
								$temp$acc = newAcc;
							moduleName = $temp$moduleName;
							module_ = $temp$module_;
							topLevelExposeList = $temp$topLevelExposeList;
							acc = $temp$acc;
							continue valuesFromExposingList;
						} else {
							var $temp$moduleName = moduleName,
								$temp$module_ = module_,
								$temp$topLevelExposeList = rest,
								$temp$acc = acc;
							moduleName = $temp$moduleName;
							module_ = $temp$module_;
							topLevelExposeList = $temp$topLevelExposeList;
							acc = $temp$acc;
							continue valuesFromExposingList;
						}
				}
			}
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerImportExposed = F2(
	function (import_, innerContext) {
		var _v0 = A2($elm$core$Maybe$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, import_.ef);
		if (_v0.$ === 1) {
			return innerContext;
		} else {
			var exposing_ = _v0.a;
			var moduleName = $stil4m$elm_syntax$Elm$Syntax$Node$value(import_.dE);
			var module_ = A2(
				$elm$core$Maybe$withDefault,
				{
					eV: _List_Nil,
					e$: _List_Nil,
					b5: '',
					bV: $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$joinModuleName(moduleName),
					gl: _List_Nil,
					gm: _List_Nil
				},
				A2($elm$core$Dict$get, moduleName, innerContext.av));
			if (!exposing_.$) {
				var foldIntoDict = F2(
					function (list, dict) {
						return A3(
							$elm$core$List$foldl,
							F2(
								function (_v3, acc) {
									var name = _v3.bV;
									return A3($elm$core$Dict$insert, name, moduleName, acc);
								}),
							dict,
							list);
					});
				var importedTypes = A2(
					foldIntoDict,
					module_.eV,
					A2(foldIntoDict, module_.gl, innerContext.bN));
				var foldCustomTypesIntoDict = F2(
					function (unions, dict) {
						return A3(
							$elm$core$List$foldl,
							F2(
								function (union, acc) {
									return A3(
										$elm$core$List$foldl,
										F2(
											function (_v2, subAcc) {
												var name = _v2.a;
												return A3($elm$core$Dict$insert, name, moduleName, subAcc);
											}),
										acc,
										union.hS);
								}),
							dict,
							unions);
					});
				var importedFunctions = A2(
					foldCustomTypesIntoDict,
					module_.gl,
					A2(
						foldIntoDict,
						module_.eV,
						A2(
							foldIntoDict,
							module_.e$,
							A2(foldIntoDict, module_.gm, innerContext.bL))));
				return _Utils_update(
					innerContext,
					{bL: importedFunctions, bN: importedTypes});
			} else {
				var topLevelExposeList = exposing_.a;
				var importedTypes = A3(
					$elm$core$List$foldl,
					F2(
						function (topLevelExpose, acc) {
							var _v4 = $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$typesFromExposingList(topLevelExpose);
							if (!_v4.$) {
								var name = _v4.a;
								return A3($elm$core$Dict$insert, name, moduleName, acc);
							} else {
								return acc;
							}
						}),
					innerContext.bN,
					topLevelExposeList);
				var importedFunctions = A4($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$valuesFromExposingList, moduleName, module_, topLevelExposeList, innerContext.bL);
				return _Utils_update(
					innerContext,
					{bL: importedFunctions, bN: importedTypes});
			}
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$importVisitor = F2(
	function (_v0, innerContext) {
		var import_ = _v0.b;
		return A2(
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerImportExposed,
			import_,
			A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$registerImportAlias, import_, innerContext));
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$exposedElements = function (nodes) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (node, acc) {
				var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
				switch (_v0.$) {
					case 1:
						var name = _v0.a;
						return A2($elm$core$Set$insert, name, acc);
					case 2:
						var name = _v0.a;
						return A2($elm$core$Set$insert, name, acc);
					case 3:
						var name = _v0.a.bV;
						return A2($elm$core$Set$insert, name, acc);
					default:
						return acc;
				}
			}),
		$elm$core$Set$empty,
		nodes);
};
var $stil4m$elm_syntax$Elm$Syntax$Module$exposingList = function (m) {
	switch (m.$) {
		case 0:
			var x = m.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(x.ef);
		case 1:
			var x = m.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(x.ef);
		default:
			var x = m.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(x.ef);
	}
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleDefinitionVisitor = F2(
	function (node, innerContext) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Module$exposingList(
			$stil4m$elm_syntax$Elm$Syntax$Node$value(node));
		if (!_v0.$) {
			return _Utils_update(
				innerContext,
				{dl: true});
		} else {
			var list = _v0.a;
			return _Utils_update(
				innerContext,
				{
					dk: $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$exposedElements(list)
				});
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleDocs = F2(
	function (ast, context) {
		return A2(
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$declarationListVisitor,
			ast.e4,
			A2(
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$moduleDefinitionVisitor,
				ast.hi,
				A3(
					$elm$core$List$foldl,
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$importVisitor,
					context,
					_Utils_ap($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$elmCorePrelude, ast.g4))));
	});
var $jfmengels$elm_review$Review$Project$Valid$directDependencies = function (_v0) {
	var project = _v0;
	return project.ec;
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeDependencies = function (project) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (dependencyModule, acc) {
				return A3(
					$elm$core$Dict$insert,
					A2($elm$core$String$split, '.', dependencyModule.bV),
					dependencyModule,
					acc);
			}),
		$elm$core$Dict$empty,
		A3(
			$elm$core$Dict$foldl,
			F3(
				function (_v0, dep, acc) {
					return A2(
						$elm$core$List$append,
						$jfmengels$elm_review$Review$Project$Dependency$modules(dep),
						acc);
				}),
			_List_Nil,
			$jfmengels$elm_review$Review$Project$Valid$directDependencies(project)));
};
var $jfmengels$elm_review$NonEmpty$fromElement = function (x) {
	return A2($jfmengels$elm_review$NonEmpty$Nonempty, x, _List_Nil);
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$fromProjectToModule = F2(
	function (moduleName, modules) {
		return {
			cd: _List_Nil,
			dk: $elm$core$Set$empty,
			cf: _List_Nil,
			cg: _List_Nil,
			dl: false,
			bg: $elm$core$Dict$empty,
			bL: $elm$core$Dict$empty,
			bN: $elm$core$Dict$empty,
			bT: $elm$core$Set$empty,
			n: $jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$empty(moduleName),
			av: modules,
			v: $jfmengels$elm_review$NonEmpty$fromElement($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$emptyScope)
		};
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$preludeModuleDocs = function (deps) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, acc) {
				var import_ = _v0.b;
				var importedModuleName = $stil4m$elm_syntax$Elm$Syntax$Node$value(import_.dE);
				var _v1 = A2($elm$core$Dict$get, importedModuleName, deps);
				if (!_v1.$) {
					var importedModule = _v1.a;
					return A3($elm$core$Dict$insert, importedModuleName, importedModule, acc);
				} else {
					return acc;
				}
			}),
		$elm$core$Dict$empty,
		$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$elmCorePrelude);
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeImportedModulesDocs = F4(
	function (modulesByModuleName, deps, _v1, _v2) {
		var import_ = _v1.b;
		var accImported = _v2.a;
		var accProjectCache = _v2.b;
		var importedModuleName = $stil4m$elm_syntax$Elm$Syntax$Node$value(import_.dE);
		var _v3 = A2($elm$core$Dict$get, importedModuleName, accProjectCache.av);
		if (!_v3.$) {
			var importedModule = _v3.a;
			return _Utils_Tuple2(
				A3($elm$core$Dict$insert, importedModuleName, importedModule, accImported),
				accProjectCache);
		} else {
			var _v4 = A2($elm$core$Dict$get, importedModuleName, modulesByModuleName);
			if (!_v4.$) {
				var importedModule = _v4.a;
				var _v5 = A5($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeOnlyModuleDocs, importedModuleName, importedModule, modulesByModuleName, deps, accProjectCache);
				var importedModuleDocs = _v5.a;
				var newProjectCacheAcc = _v5.b;
				return _Utils_Tuple2(
					A3($elm$core$Dict$insert, importedModuleName, importedModuleDocs, accImported),
					newProjectCacheAcc);
			} else {
				var _v6 = A2($elm$core$Dict$get, importedModuleName, deps);
				if (!_v6.$) {
					var importedModule = _v6.a;
					return _Utils_Tuple2(
						A3($elm$core$Dict$insert, importedModuleName, importedModule, accImported),
						accProjectCache);
				} else {
					return _Utils_Tuple2(accImported, accProjectCache);
				}
			}
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeOnlyModuleDocs = F5(
	function (moduleName, module_, modulesByModuleName, deps, projectCache) {
		var moduleAst = $jfmengels$elm_review$Review$Project$ProjectModule$ast(module_);
		var _v0 = A3(
			$elm$core$List$foldl,
			F2(
				function (node, acc) {
					return A4($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeImportedModulesDocs, modulesByModuleName, deps, node, acc);
				}),
			_Utils_Tuple2(
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$preludeModuleDocs(deps),
				projectCache),
			moduleAst.g4);
		var imported = _v0.a;
		var projectCacheWithComputedImports = _v0.b;
		var moduleContext = A2(
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleDocs,
			moduleAst,
			A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$fromProjectToModule, moduleName, imported));
		var moduleDocs = {
			eV: moduleContext.cd,
			e$: _List_Nil,
			b5: '',
			bV: A2($elm$core$String$join, '.', moduleName),
			gl: moduleContext.cf,
			gm: moduleContext.cg
		};
		var modules = A3($elm$core$Dict$insert, moduleName, moduleDocs, projectCacheWithComputedImports.av);
		return _Utils_Tuple2(
			moduleDocs,
			_Utils_update(
				projectCache,
				{av: modules}));
	});
var $jfmengels$elm_review$Review$Project$Valid$modulesByModuleName = function (_v0) {
	var project = _v0;
	return project.ez;
};
var $jfmengels$elm_review$Review$Project$Valid$projectCache = function (_v0) {
	var project = _v0;
	return project.c3;
};
var $jfmengels$elm_review$Review$Project$Valid$updateProjectCache = F2(
	function (projectCache_, _v0) {
		var project = _v0;
		return _Utils_update(
			project,
			{c3: projectCache_});
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeHelp = F4(
	function (cacheKey, moduleName, module_, project) {
		var projectCache = $jfmengels$elm_review$Review$Project$Valid$projectCache(project);
		var modulesByModuleName = $jfmengels$elm_review$Review$Project$Valid$modulesByModuleName(project);
		var moduleAst = $jfmengels$elm_review$Review$Project$ProjectModule$ast(module_);
		var elmJsonContentHash = $jfmengels$elm_review$Review$Project$Valid$elmJsonHash(project);
		var deps = function () {
			var _v2 = projectCache.e7;
			if (!_v2.$) {
				var cache = _v2.a;
				return _Utils_eq(elmJsonContentHash, cache.ff) ? cache.e8 : $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeDependencies(project);
			} else {
				return $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeDependencies(project);
			}
		}();
		var _v0 = A3(
			$elm$core$List$foldl,
			F2(
				function (node, acc) {
					return A4($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeImportedModulesDocs, modulesByModuleName, deps, node, acc);
				}),
			_Utils_Tuple2(
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$preludeModuleDocs(deps),
				projectCache),
			moduleAst.g4);
		var imported = _v0.a;
		var projectCacheWithComputedImports = _v0.b;
		var _v1 = function () {
			var moduleContext = A2(
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectLookupTable,
				moduleAst.e4,
				A2(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectModuleDocs,
					moduleAst,
					A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$fromProjectToModule, moduleName, imported)));
			return _Utils_Tuple2(
				moduleContext.n,
				A3(
					$elm$core$Dict$insert,
					moduleName,
					{
						eV: moduleContext.cd,
						e$: _List_Nil,
						b5: '',
						bV: A2($elm$core$String$join, '.', moduleName),
						gl: moduleContext.cf,
						gm: moduleContext.cg
					},
					projectCacheWithComputedImports.av));
		}();
		var lookupTable = _v1.a;
		var modules = _v1.b;
		var newProjectCache = {
			e7: $elm$core$Maybe$Just(
				{e8: deps, ff: elmJsonContentHash}),
			ew: A3(
				$elm$core$Dict$insert,
				moduleName,
				{cZ: cacheKey, n: lookupTable},
				projectCacheWithComputedImports.ew),
			av: modules
		};
		return _Utils_Tuple2(
			lookupTable,
			A2($jfmengels$elm_review$Review$Project$Valid$updateProjectCache, newProjectCache, project));
	});
var $jfmengels$elm_review$Review$Project$ProjectCache$Type = 1;
var $jfmengels$elm_review$Review$Project$ProjectCache$typeElement = function (name) {
	return _Utils_Tuple2(name, 1);
};
var $jfmengels$elm_review$Review$Project$ProjectCache$Value = 0;
var $jfmengels$elm_review$Review$Project$ProjectCache$valueElement = function (name) {
	return _Utils_Tuple2(name, 0);
};
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllAliases = F2(
	function (values, acc) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, subAcc) {
					var name = _v0.bV;
					var tipe = _v0.eT;
					return A2(
						$elm$core$List$cons,
						$jfmengels$elm_review$Review$Project$ProjectCache$typeElement(name),
						function () {
							if ((tipe.$ === 4) && (tipe.b.$ === 1)) {
								var _v2 = tipe.b;
								return A2(
									$elm$core$List$cons,
									$jfmengels$elm_review$Review$Project$ProjectCache$valueElement(name),
									subAcc);
							} else {
								return subAcc;
							}
						}());
				}),
			acc,
			values);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$insertConstructors = F2(
	function (tags, acc) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, subSubAcc) {
					var tagName = _v0.a;
					return A2(
						$elm$core$List$cons,
						$jfmengels$elm_review$Review$Project$ProjectCache$valueElement(tagName),
						subSubAcc);
				}),
			acc,
			tags);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllTypes = F2(
	function (unions, acc) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (union, subAcc) {
					return A2(
						$elm$core$List$cons,
						$jfmengels$elm_review$Review$Project$ProjectCache$typeElement(union.bV),
						A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$insertConstructors, union.hS, subAcc));
				}),
			acc,
			unions);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllValues = F2(
	function (values, acc) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, subAcc) {
					var name = _v0.bV;
					return A2(
						$elm$core$List$cons,
						$jfmengels$elm_review$Review$Project$ProjectCache$valueElement(name),
						subAcc);
				}),
			acc,
			values);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllExposed = F2(
	function (moduleDocs, acc) {
		var importedElements = A2(
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllTypes,
			moduleDocs.gl,
			A2(
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllAliases,
				moduleDocs.eV,
				A2(
					$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllValues,
					moduleDocs.gm,
					A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2($elm$core$Dict$get, moduleDocs.bV, acc)))));
		return A3($elm$core$Dict$insert, moduleDocs.bV, importedElements, acc);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectExplicit = F3(
	function (moduleDocs, list, acc) {
		var importedConstructors = A3(
			$elm$core$List$foldl,
			F2(
				function (node, subAcc) {
					var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
					if (_v0.$ === 3) {
						var name = _v0.a.bV;
						var _v1 = A2(
							$jfmengels$elm_review$Vendor$ListExtra$find,
							function (union) {
								return _Utils_eq(union.bV, name);
							},
							moduleDocs.gl);
						if (!_v1.$) {
							var union = _v1.a;
							return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$insertConstructors, union.hS, subAcc);
						} else {
							return subAcc;
						}
					} else {
						return subAcc;
					}
				}),
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Dict$get, moduleDocs.bV, acc)),
			list);
		return A3($elm$core$Dict$insert, moduleDocs.bV, importedConstructors, acc);
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeImplicitlyImportedElements = F3(
	function (modules, _v0, acc) {
		var import_ = _v0.b;
		var _v1 = import_.ef;
		if (_v1.$ === 1) {
			return acc;
		} else {
			if (_v1.a.b.$ === 1) {
				var _v2 = _v1.a;
				var list = _v2.b.a;
				var _v3 = A2(
					$elm$core$Dict$get,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(import_.dE),
					modules);
				if (!_v3.$) {
					var moduleDocs = _v3.a;
					return A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectExplicit, moduleDocs, list, acc);
				} else {
					return acc;
				}
			} else {
				var _v4 = _v1.a;
				var _v5 = A2(
					$elm$core$Dict$get,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(import_.dE),
					modules);
				if (!_v5.$) {
					var moduleDocs = _v5.a;
					return A2($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$collectAllExposed, moduleDocs, acc);
				} else {
					return acc;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$compute = F3(
	function (moduleName, module_, project) {
		var projectCache = $jfmengels$elm_review$Review$Project$Valid$projectCache(project);
		var implicitImports = A3(
			$elm$core$List$foldl,
			F2(
				function (node, acc) {
					return A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeImplicitlyImportedElements, projectCache.av, node, acc);
				}),
			$elm$core$Dict$empty,
			$jfmengels$elm_review$Review$Project$ProjectModule$ast(module_).g4);
		var computeLookupTableForModule = function (_v1) {
			return A4(
				$jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$computeHelp,
				{
					d7: $jfmengels$elm_review$Review$Project$ProjectModule$contentHash(module_),
					fu: implicitImports
				},
				moduleName,
				module_,
				project);
		};
		var _v0 = A2($elm$core$Dict$get, moduleName, projectCache.ew);
		if (!_v0.$) {
			var cache = _v0.a;
			return (_Utils_eq(
				cache.cZ.d7,
				$jfmengels$elm_review$Review$Project$ProjectModule$contentHash(module_)) && _Utils_eq(cache.cZ.fu, implicitImports)) ? _Utils_Tuple2(cache.n, project) : computeLookupTableForModule(0);
		} else {
			return computeLookupTableForModule(0);
		}
	});
var $jfmengels$elm_review$Review$Rule$computeModuleNameLookupTable = F3(
	function (requestedData, project, module_) {
		var moduleName = $jfmengels$elm_review$Review$Project$ProjectModule$moduleName(module_);
		return requestedData.dF ? A3($jfmengels$elm_review$Review$ModuleNameLookupTable$Compute$compute, moduleName, module_, project) : _Utils_Tuple2(
			$jfmengels$elm_review$Review$ModuleNameLookupTable$Internal$empty(moduleName),
			project);
	});
var $jfmengels$elm_review$Unicode$slice = F3(
	function (start, end, string) {
		return $elm$core$String$fromList(
			A2(
				$elm$core$List$take,
				end - start,
				A2(
					$elm$core$List$drop,
					start,
					$elm$core$String$toList(string))));
	});
var $jfmengels$elm_review$Review$Rule$takeNLines = F3(
	function (n, lines, linesTaken) {
		takeNLines:
		while (true) {
			if (n <= 0) {
				return {
					eu: $elm$core$List$head(lines),
					ev: linesTaken
				};
			} else {
				if (!lines.b) {
					return {eu: $elm$core$Maybe$Nothing, ev: linesTaken};
				} else {
					var line = lines.a;
					var rest = lines.b;
					var $temp$n = n - 1,
						$temp$lines = rest,
						$temp$linesTaken = linesTaken + ('\n' + line);
					n = $temp$n;
					lines = $temp$lines;
					linesTaken = $temp$linesTaken;
					continue takeNLines;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$extractSourceCode = F2(
	function (lines, _v0) {
		var start = _v0.cB;
		var end = _v0.b9;
		var _v1 = A2($elm$core$List$drop, start.bp - 1, lines);
		if (!_v1.b) {
			return '';
		} else {
			var firstLine = _v1.a;
			var rest = _v1.b;
			if (_Utils_eq(start.bp, end.bp)) {
				return A3($jfmengels$elm_review$Unicode$slice, start.a6 - 1, end.a6 - 1, firstLine);
			} else {
				var _v2 = A3($jfmengels$elm_review$Review$Rule$takeNLines, (end.bp - start.bp) - 1, rest, '');
				var linesTaken = _v2.ev;
				var lastLine = _v2.eu;
				return _Utils_ap(
					A2($jfmengels$elm_review$Unicode$dropLeft, start.a6 - 1, firstLine),
					_Utils_ap(
						linesTaken,
						function () {
							if (!lastLine.$) {
								var lastLine_ = lastLine.a;
								return '\n' + A2($jfmengels$elm_review$Unicode$left, end.a6 - 1, lastLine_);
							} else {
								return '';
							}
						}()));
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$findModuleDocumentationBeforeCutOffLine = F2(
	function (cutOffLine, comments) {
		findModuleDocumentationBeforeCutOffLine:
		while (true) {
			if (!comments.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var comment = comments.a;
				var range = comment.a;
				var content = comment.b;
				var restOfComments = comments.b;
				if (_Utils_cmp(range.cB.bp, cutOffLine) > 0) {
					return $elm$core$Maybe$Nothing;
				} else {
					if (A2($elm$core$String$startsWith, '{-|', content)) {
						return $elm$core$Maybe$Just(comment);
					} else {
						var $temp$cutOffLine = cutOffLine,
							$temp$comments = restOfComments;
						cutOffLine = $temp$cutOffLine;
						comments = $temp$comments;
						continue findModuleDocumentationBeforeCutOffLine;
					}
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$findModuleDocumentation = function (ast) {
	var cutOffLine = function () {
		var _v0 = ast.g4;
		if (_v0.b) {
			var firstImport = _v0.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$range(firstImport).cB.bp;
		} else {
			var _v1 = ast.e4;
			if (_v1.b) {
				var firstDeclaration = _v1.a;
				return $stil4m$elm_syntax$Elm$Syntax$Node$range(firstDeclaration).cB.bp;
			} else {
				return 0;
			}
		}
	}();
	return A2($jfmengels$elm_review$Review$Rule$findModuleDocumentationBeforeCutOffLine, cutOffLine, ast.gI);
};
var $jfmengels$elm_review$Review$Project$ProjectModule$isInSourceDirectories = function (_v0) {
	var module_ = _v0;
	return module_.fy;
};
var $jfmengels$elm_review$Review$Rule$fromJsArrayToList = _List_fromArray;
var $jfmengels$elm_review$Review$Rule$JsArray = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Rule$fromListToJsArray = _List_toArray;
var $jfmengels$elm_review$Review$Rule$mutatingMap = F2(
  function (mapper, arr) {
    var len = arr.length;
    for (var i = 0; i < len; i++) {
      mapper(arr[i]);
    }
    return arr;
  });
var $jfmengels$elm_review$Review$Rule$runVisitor = F3(
	function (field, a, original) {
		var ruleModuleVisitor = original;
		var _v0 = field(ruleModuleVisitor);
		if (!_v0.$) {
			var visitor = _v0.a;
			return visitor(a);
		} else {
			return original;
		}
	});
var $jfmengels$elm_review$Review$Rule$functionToExpression = function (_function) {
	return $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.gM).dm;
};
var $jfmengels$elm_review$Review$Rule$expressionChildren = function (node) {
	var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
	switch (_v0.$) {
		case 1:
			var expressions = _v0.a;
			return expressions;
		case 19:
			var elements = _v0.a;
			return elements;
		case 18:
			var fields = _v0.a;
			return A2(
				$elm$core$List$map,
				function (_v1) {
					var _v2 = _v1.b;
					var expr = _v2.b;
					return expr;
				},
				fields);
		case 22:
			var setters = _v0.b;
			return A2(
				$elm$core$List$map,
				function (_v3) {
					var _v4 = _v3.b;
					var expr = _v4.b;
					return expr;
				},
				setters);
		case 14:
			var expr = _v0.a;
			return _List_fromArray(
				[expr]);
		case 2:
			var direction = _v0.b;
			var left = _v0.c;
			var right = _v0.d;
			switch (direction) {
				case 0:
					return _List_fromArray(
						[left, right]);
				case 1:
					return _List_fromArray(
						[right, left]);
				default:
					return _List_fromArray(
						[left, right]);
			}
		case 4:
			var cond = _v0.a;
			var then_ = _v0.b;
			var else_ = _v0.c;
			return _List_fromArray(
				[cond, then_, else_]);
		case 15:
			var expression = _v0.a.dm;
			var declarations = _v0.a.e4;
			return A3(
				$elm$core$List$foldr,
				F2(
					function (declaration, acc) {
						var _v6 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
						if (!_v6.$) {
							var _function = _v6.a;
							return A2(
								$elm$core$List$cons,
								$jfmengels$elm_review$Review$Rule$functionToExpression(_function),
								acc);
						} else {
							var expr = _v6.b;
							return A2($elm$core$List$cons, expr, acc);
						}
					}),
				_List_fromArray(
					[expression]),
				declarations);
		case 16:
			var expression = _v0.a.dm;
			var cases = _v0.a.gE;
			return A2(
				$elm$core$List$cons,
				expression,
				A2(
					$elm$core$List$map,
					function (_v7) {
						var caseExpression = _v7.b;
						return caseExpression;
					},
					cases));
		case 17:
			var expression = _v0.a.dm;
			return _List_fromArray(
				[expression]);
		case 13:
			var expressions = _v0.a;
			return expressions;
		case 10:
			var expr = _v0.a;
			return _List_fromArray(
				[expr]);
		case 20:
			var expr = _v0.a;
			return _List_fromArray(
				[expr]);
		default:
			return _List_Nil;
	}
};
var $jfmengels$elm_review$Review$Rule$runVisitor2 = F4(
	function (field, a, b, original) {
		var ruleModuleVisitor = original;
		var _v0 = field(ruleModuleVisitor);
		if (!_v0.$) {
			var visitor = _v0.a;
			return A2(visitor, a, b);
		} else {
			return original;
		}
	});
var $jfmengels$elm_review$Review$Rule$visitCaseBranch = F3(
	function (caseBlockWithRange, caseBranch, rules) {
		var caseExpression = caseBranch.b;
		return A2(
			$jfmengels$elm_review$Review$Rule$mutatingMap,
			function (acc) {
				return A4(
					$jfmengels$elm_review$Review$Rule$runVisitor2,
					function ($) {
						return $.aA;
					},
					caseBlockWithRange,
					caseBranch,
					acc);
			},
			A2(
				$jfmengels$elm_review$Review$Rule$visitExpression,
				caseExpression,
				A2(
					$jfmengels$elm_review$Review$Rule$mutatingMap,
					function (acc) {
						return A4(
							$jfmengels$elm_review$Review$Rule$runVisitor2,
							function ($) {
								return $.az;
							},
							caseBlockWithRange,
							caseBranch,
							acc);
					},
					rules)));
	});
var $jfmengels$elm_review$Review$Rule$visitExpression = F2(
	function (node, rules) {
		var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
		switch (_v1.$) {
			case 15:
				var letBlock = _v1.a;
				var updatedRules = A2(
					$jfmengels$elm_review$Review$Rule$mutatingMap,
					function (acc) {
						return A3(
							$jfmengels$elm_review$Review$Rule$runVisitor,
							function ($) {
								return $.cP;
							},
							node,
							acc);
					},
					rules);
				return A2(
					$jfmengels$elm_review$Review$Rule$mutatingMap,
					function (acc) {
						return A3(
							$jfmengels$elm_review$Review$Rule$runVisitor,
							function ($) {
								return $.cQ;
							},
							node,
							acc);
					},
					A2(
						$jfmengels$elm_review$Review$Rule$visitExpression,
						letBlock.dm,
						A3(
							$elm$core$List$foldl,
							$jfmengels$elm_review$Review$Rule$visitLetDeclaration(
								A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
									letBlock)),
							updatedRules,
							letBlock.e4)));
			case 16:
				var caseBlock = _v1.a;
				var updatedRules = A2(
					$jfmengels$elm_review$Review$Rule$visitExpression,
					caseBlock.dm,
					A2(
						$jfmengels$elm_review$Review$Rule$mutatingMap,
						function (acc) {
							return A3(
								$jfmengels$elm_review$Review$Rule$runVisitor,
								function ($) {
									return $.cP;
								},
								node,
								acc);
						},
						rules));
				return A2(
					$jfmengels$elm_review$Review$Rule$mutatingMap,
					function (acc) {
						return A3(
							$jfmengels$elm_review$Review$Rule$runVisitor,
							function ($) {
								return $.cQ;
							},
							node,
							acc);
					},
					A3(
						$elm$core$List$foldl,
						F2(
							function (case_, acc) {
								return A3(
									$jfmengels$elm_review$Review$Rule$visitCaseBranch,
									A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$Node,
										$stil4m$elm_syntax$Elm$Syntax$Node$range(node),
										caseBlock),
									case_,
									acc);
							}),
						updatedRules,
						caseBlock.gE));
			default:
				var updatedRules = A2(
					$jfmengels$elm_review$Review$Rule$mutatingMap,
					function (acc) {
						return A3(
							$jfmengels$elm_review$Review$Rule$runVisitor,
							function ($) {
								return $.cP;
							},
							node,
							acc);
					},
					rules);
				return A2(
					$jfmengels$elm_review$Review$Rule$mutatingMap,
					function (acc) {
						return A3(
							$jfmengels$elm_review$Review$Rule$runVisitor,
							function ($) {
								return $.cQ;
							},
							node,
							acc);
					},
					A3(
						$elm$core$List$foldl,
						$jfmengels$elm_review$Review$Rule$visitExpression,
						updatedRules,
						$jfmengels$elm_review$Review$Rule$expressionChildren(node)));
		}
	});
var $jfmengels$elm_review$Review$Rule$visitLetDeclaration = F3(
	function (letBlockWithRange, letDeclarationWithRange, rules) {
		var letDeclaration = letDeclarationWithRange.b;
		var expressionNode = function () {
			if (!letDeclaration.$) {
				var _function = letDeclaration.a;
				return $jfmengels$elm_review$Review$Rule$functionToExpression(_function);
			} else {
				var expr = letDeclaration.b;
				return expr;
			}
		}();
		return A2(
			$jfmengels$elm_review$Review$Rule$mutatingMap,
			function (acc) {
				return A4(
					$jfmengels$elm_review$Review$Rule$runVisitor2,
					function ($) {
						return $.aH;
					},
					letBlockWithRange,
					letDeclarationWithRange,
					acc);
			},
			A2(
				$jfmengels$elm_review$Review$Rule$visitExpression,
				expressionNode,
				A2(
					$jfmengels$elm_review$Review$Rule$mutatingMap,
					function (acc) {
						return A4(
							$jfmengels$elm_review$Review$Rule$runVisitor2,
							function ($) {
								return $.aG;
							},
							letBlockWithRange,
							letDeclarationWithRange,
							acc);
					},
					rules)));
	});
var $jfmengels$elm_review$Review$Rule$visitDeclarationAndExpressions = F2(
	function (declaration, rules) {
		var updatedRules = A2(
			$jfmengels$elm_review$Review$Rule$mutatingMap,
			function (acc) {
				return A3(
					$jfmengels$elm_review$Review$Rule$runVisitor,
					function ($) {
						return $.an;
					},
					declaration,
					acc);
			},
			rules);
		return A2(
			$jfmengels$elm_review$Review$Rule$mutatingMap,
			function (acc) {
				return A3(
					$jfmengels$elm_review$Review$Rule$runVisitor,
					function ($) {
						return $.ao;
					},
					declaration,
					acc);
			},
			function () {
				var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
				if (!_v0.$) {
					var _function = _v0.a;
					return A2(
						$jfmengels$elm_review$Review$Rule$visitExpression,
						$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.gM).dm,
						updatedRules);
				} else {
					return updatedRules;
				}
			}());
	});
var $jfmengels$elm_review$Review$Rule$visitDeclarationsAndExpressions = F2(
	function (declarations, rules) {
		return A3($elm$core$List$foldl, $jfmengels$elm_review$Review$Rule$visitDeclarationAndExpressions, rules, declarations);
	});
var $jfmengels$elm_review$Review$Rule$visitModuleForProjectRule = F2(
	function (availableData, ruleModuleVisitors) {
		return $jfmengels$elm_review$Review$Rule$fromJsArrayToList(
			A2(
				$jfmengels$elm_review$Review$Rule$mutatingMap,
				function (acc) {
					return A3(
						$jfmengels$elm_review$Review$Rule$runVisitor,
						function ($) {
							return $.ej;
						},
						0,
						acc);
				},
				A2(
					$jfmengels$elm_review$Review$Rule$visitDeclarationsAndExpressions,
					availableData.gv.e4,
					A2(
						$jfmengels$elm_review$Review$Rule$mutatingMap,
						function (acc) {
							return A3(
								$jfmengels$elm_review$Review$Rule$runVisitor,
								function ($) {
									return $.aB;
								},
								availableData.gv.e4,
								acc);
						},
						A2(
							$jfmengels$elm_review$Review$Rule$mutatingMap,
							function (acc) {
								return A3(
									$jfmengels$elm_review$Review$Rule$runVisitor,
									function ($) {
										return $.er;
									},
									availableData.gv.g4,
									acc);
							},
							A2(
								$jfmengels$elm_review$Review$Rule$mutatingMap,
								function (acc) {
									return A3(
										$jfmengels$elm_review$Review$Rule$runVisitor,
										function ($) {
											return $.d4;
										},
										availableData.gv.gI,
										acc);
								},
								A2(
									$jfmengels$elm_review$Review$Rule$mutatingMap,
									function (acc) {
										return A3(
											$jfmengels$elm_review$Review$Rule$runVisitor,
											function ($) {
												return $.aJ;
											},
											availableData.c0,
											acc);
									},
									A2(
										$jfmengels$elm_review$Review$Rule$mutatingMap,
										function (acc) {
											return A3(
												$jfmengels$elm_review$Review$Rule$runVisitor,
												function ($) {
													return $.aI;
												},
												availableData.gv.hi,
												acc);
										},
										$jfmengels$elm_review$Review$Rule$fromListToJsArray(
											A2(
												$elm$core$List$map,
												function (createRuleVisitor) {
													return createRuleVisitor(availableData);
												},
												ruleModuleVisitors))))))))));
	});
var $jfmengels$elm_review$Review$Rule$computeModuleWithRuleVisitors = F5(
	function (project, module_, inputRuleModuleVisitors, _v0, rulesNotToRun) {
		var requestedData = _v0;
		var ast = $jfmengels$elm_review$Review$Project$ProjectModule$ast(module_);
		var _v1 = A3($jfmengels$elm_review$Review$Rule$computeModuleNameLookupTable, requestedData, project, module_);
		var moduleNameLookupTable = _v1.a;
		var newProject = _v1.b;
		var availableData = {
			gv: ast,
			dn: function () {
				if (requestedData.dV) {
					var lines = $elm$core$String$lines(
						$jfmengels$elm_review$Review$Project$ProjectModule$source(module_));
					return function (range) {
						return A2($jfmengels$elm_review$Review$Rule$extractSourceCode, lines, range);
					};
				} else {
					return $elm$core$Basics$always('');
				}
			}(),
			g_: $jfmengels$elm_review$Review$Project$ProjectModule$path(module_),
			fy: $jfmengels$elm_review$Review$Project$ProjectModule$isInSourceDirectories(module_),
			c0: $jfmengels$elm_review$Review$Rule$findModuleDocumentation(ast),
			dD: $jfmengels$elm_review$Review$Project$ProjectModule$path(module_),
			dF: moduleNameLookupTable
		};
		var outputRuleProjectVisitors = A2(
			$elm$core$List$map,
			function (_v2) {
				var ruleModuleVisitor = _v2;
				return ruleModuleVisitor.eU(0);
			},
			A2($jfmengels$elm_review$Review$Rule$visitModuleForProjectRule, availableData, inputRuleModuleVisitors));
		return _Utils_Tuple2(
			newProject,
			A2($elm$core$List$append, rulesNotToRun, outputRuleProjectVisitors));
	});
var $jfmengels$elm_review$Review$Rule$computeWhatsRequiredToAnalyze = F4(
	function (project, module_, incoming, ruleProjectVisitors) {
		var filePath = $jfmengels$elm_review$Review$Project$ProjectModule$path(module_);
		return A3(
			$elm$core$List$foldl,
			F2(
				function (rule, _v0) {
					var ruleProjectVisitor = rule;
					var _with = _v0.a;
					var requestedAcc = _v0.b;
					var without = _v0.c;
					var _v1 = ruleProjectVisitor.d8;
					if (!_v1.$) {
						var moduleVisitorCreator = _v1.a;
						var _v2 = A4(
							moduleVisitorCreator,
							project,
							filePath,
							$jfmengels$elm_review$Review$Project$ProjectModule$contentHash(module_),
							incoming);
						if (!_v2.$) {
							var moduleVisitor = _v2.a;
							return _Utils_Tuple3(
								A2($elm$core$List$cons, moduleVisitor, _with),
								A2($jfmengels$elm_review$Review$RequestedData$combineJust, ruleProjectVisitor.hG, requestedAcc),
								without);
						} else {
							return _Utils_Tuple3(
								_with,
								requestedAcc,
								A2($elm$core$List$cons, rule, without));
						}
					} else {
						return _Utils_Tuple3(
							_with,
							requestedAcc,
							A2($elm$core$List$cons, rule, without));
					}
				}),
			_Utils_Tuple3(_List_Nil, $jfmengels$elm_review$Review$RequestedData$none, _List_Nil),
			ruleProjectVisitors);
	});
var $jfmengels$elm_review$Review$Rule$BackToElmJson = {$: 1};
var $jfmengels$elm_review$Review$Rule$BackToExtraFiles = {$: 3};
var $jfmengels$elm_review$Review$Rule$BackToReadme = {$: 2};
var $jfmengels$elm_review$Review$Rule$ContinueWithNextStep = function (a) {
	return {$: 0, a: a};
};
var $jfmengels$elm_review$Review$Rule$NextStepAbort = {$: 4};
var $jfmengels$elm_review$Review$Rule$ReComputeModule = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Vendor$Zipper$focusl = F2(
	function (fc, zipper) {
		focusl:
		while (true) {
			if (fc(
				$jfmengels$elm_review$Vendor$Zipper$current(zipper))) {
				return $elm$core$Maybe$Just(zipper);
			} else {
				var _v0 = $jfmengels$elm_review$Vendor$Zipper$prev(zipper);
				if (!_v0.$) {
					var z = _v0.a;
					var $temp$fc = fc,
						$temp$zipper = z;
					fc = $temp$fc;
					zipper = $temp$zipper;
					continue focusl;
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$findFixInComputeModuleResults = F3(
	function (params, remainingRules, rulesSoFar) {
		findFixInComputeModuleResults:
		while (true) {
			var reviewOptions = params.dO;
			var module_ = params.cq;
			var project = params.h;
			var moduleZipper = params.dG;
			var fixedErrors = params.g0;
			var incoming = params.g7;
			if (!remainingRules.b) {
				return $jfmengels$elm_review$Review$Rule$ContinueWithNextStep(
					{
						g0: fixedErrors,
						aM: $jfmengels$elm_review$Review$Rule$ModuleVisitStep(
							$jfmengels$elm_review$Vendor$Zipper$next(moduleZipper)),
						h: project,
						f: rulesSoFar
					});
			} else {
				var ruleProjectVisitor = remainingRules.a;
				var rest = remainingRules.b;
				var modulePath = $jfmengels$elm_review$Review$Project$ProjectModule$path(module_);
				var errors = ruleProjectVisitor.eo(modulePath);
				var _v1 = A6(
					$jfmengels$elm_review$Review$Rule$findFix,
					reviewOptions,
					project,
					function (newErrors) {
						return A2(ruleProjectVisitor.eN, modulePath, newErrors);
					},
					errors,
					fixedErrors,
					$elm$core$Maybe$Just(moduleZipper));
				if (_v1.$ === 1) {
					var newRule = _v1.a;
					var _v2 = _v1.b;
					var postFixStatus = _v2.a;
					var fixResult = _v2.b;
					if (!postFixStatus.$) {
						var newFixedErrors = postFixStatus.a;
						return $jfmengels$elm_review$Review$Rule$ContinueWithNextStep(
							{
								g0: newFixedErrors,
								aM: $jfmengels$elm_review$Review$Rule$NextStepAbort,
								h: fixResult.h,
								f: A2(
									$elm$core$List$cons,
									newRule,
									_Utils_ap(rest, rulesSoFar))
							});
					} else {
						var newFixedErrors = postFixStatus.a;
						var _v4 = fixResult.P;
						switch (_v4.$) {
							case 0:
								var source = _v4.a.hK;
								var ast = _v4.a.gv;
								var newModuleZipper_ = _v4.b;
								var filePath = $jfmengels$elm_review$Review$Rule$errorFilePath(fixResult.bb);
								if (_Utils_eq(
									$jfmengels$elm_review$Review$Project$ProjectModule$path(module_),
									filePath)) {
									return $jfmengels$elm_review$Review$Rule$ReComputeModule(
										{
											g0: newFixedErrors,
											g7: incoming,
											dG: newModuleZipper_,
											cq: $jfmengels$elm_review$Review$Project$ProjectModule$create(
												{
													gv: ast,
													fy: $jfmengels$elm_review$Review$Project$ProjectModule$isInSourceDirectories(module_),
													hw: filePath,
													hK: source
												}),
											h: fixResult.h,
											dO: reviewOptions,
											f: A2(
												$elm$core$List$cons,
												newRule,
												_Utils_ap(rest, rulesSoFar))
										});
								} else {
									var _v5 = A2(
										$jfmengels$elm_review$Vendor$Zipper$focusl,
										function (mod) {
											return _Utils_eq(mod.fP.c_, filePath);
										},
										moduleZipper);
									if (!_v5.$) {
										var newModuleZipper = _v5.a;
										return $jfmengels$elm_review$Review$Rule$ContinueWithNextStep(
											{
												g0: newFixedErrors,
												aM: $jfmengels$elm_review$Review$Rule$ModuleVisitStep(
													$elm$core$Maybe$Just(newModuleZipper)),
												h: fixResult.h,
												f: A2(
													$elm$core$List$cons,
													newRule,
													_Utils_ap(rest, rulesSoFar))
											});
									} else {
										return $jfmengels$elm_review$Review$Rule$ContinueWithNextStep(
											{
												g0: fixedErrors,
												aM: $jfmengels$elm_review$Review$Rule$ModuleVisitStep(
													$jfmengels$elm_review$Vendor$Zipper$next(moduleZipper)),
												h: project,
												f: A2(
													$elm$core$List$cons,
													newRule,
													_Utils_ap(rest, rulesSoFar))
											});
									}
								}
							case 1:
								return $jfmengels$elm_review$Review$Rule$ContinueWithNextStep(
									{
										g0: fixedErrors,
										aM: $jfmengels$elm_review$Review$Rule$ModuleVisitStep($elm$core$Maybe$Nothing),
										h: project,
										f: A2(
											$elm$core$List$cons,
											newRule,
											_Utils_ap(rest, rulesSoFar))
									});
							case 2:
								return $jfmengels$elm_review$Review$Rule$ContinueWithNextStep(
									{
										g0: A2($jfmengels$elm_review$Review$Fix$FixedErrors$insert, fixResult.bb, fixedErrors),
										aM: $jfmengels$elm_review$Review$Rule$BackToElmJson,
										h: fixResult.h,
										f: A2(
											$elm$core$List$cons,
											newRule,
											_Utils_ap(rest, rulesSoFar))
									});
							case 3:
								return $jfmengels$elm_review$Review$Rule$ContinueWithNextStep(
									{
										g0: A2($jfmengels$elm_review$Review$Fix$FixedErrors$insert, fixResult.bb, fixedErrors),
										aM: $jfmengels$elm_review$Review$Rule$BackToReadme,
										h: fixResult.h,
										f: A2(
											$elm$core$List$cons,
											newRule,
											_Utils_ap(rest, rulesSoFar))
									});
							default:
								return $jfmengels$elm_review$Review$Rule$ContinueWithNextStep(
									{
										g0: A2($jfmengels$elm_review$Review$Fix$FixedErrors$insert, fixResult.bb, fixedErrors),
										aM: $jfmengels$elm_review$Review$Rule$BackToExtraFiles,
										h: fixResult.h,
										f: A2(
											$elm$core$List$cons,
											newRule,
											_Utils_ap(rest, rulesSoFar))
									});
						}
					}
				} else {
					var newRule = _v1.a;
					var $temp$params = params,
						$temp$remainingRules = rest,
						$temp$rulesSoFar = A2($elm$core$List$cons, newRule, rulesSoFar);
					params = $temp$params;
					remainingRules = $temp$remainingRules;
					rulesSoFar = $temp$rulesSoFar;
					continue findFixInComputeModuleResults;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$computeModule = function (params) {
	computeModule:
	while (true) {
		var _v0 = A4($jfmengels$elm_review$Review$Rule$computeWhatsRequiredToAnalyze, params.h, params.cq, params.g7, params.f);
		var inputRuleModuleVisitors = _v0.a;
		var requestedData = _v0.b;
		var rulesNotToRun = _v0.c;
		var paramsAfterVisit = function () {
			if ($elm$core$List$isEmpty(inputRuleModuleVisitors)) {
				return params;
			} else {
				var _v2 = A5($jfmengels$elm_review$Review$Rule$computeModuleWithRuleVisitors, params.h, params.cq, inputRuleModuleVisitors, requestedData, rulesNotToRun);
				var newProject = _v2.a;
				var newRules = _v2.b;
				return _Utils_update(
					params,
					{h: newProject, f: newRules});
			}
		}();
		var _v1 = A3($jfmengels$elm_review$Review$Rule$findFixInComputeModuleResults, paramsAfterVisit, paramsAfterVisit.f, _List_Nil);
		if (!_v1.$) {
			var nextStepResult = _v1.a;
			return nextStepResult;
		} else {
			var newParams = _v1.a;
			var $temp$params = newParams;
			params = $temp$params;
			continue computeModule;
		}
	}
};
var $jfmengels$elm_review$Review$Rule$computeModuleAndCacheResult = F5(
	function (reviewOptions, moduleZipper, project, ruleProjectVisitors, fixedErrors) {
		var _v0 = $jfmengels$elm_review$Vendor$Zipper$current(moduleZipper);
		var node = _v0.fP;
		var incoming = _v0.g7;
		var _v1 = A2($jfmengels$elm_review$Review$Project$Valid$getModuleByPath, node.c_, project);
		if (_v1.$ === 1) {
			return {
				g0: fixedErrors,
				aM: $jfmengels$elm_review$Review$Rule$ModuleVisitStep(
					$jfmengels$elm_review$Vendor$Zipper$next(moduleZipper)),
				h: project,
				f: ruleProjectVisitors
			};
		} else {
			var module_ = _v1.a;
			return $jfmengels$elm_review$Review$Rule$computeModule(
				{g0: fixedErrors, g7: incoming, dG: moduleZipper, cq: module_, h: project, dO: reviewOptions, f: ruleProjectVisitors});
		}
	});
var $jfmengels$elm_review$Review$Rule$computeModules = F5(
	function (reviewOptions, maybeModuleZipper, initialProject, ruleProjectVisitors, fixedErrors) {
		computeModules:
		while (true) {
			if (maybeModuleZipper.$ === 1) {
				return {g0: fixedErrors, h: initialProject, f: ruleProjectVisitors, t: $jfmengels$elm_review$Review$Rule$FinalProjectEvaluation};
			} else {
				var moduleZipper = maybeModuleZipper.a;
				var result = A5($jfmengels$elm_review$Review$Rule$computeModuleAndCacheResult, reviewOptions, moduleZipper, initialProject, ruleProjectVisitors, fixedErrors);
				var _v1 = result.aM;
				switch (_v1.$) {
					case 0:
						var newModuleZipper = _v1.a;
						var $temp$reviewOptions = reviewOptions,
							$temp$maybeModuleZipper = newModuleZipper,
							$temp$initialProject = result.h,
							$temp$ruleProjectVisitors = result.f,
							$temp$fixedErrors = result.g0;
						reviewOptions = $temp$reviewOptions;
						maybeModuleZipper = $temp$maybeModuleZipper;
						initialProject = $temp$initialProject;
						ruleProjectVisitors = $temp$ruleProjectVisitors;
						fixedErrors = $temp$fixedErrors;
						continue computeModules;
					case 1:
						return {g0: result.g0, h: result.h, f: result.f, t: $jfmengels$elm_review$Review$Rule$ElmJson};
					case 2:
						return {g0: result.g0, h: result.h, f: result.f, t: $jfmengels$elm_review$Review$Rule$Readme};
					case 3:
						return {g0: result.g0, h: result.h, f: result.f, t: $jfmengels$elm_review$Review$Rule$ExtraFiles};
					default:
						return {g0: result.g0, h: result.h, f: result.f, t: $jfmengels$elm_review$Review$Rule$EndAnalysis};
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$computeReadme = F6(
	function (reviewOptions, project, fixedErrors, readmeData, remainingRules, accRules) {
		computeReadme:
		while (true) {
			if (!remainingRules.b) {
				return {g0: fixedErrors, h: project, f: accRules, t: $jfmengels$elm_review$Review$Rule$ExtraFiles};
			} else {
				var untouched = remainingRules.a;
				var rule = untouched;
				var rest = remainingRules.b;
				var _v1 = rule.N;
				if (!_v1.$) {
					var visitor = _v1.a;
					var _v2 = A2(visitor, project, readmeData);
					var errors = _v2.a;
					var updatedRule = _v2.b;
					var _v3 = A5($jfmengels$elm_review$Review$Rule$standardFindFix, reviewOptions, project, fixedErrors, updatedRule.eO, errors);
					if (_v3.$ === 1) {
						var newProject = _v3.a.ct;
						var newRule = _v3.a.cu;
						var newFixedErrors = _v3.a.cs;
						var step = _v3.a.t;
						return {
							g0: newFixedErrors,
							h: newProject,
							f: A2(
								$elm$core$List$cons,
								newRule,
								_Utils_ap(rest, accRules)),
							t: step
						};
					} else {
						var newRule = _v3.a;
						var $temp$reviewOptions = reviewOptions,
							$temp$project = project,
							$temp$fixedErrors = fixedErrors,
							$temp$readmeData = readmeData,
							$temp$remainingRules = rest,
							$temp$accRules = A2($elm$core$List$cons, newRule, accRules);
						reviewOptions = $temp$reviewOptions;
						project = $temp$project;
						fixedErrors = $temp$fixedErrors;
						readmeData = $temp$readmeData;
						remainingRules = $temp$remainingRules;
						accRules = $temp$accRules;
						continue computeReadme;
					}
				} else {
					var $temp$reviewOptions = reviewOptions,
						$temp$project = project,
						$temp$fixedErrors = fixedErrors,
						$temp$readmeData = readmeData,
						$temp$remainingRules = rest,
						$temp$accRules = A2($elm$core$List$cons, untouched, accRules);
					reviewOptions = $temp$reviewOptions;
					project = $temp$project;
					fixedErrors = $temp$fixedErrors;
					readmeData = $temp$readmeData;
					remainingRules = $temp$remainingRules;
					accRules = $temp$accRules;
					continue computeReadme;
				}
			}
		}
	});
var $jfmengels$elm_review$Review$Project$Valid$dependencies = function (_v0) {
	var project = _v0;
	return project.e6;
};
var $jfmengels$elm_review$Review$Project$Valid$extraFiles = F2(
	function (toFileKey, _v0) {
		var project = _v0;
		return {
			gp: A2(
				$elm$core$Dict$map,
				F2(
					function (path, content) {
						return {
							db: content,
							gZ: toFileKey(
								{db: content, hw: path})
						};
					}),
				project.ap),
			gq: project.ap
		};
	});
var $jfmengels$elm_review$Review$Rule$computeStepsForProject = F2(
	function (reviewOptions, _v0) {
		computeStepsForProject:
		while (true) {
			var project = _v0.h;
			var ruleProjectVisitors = _v0.f;
			var fixedErrors = _v0.g0;
			var step = _v0.t;
			switch (step.$) {
				case 0:
					var elmJsonData = A2(
						$elm$core$Maybe$map,
						function (elmJson) {
							return {gS: elmJson, h: elmJson.h};
						},
						$jfmengels$elm_review$Review$Project$Valid$elmJson(project));
					var $temp$reviewOptions = reviewOptions,
						$temp$_v0 = A6($jfmengels$elm_review$Review$Rule$computeElmJson, reviewOptions, project, fixedErrors, elmJsonData, ruleProjectVisitors, _List_Nil);
					reviewOptions = $temp$reviewOptions;
					_v0 = $temp$_v0;
					continue computeStepsForProject;
				case 1:
					var readmeData = A2(
						$elm$core$Maybe$map,
						function (readme) {
							return {
								db: readme.db,
								hB: {db: readme.db, hw: readme.hw}
							};
						},
						$jfmengels$elm_review$Review$Project$Valid$readme(project));
					var $temp$reviewOptions = reviewOptions,
						$temp$_v0 = A6($jfmengels$elm_review$Review$Rule$computeReadme, reviewOptions, project, fixedErrors, readmeData, ruleProjectVisitors, _List_Nil);
					reviewOptions = $temp$reviewOptions;
					_v0 = $temp$_v0;
					continue computeStepsForProject;
				case 2:
					var extraFiles = A2($jfmengels$elm_review$Review$Project$Valid$extraFiles, $elm$core$Basics$identity, project);
					var $temp$reviewOptions = reviewOptions,
						$temp$_v0 = A6($jfmengels$elm_review$Review$Rule$computeExtraFiles, reviewOptions, project, fixedErrors, extraFiles, ruleProjectVisitors, _List_Nil);
					reviewOptions = $temp$reviewOptions;
					_v0 = $temp$_v0;
					continue computeStepsForProject;
				case 3:
					var dependenciesData = {
						O: $jfmengels$elm_review$Review$Project$Valid$dependencies(project),
						fb: $jfmengels$elm_review$Review$Project$Valid$directDependencies(project)
					};
					var $temp$reviewOptions = reviewOptions,
						$temp$_v0 = A6($jfmengels$elm_review$Review$Rule$computeDependencies, reviewOptions, project, fixedErrors, dependenciesData, ruleProjectVisitors, _List_Nil);
					reviewOptions = $temp$reviewOptions;
					_v0 = $temp$_v0;
					continue computeStepsForProject;
				case 4:
					var moduleZipper = step.a;
					var $temp$reviewOptions = reviewOptions,
						$temp$_v0 = A5($jfmengels$elm_review$Review$Rule$computeModules, reviewOptions, moduleZipper, project, ruleProjectVisitors, fixedErrors);
					reviewOptions = $temp$reviewOptions;
					_v0 = $temp$_v0;
					continue computeStepsForProject;
				case 5:
					var $temp$reviewOptions = reviewOptions,
						$temp$_v0 = A5($jfmengels$elm_review$Review$Rule$computeFinalProjectEvaluation, reviewOptions, project, fixedErrors, ruleProjectVisitors, _List_Nil);
					reviewOptions = $temp$reviewOptions;
					_v0 = $temp$_v0;
					continue computeStepsForProject;
				default:
					return {g0: fixedErrors, h: project, f: ruleProjectVisitors};
			}
		}
	});
var $jfmengels$elm_review$Review$Rule$runProjectVisitor = F4(
	function (reviewOptions, initialRuleProjectVisitors, initialFixedErrors, initialProject) {
		var _v0 = A2(
			$jfmengels$elm_review$Review$Rule$computeStepsForProject,
			reviewOptions,
			{g0: initialFixedErrors, h: initialProject, f: initialRuleProjectVisitors, t: $jfmengels$elm_review$Review$Rule$ElmJson});
		var project = _v0.h;
		var ruleProjectVisitors = _v0.f;
		var fixedErrors = _v0.g0;
		return {g0: fixedErrors, h: project, f: ruleProjectVisitors};
	});
var $jfmengels$elm_review$Review$Fix$FixedErrors$toDict = function (_v0) {
	var fixedErrors = _v0;
	return fixedErrors.ca;
};
var $jfmengels$elm_review$Review$Project$Valid$toRegularProject = function (_v0) {
	var validProject = _v0;
	return {
		gC: validProject.c3,
		e6: validProject.e6,
		ba: validProject.ba,
		ap: validProject.ap,
		K: validProject.K,
		fI: $elm$core$Maybe$Just(validProject.fI),
		av: validProject.ac,
		cr: _List_Nil,
		bX: validProject.bX,
		eP: validProject.eP
	};
};
var $jfmengels$elm_review$Review$Rule$runRules = F3(
	function (_v0, ruleProjectVisitors, project) {
		var reviewOptions = _v0;
		var result = A4($jfmengels$elm_review$Review$Rule$runProjectVisitor, reviewOptions, ruleProjectVisitors, $jfmengels$elm_review$Review$Fix$FixedErrors$empty, project);
		var _v1 = A2($jfmengels$elm_review$Review$Rule$computeErrorsAndRulesAndExtracts, reviewOptions, result.f);
		var errors = _v1.ca;
		var rules = _v1.aQ;
		var extracts = _v1.cS;
		return {
			ca: errors,
			cS: extracts,
			g0: $jfmengels$elm_review$Review$Fix$FixedErrors$toDict(result.g0),
			h: $jfmengels$elm_review$Review$Project$Valid$toRegularProject(result.h),
			aQ: rules
		};
	});
var $jfmengels$elm_review$Review$Rule$reviewV3 = F3(
	function (reviewOptions, rules, project) {
		var _v0 = A2($jfmengels$elm_review$Review$Rule$getValidProjectAndRules, project, rules);
		if (!_v0.$) {
			var _v1 = _v0.a;
			var validProject = _v1.a;
			var ruleProjectVisitors = _v1.b;
			return A3($jfmengels$elm_review$Review$Rule$runRules, reviewOptions, ruleProjectVisitors, validProject);
		} else {
			var errors = _v0.a;
			return {ca: errors, cS: $elm$core$Dict$empty, g0: $elm$core$Dict$empty, h: project, aQ: rules};
		}
	});
var $author$project$Elm$Review$CliCommunication$send = function (key) {
	return function (message) {
		return A2(
			$elm$core$Basics$always,
			message,
			A2(
				$author$project$Elm$Review$CliCommunication$sendLoggerMessage,
				key,
				A2(
					$elm$json$Json$Encode$encode,
					0,
					$elm$json$Json$Encode$object(message))));
	};
};
var $jfmengels$elm_review$Review$Options$fixedDisabled = $jfmengels$elm_review$Review$Options$Internal$Disabled;
var $jfmengels$elm_review$Review$Options$Internal$Enabled = function (a) {
	return {$: 1, a: a};
};
var $jfmengels$elm_review$Review$Options$fixesEnabledWithLimit = function (limit) {
	return $jfmengels$elm_review$Review$Options$Internal$Enabled(
		$elm$core$Maybe$Just(limit));
};
var $jfmengels$elm_review$Review$Options$fixesEnabledWithoutLimits = $jfmengels$elm_review$Review$Options$Internal$Enabled($elm$core$Maybe$Nothing);
var $author$project$Elm$Review$Main$toReviewOptionsFixMode = F2(
	function (fixAllAllowed, model) {
		if (!fixAllAllowed) {
			return $jfmengels$elm_review$Review$Options$fixedDisabled;
		} else {
			var _v0 = model.aj;
			switch (_v0.$) {
				case 0:
					return $jfmengels$elm_review$Review$Options$fixedDisabled;
				case 1:
					var _v1 = model.bd;
					if (!_v1.$) {
						var fixLimit = _v1.a;
						return $jfmengels$elm_review$Review$Options$fixesEnabledWithLimit(fixLimit);
					} else {
						return $jfmengels$elm_review$Review$Options$fixesEnabledWithLimit(1);
					}
				default:
					var _v2 = model.bd;
					if (!_v2.$) {
						var fixLimit = _v2.a;
						return $jfmengels$elm_review$Review$Options$fixesEnabledWithLimit(fixLimit);
					} else {
						return $jfmengels$elm_review$Review$Options$fixesEnabledWithoutLimits;
					}
			}
		}
	});
var $jfmengels$elm_review$Review$Options$withDataExtraction = F2(
	function (extract, _v0) {
		var reviewOptions = _v0;
		return _Utils_update(
			reviewOptions,
			{fj: extract});
	});
var $jfmengels$elm_review$Review$Options$withFileRemovalFixes = F2(
	function (supportFileRemoval, _v0) {
		var reviewOptions = _v0;
		return _Utils_update(
			reviewOptions,
			{ga: supportFileRemoval});
	});
var $jfmengels$elm_review$Review$Options$withFixes = F2(
	function (fixMode, _v0) {
		var reviewOptions = _v0;
		return _Utils_update(
			reviewOptions,
			{aj: fixMode});
	});
var $jfmengels$elm_review$Review$Options$withIgnoredFixes = F2(
	function (ignoreFix, _v0) {
		var reviewOptions = _v0;
		return _Utils_update(
			reviewOptions,
			{ft: ignoreFix});
	});
var $jfmengels$elm_review$Review$Logger$fromFn = $elm$core$Basics$identity;
var $jfmengels$elm_review$Review$Options$withLogger = F2(
	function (maybeLogger, _v0) {
		var reviewOptions = _v0;
		return _Utils_update(
			reviewOptions,
			{
				dA: function () {
					if (!maybeLogger.$) {
						var fn = maybeLogger.a;
						return $jfmengels$elm_review$Review$Logger$fromFn(fn);
					} else {
						return $jfmengels$elm_review$Review$Logger$none;
					}
				}()
			});
	});
var $author$project$Elm$Review$Main$runReview = F3(
	function (_v0, initialProject, model) {
		var fixesAllowed = _v0.bH;
		var _v1 = A3(
			$author$project$Elm$Review$CliCommunication$timerEnd,
			model.aV,
			'run-review',
			A3(
				$jfmengels$elm_review$Review$Rule$reviewV3,
				A2(
					$author$project$Elm$Review$SuppressedErrors$addToReviewOptions,
					model.R,
					A2(
						$jfmengels$elm_review$Review$Options$withIgnoredFixes,
						function (error) {
							return A2($author$project$Elm$Review$RefusedErrorFixes$memberUsingRecord, error, model.c4);
						},
						A2(
							$jfmengels$elm_review$Review$Options$withFileRemovalFixes,
							$author$project$Elm$Review$Main$isFileRemovalFixesEnabled(model.aj),
							A2(
								$jfmengels$elm_review$Review$Options$withFixes,
								A2($author$project$Elm$Review$Main$toReviewOptionsFixMode, fixesAllowed, model),
								A2(
									$jfmengels$elm_review$Review$Options$withLogger,
									$elm$core$Maybe$Just(
										$author$project$Elm$Review$CliCommunication$send(model.aV)),
									A2($jfmengels$elm_review$Review$Options$withDataExtraction, model.bA && (model.a1 === 1), $jfmengels$elm_review$Review$Options$defaults)))))),
				model.aQ,
				A3($author$project$Elm$Review$CliCommunication$timerStart, model.aV, 'run-review', initialProject)));
		var errors = _v1.ca;
		var rules = _v1.aQ;
		var project = _v1.h;
		var extracts = _v1.cS;
		var fixedErrors = _v1.g0;
		return _Utils_update(
			model,
			{
				aC: $author$project$Elm$Review$Main$NotAwaiting,
				cS: extracts,
				aD: fixedErrors,
				bG: project,
				ch: rules,
				dx: false,
				h: _Utils_eq(model.aj, $author$project$Elm$Review$Main$Mode_DontFix) ? project : model.h,
				bY: errors,
				aP: A3(
					$author$project$Elm$Review$CliCommunication$timerEnd,
					model.aV,
					'apply-suppressions',
					A3(
						$author$project$Elm$Review$SuppressedErrors$apply,
						model.aS,
						model.R,
						A3($author$project$Elm$Review$CliCommunication$timerStart, model.aV, 'apply-suppressions', errors))),
				aQ: (model.dx || _Utils_eq(model.aj, $author$project$Elm$Review$Main$Mode_DontFix)) ? rules : model.aQ
			});
	});
var $author$project$Elm$Review$Main$cacheFile = _Platform_outgoingPort('cacheFile', $elm$core$Basics$identity);
var $author$project$Elm$Review$Main$sendFileToBeCached = F2(
	function (project, source) {
		var _v0 = A2(
			$author$project$Elm$Review$Main$find,
			function (module_) {
				return _Utils_eq(module_.hK, source);
			},
			$jfmengels$elm_review$Review$Project$modules(project));
		if (!_v0.$) {
			var ast = _v0.a.gv;
			return $author$project$Elm$Review$Main$cacheFile(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'source',
							$elm$json$Json$Encode$string(source)),
							_Utils_Tuple2(
							'ast',
							$author$project$Elm$Review$AstCodec$encode(ast))
						])));
		} else {
			return $elm$core$Platform$Cmd$none;
		}
	});
var $author$project$Elm$Review$Main$suppressionsResponse = _Platform_outgoingPort('suppressionsResponse', $elm$core$Basics$identity);
var $author$project$Elm$Review$Main$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 0:
				var value = msg.a;
				var _v1 = A2($elm$json$Json$Decode$decodeValue, $author$project$Elm$Review$File$decode, value);
				if (!_v1.$) {
					var rawFile = _v1.a;
					var _v2 = rawFile.gv;
					if (_v2.$ === 1) {
						var project = A2(
							$jfmengels$elm_review$Review$Project$addModule,
							{hw: rawFile.hw, hK: rawFile.hK},
							model.h);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{h: project}),
							$author$project$Elm$Review$Main$acknowledgeFileReceipt(
								$elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'path',
											$elm$json$Json$Encode$string(rawFile.hw)),
											_Utils_Tuple2(
											'cacheRequest',
											A2($author$project$Elm$Review$Main$cacheFileRequest, project, rawFile.hK))
										]))));
					} else {
						var ast = _v2.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									h: A2(
										$jfmengels$elm_review$Review$Project$addParsedModule,
										{gv: ast, hw: rawFile.hw, hK: rawFile.hK},
										model.h)
								}),
							$author$project$Elm$Review$Main$acknowledgeFileReceipt(
								$elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'path',
											$elm$json$Json$Encode$string(rawFile.hw)),
											_Utils_Tuple2('cacheRequest', $elm$json$Json$Encode$null)
										]))));
					}
				} else {
					var err = _v1.a;
					return _Utils_Tuple2(
						model,
						$author$project$Elm$Review$Main$abort(
							$elm$json$Json$Decode$errorToString(err)));
				}
			case 1:
				var path = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							h: A2($jfmengels$elm_review$Review$Project$removeFile, path, model.h)
						}),
					$elm$core$Platform$Cmd$none);
			case 2:
				var rawElmJson = msg.a;
				var _v3 = A2($elm$json$Json$Decode$decodeValue, $author$project$Elm$Review$Main$elmJsonDecoder, rawElmJson);
				if (!_v3.$) {
					var elmJson = _v3.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								h: A2($jfmengels$elm_review$Review$Project$addElmJson, elmJson, model.h)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 3:
				var rawReadme = msg.a;
				var readmeDecoder = A3(
					$elm$json$Json$Decode$map2,
					F2(
						function (path, content) {
							return {db: content, hw: path};
						}),
					A2($elm$json$Json$Decode$field, 'path', $elm$json$Json$Decode$string),
					A2($elm$json$Json$Decode$field, 'content', $elm$json$Json$Decode$string));
				var _v4 = A2($elm$json$Json$Decode$decodeValue, readmeDecoder, rawReadme);
				if (!_v4.$) {
					var readme = _v4.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								h: A2($jfmengels$elm_review$Review$Project$addReadme, readme, model.h)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 4:
				var rawFiles = msg.a;
				var _v5 = A2(
					$elm$json$Json$Decode$decodeValue,
					$elm$json$Json$Decode$dict($elm$json$Json$Decode$string),
					rawFiles);
				if (!_v5.$) {
					var files = _v5.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								h: A2($jfmengels$elm_review$Review$Project$addExtraFiles, files, model.h)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 5:
				var json = msg.a;
				var _v6 = A2(
					$elm$json$Json$Decode$decodeValue,
					$author$project$Elm$Review$Main$dependenciesDecoder(model.be),
					json);
				if (_v6.$ === 1) {
					var decodeError = _v6.a;
					return _Utils_Tuple2(
						model,
						A2(
							$elm$core$String$contains,
							'I need a valid module name like',
							$elm$json$Json$Decode$errorToString(decodeError)) ? $author$project$Elm$Review$Main$abortWithDetails(
							{
								a_: 'I encountered an error when reading the dependencies of the project. It seems due to dependencies with modules containing `_` in their names. Unfortunately, this is an error I have no control over and I am waiting in one of the libraries I depend on. What I propose you do, is to re-run elm-review like this:\n\n    elm-review --ignore-problematic-dependencies\n\nThis will ignore the problematic dependencies, and can GIVE YOU INCORRECT RESULTS! This is a temporary measure.\n\nIf I am mistaken about the nature of problem, please open a bug report at https://github.com/jfmengels/node-elm-review/issues:\n\n' + $elm$json$Json$Decode$errorToString(decodeError),
								c6: 'FOUND PROBLEMATIC DEPENDENCIES'
							}) : $author$project$Elm$Review$Main$abortWithDetails(
							{
								a_: 'I encountered an error when reading the dependencies of the project. I suggest opening a bug report at https://github.com/jfmengels/node-elm-review/issues.' + $elm$json$Json$Decode$errorToString(decodeError),
								c6: 'PROBLEM READING DEPENDENCIES'
							}));
				} else {
					var dependencies = _v6.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								h: A3(
									$elm$core$List$foldl,
									$jfmengels$elm_review$Review$Project$addDependency,
									$jfmengels$elm_review$Review$Project$removeDependencies(model.h),
									dependencies)
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 6:
				var json = msg.a;
				var _v7 = A2($elm$json$Json$Decode$decodeValue, $author$project$Elm$Review$SuppressedErrors$decoder, json);
				if (_v7.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var suppressedErrors = _v7.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								c2: $author$project$Elm$Review$SuppressedErrors$count(suppressedErrors),
								R: suppressedErrors
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 7:
				var json = msg.a;
				var _v8 = A2($elm$json$Json$Decode$decodeValue, $author$project$Elm$Review$SuppressedErrors$decoder, json);
				if (_v8.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var suppressedErrors = _v8.a;
					return _Utils_eq(suppressedErrors, model.R) ? _Utils_Tuple2(model, $elm$core$Platform$Cmd$none) : $author$project$Elm$Review$Main$makeReport(
						_Utils_update(
							model,
							{
								aP: A3($author$project$Elm$Review$SuppressedErrors$apply, model.aS, suppressedErrors, model.bY),
								R: suppressedErrors
							}));
				}
			case 8:
				var json = msg.a;
				var _v9 = A2(
					$elm$json$Json$Decode$decodeValue,
					$elm$json$Json$Decode$dict($elm$json$Json$Decode$string),
					json);
				if (_v9.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var links = _v9.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{bS: links}),
						$elm$core$Platform$Cmd$none);
				}
			case 9:
				return $author$project$Elm$Review$Main$reportOrFix(
					A3(
						$author$project$Elm$Review$Main$runReview,
						{bH: true},
						model.h,
						_Utils_update(
							model,
							{aD: $elm$core$Dict$empty})));
			case 10:
				var project = $jfmengels$elm_review$Review$Project$precomputeModuleGraph(model.h);
				var newModel = A3(
					$author$project$Elm$Review$Main$runReview,
					{bH: false},
					project,
					_Utils_update(
						model,
						{aD: $elm$core$Dict$empty, h: project}));
				return _Utils_Tuple2(
					newModel,
					$author$project$Elm$Review$Main$suppressionsResponse(
						A2(
							$author$project$Elm$Review$SuppressedErrors$encode,
							_List_Nil,
							$author$project$Elm$Review$SuppressedErrors$fromReviewErrors(newModel.bY))));
			case 11:
				var confirmation = msg.a;
				var _v10 = A2(
					$elm$json$Json$Decode$decodeValue,
					$author$project$Elm$Review$Main$confirmationDecoder(model.be),
					confirmation);
				if (!_v10.$) {
					if (!_v10.a.$) {
						var rawFiles = _v10.a.a.fY;
						var dependencies = _v10.a.a.e6;
						var previousProject = model.bG;
						var newProject = A3(
							$elm$core$List$foldl,
							F2(
								function (file, acc) {
									return A3($author$project$Elm$Review$Main$addUpdatedFileToProject, dependencies, file, acc);
								}),
							previousProject,
							rawFiles);
						return (_Utils_cmp(
							$elm$core$List$length(
								$jfmengels$elm_review$Review$Project$modulesThatFailedToParse(newProject)),
							$elm$core$List$length(
								$jfmengels$elm_review$Review$Project$modulesThatFailedToParse(previousProject))) > 0) ? _Utils_Tuple2(
							model,
							$author$project$Elm$Review$Main$abort(
								'One file among ' + (A2(
									$elm$core$String$join,
									', ',
									A2(
										$elm$core$List$map,
										function ($) {
											return $.hw;
										},
										rawFiles)) + ' could not be read. An incorrect fix may have been introduced into one of these files...'))) : A2(
							$elm$core$Tuple$mapSecond,
							function (cmd) {
								return $elm$core$Platform$Cmd$batch(
									A2(
										$elm$core$List$cons,
										cmd,
										A2(
											$elm$core$List$map,
											A2(
												$elm$core$Basics$composeR,
												function ($) {
													return $.hK;
												},
												$author$project$Elm$Review$Main$sendFileToBeCached(newProject)),
											rawFiles)));
							},
							$author$project$Elm$Review$Main$reportOrFix(
								A3(
									$author$project$Elm$Review$Main$runReview,
									{bH: true},
									newProject,
									_Utils_update(
										model,
										{cL: true, aD: $elm$core$Dict$empty, h: newProject, aQ: model.ch}))));
					} else {
						var _v11 = _v10.a;
						var _v12 = model.aC;
						switch (_v12.$) {
							case 1:
								var error = _v12.a;
								return $author$project$Elm$Review$Main$reportOrFix(
									A3(
										$author$project$Elm$Review$Main$runReview,
										{bH: true},
										model.h,
										A2(
											$author$project$Elm$Review$Main$refuseError,
											error,
											_Utils_update(
												model,
												{aC: $author$project$Elm$Review$Main$NotAwaiting, bG: model.h}))));
							case 2:
								return $author$project$Elm$Review$Main$makeReport(
									A3(
										$author$project$Elm$Review$Main$runReview,
										{bH: false},
										model.h,
										_Utils_update(
											model,
											{aC: $author$project$Elm$Review$Main$NotAwaiting, bG: model.h})));
							default:
								return $author$project$Elm$Review$Main$makeReport(
									A3(
										$author$project$Elm$Review$Main$runReview,
										{bH: false},
										model.h,
										model));
						}
					}
				} else {
					var err = _v10.a;
					return _Utils_Tuple2(
						model,
						$author$project$Elm$Review$Main$abort(
							$elm$json$Json$Decode$errorToString(err)));
				}
			default:
				return _Utils_Tuple2(
					model,
					$author$project$Elm$Review$Main$fixConfirmationStatus(
						!_Utils_eq(model.aC, $author$project$Elm$Review$Main$NotAwaiting)));
		}
	});
var $elm$core$Platform$worker = _Platform_worker;
var $author$project$Elm$Review$Main$main = $elm$core$Platform$worker(
	{
		g9: $author$project$Elm$Review$Main$init,
		hP: function (_v0) {
			return $author$project$Elm$Review$Main$subscriptions;
		},
		hZ: $author$project$Elm$Review$Main$update
	});
_Platform_export({'Elm':{'Review':{'Main':{'init':$author$project$Elm$Review$Main$main($elm$json$Json$Decode$value)(0)}}}});}(this));